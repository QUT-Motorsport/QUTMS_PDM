
QUTMS-PDM-V00.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009eb8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  0800a040  0800a040  0001a040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a0f8  0800a0f8  00020134  2**0
                  CONTENTS
  4 .ARM          00000000  0800a0f8  0800a0f8  00020134  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a0f8  0800a0f8  00020134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a0f8  0800a0f8  0001a0f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a0fc  0800a0fc  0001a0fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000134  20000000  0800a100  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010b4  20000134  0800a234  00020134  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200011e8  0800a234  000211e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023aae  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005094  00000000  00000000  00043c12  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000017a0  00000000  00000000  00048ca8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001500  00000000  00000000  0004a448  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021287  00000000  00000000  0004b948  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001c5ec  00000000  00000000  0006cbcf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a46ac  00000000  00000000  000891bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012d867  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ec0  00000000  00000000  0012d8e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000134 	.word	0x20000134
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a028 	.word	0x0800a028

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000138 	.word	0x20000138
 80001c4:	0800a028 	.word	0x0800a028

080001c8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b08a      	sub	sp, #40	; 0x28
 80001cc:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 80001ce:	f107 031c 	add.w	r3, r7, #28
 80001d2:	2200      	movs	r2, #0
 80001d4:	601a      	str	r2, [r3, #0]
 80001d6:	605a      	str	r2, [r3, #4]
 80001d8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80001da:	1d3b      	adds	r3, r7, #4
 80001dc:	2200      	movs	r2, #0
 80001de:	601a      	str	r2, [r3, #0]
 80001e0:	605a      	str	r2, [r3, #4]
 80001e2:	609a      	str	r2, [r3, #8]
 80001e4:	60da      	str	r2, [r3, #12]
 80001e6:	611a      	str	r2, [r3, #16]
 80001e8:	615a      	str	r2, [r3, #20]

  /** Common config
  */
  hadc1.Instance = ADC1;
 80001ea:	4b2e      	ldr	r3, [pc, #184]	; (80002a4 <MX_ADC1_Init+0xdc>)
 80001ec:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80001f0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80001f2:	4b2c      	ldr	r3, [pc, #176]	; (80002a4 <MX_ADC1_Init+0xdc>)
 80001f4:	2200      	movs	r2, #0
 80001f6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80001f8:	4b2a      	ldr	r3, [pc, #168]	; (80002a4 <MX_ADC1_Init+0xdc>)
 80001fa:	2200      	movs	r2, #0
 80001fc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80001fe:	4b29      	ldr	r3, [pc, #164]	; (80002a4 <MX_ADC1_Init+0xdc>)
 8000200:	2200      	movs	r2, #0
 8000202:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000204:	4b27      	ldr	r3, [pc, #156]	; (80002a4 <MX_ADC1_Init+0xdc>)
 8000206:	2200      	movs	r2, #0
 8000208:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800020a:	4b26      	ldr	r3, [pc, #152]	; (80002a4 <MX_ADC1_Init+0xdc>)
 800020c:	2200      	movs	r2, #0
 800020e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000212:	4b24      	ldr	r3, [pc, #144]	; (80002a4 <MX_ADC1_Init+0xdc>)
 8000214:	2200      	movs	r2, #0
 8000216:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000218:	4b22      	ldr	r3, [pc, #136]	; (80002a4 <MX_ADC1_Init+0xdc>)
 800021a:	2201      	movs	r2, #1
 800021c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800021e:	4b21      	ldr	r3, [pc, #132]	; (80002a4 <MX_ADC1_Init+0xdc>)
 8000220:	2200      	movs	r2, #0
 8000222:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000224:	4b1f      	ldr	r3, [pc, #124]	; (80002a4 <MX_ADC1_Init+0xdc>)
 8000226:	2201      	movs	r2, #1
 8000228:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800022a:	4b1e      	ldr	r3, [pc, #120]	; (80002a4 <MX_ADC1_Init+0xdc>)
 800022c:	2200      	movs	r2, #0
 800022e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000232:	4b1c      	ldr	r3, [pc, #112]	; (80002a4 <MX_ADC1_Init+0xdc>)
 8000234:	2204      	movs	r2, #4
 8000236:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000238:	4b1a      	ldr	r3, [pc, #104]	; (80002a4 <MX_ADC1_Init+0xdc>)
 800023a:	2200      	movs	r2, #0
 800023c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800023e:	4b19      	ldr	r3, [pc, #100]	; (80002a4 <MX_ADC1_Init+0xdc>)
 8000240:	2200      	movs	r2, #0
 8000242:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000244:	4817      	ldr	r0, [pc, #92]	; (80002a4 <MX_ADC1_Init+0xdc>)
 8000246:	f001 f937 	bl	80014b8 <HAL_ADC_Init>
 800024a:	4603      	mov	r3, r0
 800024c:	2b00      	cmp	r3, #0
 800024e:	d001      	beq.n	8000254 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000250:	f000 fe34 	bl	8000ebc <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000254:	2300      	movs	r3, #0
 8000256:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000258:	f107 031c 	add.w	r3, r7, #28
 800025c:	4619      	mov	r1, r3
 800025e:	4811      	ldr	r0, [pc, #68]	; (80002a4 <MX_ADC1_Init+0xdc>)
 8000260:	f001 fd7e 	bl	8001d60 <HAL_ADCEx_MultiModeConfigChannel>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d001      	beq.n	800026e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800026a:	f000 fe27 	bl	8000ebc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800026e:	2301      	movs	r3, #1
 8000270:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000272:	2301      	movs	r3, #1
 8000274:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000276:	2300      	movs	r3, #0
 8000278:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800027a:	2300      	movs	r3, #0
 800027c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800027e:	2300      	movs	r3, #0
 8000280:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000282:	2300      	movs	r3, #0
 8000284:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000286:	1d3b      	adds	r3, r7, #4
 8000288:	4619      	mov	r1, r3
 800028a:	4806      	ldr	r0, [pc, #24]	; (80002a4 <MX_ADC1_Init+0xdc>)
 800028c:	f001 faa6 	bl	80017dc <HAL_ADC_ConfigChannel>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000296:	f000 fe11 	bl	8000ebc <Error_Handler>
  }

}
 800029a:	bf00      	nop
 800029c:	3728      	adds	r7, #40	; 0x28
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	bf00      	nop
 80002a4:	20000424 	.word	0x20000424

080002a8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b086      	sub	sp, #24
 80002ac:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80002ae:	463b      	mov	r3, r7
 80002b0:	2200      	movs	r2, #0
 80002b2:	601a      	str	r2, [r3, #0]
 80002b4:	605a      	str	r2, [r3, #4]
 80002b6:	609a      	str	r2, [r3, #8]
 80002b8:	60da      	str	r2, [r3, #12]
 80002ba:	611a      	str	r2, [r3, #16]
 80002bc:	615a      	str	r2, [r3, #20]

  /** Common config
  */
  hadc2.Instance = ADC2;
 80002be:	4b27      	ldr	r3, [pc, #156]	; (800035c <MX_ADC2_Init+0xb4>)
 80002c0:	4a27      	ldr	r2, [pc, #156]	; (8000360 <MX_ADC2_Init+0xb8>)
 80002c2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80002c4:	4b25      	ldr	r3, [pc, #148]	; (800035c <MX_ADC2_Init+0xb4>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80002ca:	4b24      	ldr	r3, [pc, #144]	; (800035c <MX_ADC2_Init+0xb4>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002d0:	4b22      	ldr	r3, [pc, #136]	; (800035c <MX_ADC2_Init+0xb4>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80002d6:	4b21      	ldr	r3, [pc, #132]	; (800035c <MX_ADC2_Init+0xb4>)
 80002d8:	2200      	movs	r2, #0
 80002da:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80002dc:	4b1f      	ldr	r3, [pc, #124]	; (800035c <MX_ADC2_Init+0xb4>)
 80002de:	2200      	movs	r2, #0
 80002e0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80002e4:	4b1d      	ldr	r3, [pc, #116]	; (800035c <MX_ADC2_Init+0xb4>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002ea:	4b1c      	ldr	r3, [pc, #112]	; (800035c <MX_ADC2_Init+0xb4>)
 80002ec:	2201      	movs	r2, #1
 80002ee:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002f0:	4b1a      	ldr	r3, [pc, #104]	; (800035c <MX_ADC2_Init+0xb4>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80002f6:	4b19      	ldr	r3, [pc, #100]	; (800035c <MX_ADC2_Init+0xb4>)
 80002f8:	2201      	movs	r2, #1
 80002fa:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80002fc:	4b17      	ldr	r3, [pc, #92]	; (800035c <MX_ADC2_Init+0xb4>)
 80002fe:	2200      	movs	r2, #0
 8000300:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000304:	4b15      	ldr	r3, [pc, #84]	; (800035c <MX_ADC2_Init+0xb4>)
 8000306:	2204      	movs	r2, #4
 8000308:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800030a:	4b14      	ldr	r3, [pc, #80]	; (800035c <MX_ADC2_Init+0xb4>)
 800030c:	2200      	movs	r2, #0
 800030e:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000310:	4b12      	ldr	r3, [pc, #72]	; (800035c <MX_ADC2_Init+0xb4>)
 8000312:	2200      	movs	r2, #0
 8000314:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000316:	4811      	ldr	r0, [pc, #68]	; (800035c <MX_ADC2_Init+0xb4>)
 8000318:	f001 f8ce 	bl	80014b8 <HAL_ADC_Init>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d001      	beq.n	8000326 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8000322:	f000 fdcb 	bl	8000ebc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000326:	230c      	movs	r3, #12
 8000328:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800032a:	2301      	movs	r3, #1
 800032c:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800032e:	2300      	movs	r3, #0
 8000330:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000332:	2300      	movs	r3, #0
 8000334:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000336:	2300      	movs	r3, #0
 8000338:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800033a:	2300      	movs	r3, #0
 800033c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800033e:	463b      	mov	r3, r7
 8000340:	4619      	mov	r1, r3
 8000342:	4806      	ldr	r0, [pc, #24]	; (800035c <MX_ADC2_Init+0xb4>)
 8000344:	f001 fa4a 	bl	80017dc <HAL_ADC_ConfigChannel>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 800034e:	f000 fdb5 	bl	8000ebc <Error_Handler>
  }

}
 8000352:	bf00      	nop
 8000354:	3718      	adds	r7, #24
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	200003d4 	.word	0x200003d4
 8000360:	50000100 	.word	0x50000100

08000364 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b08e      	sub	sp, #56	; 0x38
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800036c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000370:	2200      	movs	r2, #0
 8000372:	601a      	str	r2, [r3, #0]
 8000374:	605a      	str	r2, [r3, #4]
 8000376:	609a      	str	r2, [r3, #8]
 8000378:	60da      	str	r2, [r3, #12]
 800037a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000384:	d15e      	bne.n	8000444 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000386:	4b4a      	ldr	r3, [pc, #296]	; (80004b0 <HAL_ADC_MspInit+0x14c>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	3301      	adds	r3, #1
 800038c:	4a48      	ldr	r2, [pc, #288]	; (80004b0 <HAL_ADC_MspInit+0x14c>)
 800038e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000390:	4b47      	ldr	r3, [pc, #284]	; (80004b0 <HAL_ADC_MspInit+0x14c>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	2b01      	cmp	r3, #1
 8000396:	d10b      	bne.n	80003b0 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000398:	4b46      	ldr	r3, [pc, #280]	; (80004b4 <HAL_ADC_MspInit+0x150>)
 800039a:	695b      	ldr	r3, [r3, #20]
 800039c:	4a45      	ldr	r2, [pc, #276]	; (80004b4 <HAL_ADC_MspInit+0x150>)
 800039e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003a2:	6153      	str	r3, [r2, #20]
 80003a4:	4b43      	ldr	r3, [pc, #268]	; (80004b4 <HAL_ADC_MspInit+0x150>)
 80003a6:	695b      	ldr	r3, [r3, #20]
 80003a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003ac:	623b      	str	r3, [r7, #32]
 80003ae:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80003b0:	4b40      	ldr	r3, [pc, #256]	; (80004b4 <HAL_ADC_MspInit+0x150>)
 80003b2:	695b      	ldr	r3, [r3, #20]
 80003b4:	4a3f      	ldr	r2, [pc, #252]	; (80004b4 <HAL_ADC_MspInit+0x150>)
 80003b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80003ba:	6153      	str	r3, [r2, #20]
 80003bc:	4b3d      	ldr	r3, [pc, #244]	; (80004b4 <HAL_ADC_MspInit+0x150>)
 80003be:	695b      	ldr	r3, [r3, #20]
 80003c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80003c4:	61fb      	str	r3, [r7, #28]
 80003c6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80003c8:	4b3a      	ldr	r3, [pc, #232]	; (80004b4 <HAL_ADC_MspInit+0x150>)
 80003ca:	695b      	ldr	r3, [r3, #20]
 80003cc:	4a39      	ldr	r2, [pc, #228]	; (80004b4 <HAL_ADC_MspInit+0x150>)
 80003ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80003d2:	6153      	str	r3, [r2, #20]
 80003d4:	4b37      	ldr	r3, [pc, #220]	; (80004b4 <HAL_ADC_MspInit+0x150>)
 80003d6:	695b      	ldr	r3, [r3, #20]
 80003d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80003dc:	61bb      	str	r3, [r7, #24]
 80003de:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003e0:	4b34      	ldr	r3, [pc, #208]	; (80004b4 <HAL_ADC_MspInit+0x150>)
 80003e2:	695b      	ldr	r3, [r3, #20]
 80003e4:	4a33      	ldr	r2, [pc, #204]	; (80004b4 <HAL_ADC_MspInit+0x150>)
 80003e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003ea:	6153      	str	r3, [r2, #20]
 80003ec:	4b31      	ldr	r3, [pc, #196]	; (80004b4 <HAL_ADC_MspInit+0x150>)
 80003ee:	695b      	ldr	r3, [r3, #20]
 80003f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003f4:	617b      	str	r3, [r7, #20]
 80003f6:	697b      	ldr	r3, [r7, #20]
    PF2     ------> ADC1_IN10
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80003f8:	230f      	movs	r3, #15
 80003fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003fc:	2303      	movs	r3, #3
 80003fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000400:	2300      	movs	r3, #0
 8000402:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000404:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000408:	4619      	mov	r1, r3
 800040a:	482b      	ldr	r0, [pc, #172]	; (80004b8 <HAL_ADC_MspInit+0x154>)
 800040c:	f001 ffda 	bl	80023c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000410:	2304      	movs	r3, #4
 8000412:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000414:	2303      	movs	r3, #3
 8000416:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000418:	2300      	movs	r3, #0
 800041a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800041c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000420:	4619      	mov	r1, r3
 8000422:	4826      	ldr	r0, [pc, #152]	; (80004bc <HAL_ADC_MspInit+0x158>)
 8000424:	f001 ffce 	bl	80023c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000428:	2307      	movs	r3, #7
 800042a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800042c:	2303      	movs	r3, #3
 800042e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000430:	2300      	movs	r3, #0
 8000432:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000434:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000438:	4619      	mov	r1, r3
 800043a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800043e:	f001 ffc1 	bl	80023c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000442:	e031      	b.n	80004a8 <HAL_ADC_MspInit+0x144>
  else if(adcHandle->Instance==ADC2)
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	4a1d      	ldr	r2, [pc, #116]	; (80004c0 <HAL_ADC_MspInit+0x15c>)
 800044a:	4293      	cmp	r3, r2
 800044c:	d12c      	bne.n	80004a8 <HAL_ADC_MspInit+0x144>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800044e:	4b18      	ldr	r3, [pc, #96]	; (80004b0 <HAL_ADC_MspInit+0x14c>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	3301      	adds	r3, #1
 8000454:	4a16      	ldr	r2, [pc, #88]	; (80004b0 <HAL_ADC_MspInit+0x14c>)
 8000456:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000458:	4b15      	ldr	r3, [pc, #84]	; (80004b0 <HAL_ADC_MspInit+0x14c>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	2b01      	cmp	r3, #1
 800045e:	d10b      	bne.n	8000478 <HAL_ADC_MspInit+0x114>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000460:	4b14      	ldr	r3, [pc, #80]	; (80004b4 <HAL_ADC_MspInit+0x150>)
 8000462:	695b      	ldr	r3, [r3, #20]
 8000464:	4a13      	ldr	r2, [pc, #76]	; (80004b4 <HAL_ADC_MspInit+0x150>)
 8000466:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800046a:	6153      	str	r3, [r2, #20]
 800046c:	4b11      	ldr	r3, [pc, #68]	; (80004b4 <HAL_ADC_MspInit+0x150>)
 800046e:	695b      	ldr	r3, [r3, #20]
 8000470:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000474:	613b      	str	r3, [r7, #16]
 8000476:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000478:	4b0e      	ldr	r3, [pc, #56]	; (80004b4 <HAL_ADC_MspInit+0x150>)
 800047a:	695b      	ldr	r3, [r3, #20]
 800047c:	4a0d      	ldr	r2, [pc, #52]	; (80004b4 <HAL_ADC_MspInit+0x150>)
 800047e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000482:	6153      	str	r3, [r2, #20]
 8000484:	4b0b      	ldr	r3, [pc, #44]	; (80004b4 <HAL_ADC_MspInit+0x150>)
 8000486:	695b      	ldr	r3, [r3, #20]
 8000488:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800048c:	60fb      	str	r3, [r7, #12]
 800048e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TEMP_SENSE_Pin;
 8000490:	2304      	movs	r3, #4
 8000492:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000494:	2303      	movs	r3, #3
 8000496:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000498:	2300      	movs	r3, #0
 800049a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TEMP_SENSE_GPIO_Port, &GPIO_InitStruct);
 800049c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004a0:	4619      	mov	r1, r3
 80004a2:	4808      	ldr	r0, [pc, #32]	; (80004c4 <HAL_ADC_MspInit+0x160>)
 80004a4:	f001 ff8e 	bl	80023c4 <HAL_GPIO_Init>
}
 80004a8:	bf00      	nop
 80004aa:	3738      	adds	r7, #56	; 0x38
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	20000150 	.word	0x20000150
 80004b4:	40021000 	.word	0x40021000
 80004b8:	48000800 	.word	0x48000800
 80004bc:	48001400 	.word	0x48001400
 80004c0:	50000100 	.word	0x50000100
 80004c4:	48000400 	.word	0x48000400

080004c8 <BTS7XX_WriteRegister>:
 *
 * @return The SPI response from the previously sent message.
 */
uint8_t
BTS7XX_WriteRegister (SPI_HandleTypeDef *hspi, uint8_t command, uint8_t *data, GPIO_TypeDef* GPIO_Port, uint16_t GPIO_Pin)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b088      	sub	sp, #32
 80004cc:	af02      	add	r7, sp, #8
 80004ce:	60f8      	str	r0, [r7, #12]
 80004d0:	607a      	str	r2, [r7, #4]
 80004d2:	603b      	str	r3, [r7, #0]
 80004d4:	460b      	mov	r3, r1
 80004d6:	72fb      	strb	r3, [r7, #11]
	uint8_t TxSPIBuffer[1] = {0};
 80004d8:	2300      	movs	r3, #0
 80004da:	753b      	strb	r3, [r7, #20]
	uint8_t RxSPIBuffer[1] = {0};
 80004dc:	2300      	movs	r3, #0
 80004de:	743b      	strb	r3, [r7, #16]
//			HAL_SPI_TransmitReceive(hspi, (uint8_t *)TxSPIBuffer, (uint8_t *)RxSPIBuffer, 1, 1000);
//			HAL_GPIO_WritePin(GPIO_Port, GPIO_Pin, GPIO_PIN_SET);
//			break;
//	}

	TxSPIBuffer[0] = (uint8_t) (command | *data);
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	781a      	ldrb	r2, [r3, #0]
 80004e4:	7afb      	ldrb	r3, [r7, #11]
 80004e6:	4313      	orrs	r3, r2
 80004e8:	b2db      	uxtb	r3, r3
 80004ea:	753b      	strb	r3, [r7, #20]

	HAL_GPIO_WritePin(GPIO_Port, GPIO_Pin, GPIO_PIN_RESET);
 80004ec:	8c3b      	ldrh	r3, [r7, #32]
 80004ee:	2200      	movs	r2, #0
 80004f0:	4619      	mov	r1, r3
 80004f2:	6838      	ldr	r0, [r7, #0]
 80004f4:	f002 f8e0 	bl	80026b8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(hspi, (uint8_t *)TxSPIBuffer, (uint8_t *)RxSPIBuffer, 1, 1000);
 80004f8:	f107 0210 	add.w	r2, r7, #16
 80004fc:	f107 0114 	add.w	r1, r7, #20
 8000500:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000504:	9300      	str	r3, [sp, #0]
 8000506:	2301      	movs	r3, #1
 8000508:	68f8      	ldr	r0, [r7, #12]
 800050a:	f004 fd16 	bl	8004f3a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIO_Port, GPIO_Pin, GPIO_PIN_SET);
 800050e:	8c3b      	ldrh	r3, [r7, #32]
 8000510:	2201      	movs	r2, #1
 8000512:	4619      	mov	r1, r3
 8000514:	6838      	ldr	r0, [r7, #0]
 8000516:	f002 f8cf 	bl	80026b8 <HAL_GPIO_WritePin>
	return RxSPIBuffer[0];
 800051a:	7c3b      	ldrb	r3, [r7, #16]
}
 800051c:	4618      	mov	r0, r3
 800051e:	3718      	adds	r7, #24
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}

08000524 <BTS7XX_ReadRegister>:

uint8_t
BTS7XX_ReadRegister (SPI_HandleTypeDef *hspi, uint8_t command, GPIO_TypeDef* GPIO_Port, uint16_t GPIO_Pin)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b088      	sub	sp, #32
 8000528:	af02      	add	r7, sp, #8
 800052a:	60f8      	str	r0, [r7, #12]
 800052c:	607a      	str	r2, [r7, #4]
 800052e:	461a      	mov	r2, r3
 8000530:	460b      	mov	r3, r1
 8000532:	72fb      	strb	r3, [r7, #11]
 8000534:	4613      	mov	r3, r2
 8000536:	813b      	strh	r3, [r7, #8]
	uint8_t TxSPIBuffer[1] = {0};
 8000538:	2300      	movs	r3, #0
 800053a:	753b      	strb	r3, [r7, #20]
	uint8_t RxSPIBuffer[1] = {0};
 800053c:	2300      	movs	r3, #0
 800053e:	743b      	strb	r3, [r7, #16]

	TxSPIBuffer[0] = (uint8_t) (command);
 8000540:	7afb      	ldrb	r3, [r7, #11]
 8000542:	753b      	strb	r3, [r7, #20]
	// Send command for register you want to read
	HAL_GPIO_WritePin(GPIO_Port, GPIO_Pin, GPIO_PIN_RESET);
 8000544:	893b      	ldrh	r3, [r7, #8]
 8000546:	2200      	movs	r2, #0
 8000548:	4619      	mov	r1, r3
 800054a:	6878      	ldr	r0, [r7, #4]
 800054c:	f002 f8b4 	bl	80026b8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(hspi, (uint8_t *)TxSPIBuffer, (uint8_t *)RxSPIBuffer, 1, 1000);
 8000550:	f107 0210 	add.w	r2, r7, #16
 8000554:	f107 0114 	add.w	r1, r7, #20
 8000558:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800055c:	9300      	str	r3, [sp, #0]
 800055e:	2301      	movs	r3, #1
 8000560:	68f8      	ldr	r0, [r7, #12]
 8000562:	f004 fcea 	bl	8004f3a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIO_Port, GPIO_Pin, GPIO_PIN_SET);
 8000566:	893b      	ldrh	r3, [r7, #8]
 8000568:	2201      	movs	r2, #1
 800056a:	4619      	mov	r1, r3
 800056c:	6878      	ldr	r0, [r7, #4]
 800056e:	f002 f8a3 	bl	80026b8 <HAL_GPIO_WritePin>
	// The response from this is from the previous command,
	// So you want to send a msg again to get the data you want
	HAL_GPIO_WritePin(GPIO_Port, GPIO_Pin, GPIO_PIN_RESET);
 8000572:	893b      	ldrh	r3, [r7, #8]
 8000574:	2200      	movs	r2, #0
 8000576:	4619      	mov	r1, r3
 8000578:	6878      	ldr	r0, [r7, #4]
 800057a:	f002 f89d 	bl	80026b8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(hspi, (uint8_t *)TxSPIBuffer, (uint8_t *)RxSPIBuffer, 1, 1000);
 800057e:	f107 0210 	add.w	r2, r7, #16
 8000582:	f107 0114 	add.w	r1, r7, #20
 8000586:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800058a:	9300      	str	r3, [sp, #0]
 800058c:	2301      	movs	r3, #1
 800058e:	68f8      	ldr	r0, [r7, #12]
 8000590:	f004 fcd3 	bl	8004f3a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIO_Port, GPIO_Pin, GPIO_PIN_SET);
 8000594:	893b      	ldrh	r3, [r7, #8]
 8000596:	2201      	movs	r2, #1
 8000598:	4619      	mov	r1, r3
 800059a:	6878      	ldr	r0, [r7, #4]
 800059c:	f002 f88c 	bl	80026b8 <HAL_GPIO_WritePin>
	return RxSPIBuffer[0];
 80005a0:	7c3b      	ldrb	r3, [r7, #16]
}
 80005a2:	4618      	mov	r0, r3
 80005a4:	3718      	adds	r7, #24
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
	...

080005ac <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0

  hcan.Instance = CAN;
 80005b0:	4b16      	ldr	r3, [pc, #88]	; (800060c <MX_CAN_Init+0x60>)
 80005b2:	4a17      	ldr	r2, [pc, #92]	; (8000610 <MX_CAN_Init+0x64>)
 80005b4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80005b6:	4b15      	ldr	r3, [pc, #84]	; (800060c <MX_CAN_Init+0x60>)
 80005b8:	2210      	movs	r2, #16
 80005ba:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80005bc:	4b13      	ldr	r3, [pc, #76]	; (800060c <MX_CAN_Init+0x60>)
 80005be:	2200      	movs	r2, #0
 80005c0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005c2:	4b12      	ldr	r3, [pc, #72]	; (800060c <MX_CAN_Init+0x60>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80005c8:	4b10      	ldr	r3, [pc, #64]	; (800060c <MX_CAN_Init+0x60>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80005ce:	4b0f      	ldr	r3, [pc, #60]	; (800060c <MX_CAN_Init+0x60>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80005d4:	4b0d      	ldr	r3, [pc, #52]	; (800060c <MX_CAN_Init+0x60>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80005da:	4b0c      	ldr	r3, [pc, #48]	; (800060c <MX_CAN_Init+0x60>)
 80005dc:	2200      	movs	r2, #0
 80005de:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80005e0:	4b0a      	ldr	r3, [pc, #40]	; (800060c <MX_CAN_Init+0x60>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80005e6:	4b09      	ldr	r3, [pc, #36]	; (800060c <MX_CAN_Init+0x60>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80005ec:	4b07      	ldr	r3, [pc, #28]	; (800060c <MX_CAN_Init+0x60>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80005f2:	4b06      	ldr	r3, [pc, #24]	; (800060c <MX_CAN_Init+0x60>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80005f8:	4804      	ldr	r0, [pc, #16]	; (800060c <MX_CAN_Init+0x60>)
 80005fa:	f001 fcd6 	bl	8001faa <HAL_CAN_Init>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8000604:	f000 fc5a 	bl	8000ebc <Error_Handler>
  }

}
 8000608:	bf00      	nop
 800060a:	bd80      	pop	{r7, pc}
 800060c:	20000474 	.word	0x20000474
 8000610:	40006400 	.word	0x40006400

08000614 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b08a      	sub	sp, #40	; 0x28
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061c:	f107 0314 	add.w	r3, r7, #20
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a17      	ldr	r2, [pc, #92]	; (8000690 <HAL_CAN_MspInit+0x7c>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d127      	bne.n	8000686 <HAL_CAN_MspInit+0x72>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000636:	4b17      	ldr	r3, [pc, #92]	; (8000694 <HAL_CAN_MspInit+0x80>)
 8000638:	69db      	ldr	r3, [r3, #28]
 800063a:	4a16      	ldr	r2, [pc, #88]	; (8000694 <HAL_CAN_MspInit+0x80>)
 800063c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000640:	61d3      	str	r3, [r2, #28]
 8000642:	4b14      	ldr	r3, [pc, #80]	; (8000694 <HAL_CAN_MspInit+0x80>)
 8000644:	69db      	ldr	r3, [r3, #28]
 8000646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800064a:	613b      	str	r3, [r7, #16]
 800064c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800064e:	4b11      	ldr	r3, [pc, #68]	; (8000694 <HAL_CAN_MspInit+0x80>)
 8000650:	695b      	ldr	r3, [r3, #20]
 8000652:	4a10      	ldr	r2, [pc, #64]	; (8000694 <HAL_CAN_MspInit+0x80>)
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	6153      	str	r3, [r2, #20]
 800065a:	4b0e      	ldr	r3, [pc, #56]	; (8000694 <HAL_CAN_MspInit+0x80>)
 800065c:	695b      	ldr	r3, [r3, #20]
 800065e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000662:	60fb      	str	r3, [r7, #12]
 8000664:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PD0     ------> CAN_RX
    PD1     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000666:	2303      	movs	r3, #3
 8000668:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800066a:	2302      	movs	r3, #2
 800066c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066e:	2300      	movs	r3, #0
 8000670:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000672:	2303      	movs	r3, #3
 8000674:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_CAN;
 8000676:	2307      	movs	r3, #7
 8000678:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800067a:	f107 0314 	add.w	r3, r7, #20
 800067e:	4619      	mov	r1, r3
 8000680:	4805      	ldr	r0, [pc, #20]	; (8000698 <HAL_CAN_MspInit+0x84>)
 8000682:	f001 fe9f 	bl	80023c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 8000686:	bf00      	nop
 8000688:	3728      	adds	r7, #40	; 0x28
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40006400 	.word	0x40006400
 8000694:	40021000 	.word	0x40021000
 8000698:	48000c00 	.word	0x48000c00

0800069c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b08c      	sub	sp, #48	; 0x30
 80006a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a2:	f107 031c 	add.w	r3, r7, #28
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	605a      	str	r2, [r3, #4]
 80006ac:	609a      	str	r2, [r3, #8]
 80006ae:	60da      	str	r2, [r3, #12]
 80006b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006b2:	4b6a      	ldr	r3, [pc, #424]	; (800085c <MX_GPIO_Init+0x1c0>)
 80006b4:	695b      	ldr	r3, [r3, #20]
 80006b6:	4a69      	ldr	r2, [pc, #420]	; (800085c <MX_GPIO_Init+0x1c0>)
 80006b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006bc:	6153      	str	r3, [r2, #20]
 80006be:	4b67      	ldr	r3, [pc, #412]	; (800085c <MX_GPIO_Init+0x1c0>)
 80006c0:	695b      	ldr	r3, [r3, #20]
 80006c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006c6:	61bb      	str	r3, [r7, #24]
 80006c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006ca:	4b64      	ldr	r3, [pc, #400]	; (800085c <MX_GPIO_Init+0x1c0>)
 80006cc:	695b      	ldr	r3, [r3, #20]
 80006ce:	4a63      	ldr	r2, [pc, #396]	; (800085c <MX_GPIO_Init+0x1c0>)
 80006d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006d4:	6153      	str	r3, [r2, #20]
 80006d6:	4b61      	ldr	r3, [pc, #388]	; (800085c <MX_GPIO_Init+0x1c0>)
 80006d8:	695b      	ldr	r3, [r3, #20]
 80006da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006de:	617b      	str	r3, [r7, #20]
 80006e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e2:	4b5e      	ldr	r3, [pc, #376]	; (800085c <MX_GPIO_Init+0x1c0>)
 80006e4:	695b      	ldr	r3, [r3, #20]
 80006e6:	4a5d      	ldr	r2, [pc, #372]	; (800085c <MX_GPIO_Init+0x1c0>)
 80006e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80006ec:	6153      	str	r3, [r2, #20]
 80006ee:	4b5b      	ldr	r3, [pc, #364]	; (800085c <MX_GPIO_Init+0x1c0>)
 80006f0:	695b      	ldr	r3, [r3, #20]
 80006f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80006f6:	613b      	str	r3, [r7, #16]
 80006f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fa:	4b58      	ldr	r3, [pc, #352]	; (800085c <MX_GPIO_Init+0x1c0>)
 80006fc:	695b      	ldr	r3, [r3, #20]
 80006fe:	4a57      	ldr	r2, [pc, #348]	; (800085c <MX_GPIO_Init+0x1c0>)
 8000700:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000704:	6153      	str	r3, [r2, #20]
 8000706:	4b55      	ldr	r3, [pc, #340]	; (800085c <MX_GPIO_Init+0x1c0>)
 8000708:	695b      	ldr	r3, [r3, #20]
 800070a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000712:	4b52      	ldr	r3, [pc, #328]	; (800085c <MX_GPIO_Init+0x1c0>)
 8000714:	695b      	ldr	r3, [r3, #20]
 8000716:	4a51      	ldr	r2, [pc, #324]	; (800085c <MX_GPIO_Init+0x1c0>)
 8000718:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800071c:	6153      	str	r3, [r2, #20]
 800071e:	4b4f      	ldr	r3, [pc, #316]	; (800085c <MX_GPIO_Init+0x1c0>)
 8000720:	695b      	ldr	r3, [r3, #20]
 8000722:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000726:	60bb      	str	r3, [r7, #8]
 8000728:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800072a:	4b4c      	ldr	r3, [pc, #304]	; (800085c <MX_GPIO_Init+0x1c0>)
 800072c:	695b      	ldr	r3, [r3, #20]
 800072e:	4a4b      	ldr	r2, [pc, #300]	; (800085c <MX_GPIO_Init+0x1c0>)
 8000730:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000734:	6153      	str	r3, [r2, #20]
 8000736:	4b49      	ldr	r3, [pc, #292]	; (800085c <MX_GPIO_Init+0x1c0>)
 8000738:	695b      	ldr	r3, [r3, #20]
 800073a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4|GPIO_PIN_5|PDMC_CS1_Pin|S2_Pin
 8000742:	2200      	movs	r2, #0
 8000744:	f64f 31b0 	movw	r1, #64432	; 0xfbb0
 8000748:	4845      	ldr	r0, [pc, #276]	; (8000860 <MX_GPIO_Init+0x1c4>)
 800074a:	f001 ffb5 	bl	80026b8 <HAL_GPIO_WritePin>
                          |PDMC_CS4_Pin|S1_Pin|PDMC_CS3_Pin|LHI_Pin
                          |S0_Pin|PDMC_CS8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OPEN_LOAD8_Pin|OPEN_LOAD4_Pin|OPEN_LOAD2_Pin|OPEN_LOAD5_Pin
 800074e:	2200      	movs	r2, #0
 8000750:	21f8      	movs	r1, #248	; 0xf8
 8000752:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000756:	f001 ffaf 	bl	80026b8 <HAL_GPIO_WritePin>
                          |OPEN_LOAD1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OPEN_LOAD3_GPIO_Port, OPEN_LOAD3_Pin, GPIO_PIN_RESET);
 800075a:	2200      	movs	r2, #0
 800075c:	2110      	movs	r1, #16
 800075e:	4841      	ldr	r0, [pc, #260]	; (8000864 <MX_GPIO_Init+0x1c8>)
 8000760:	f001 ffaa 	bl	80026b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OPEN_LOAD6_Pin|OPEN_LOAD7_Pin, GPIO_PIN_RESET);
 8000764:	2200      	movs	r2, #0
 8000766:	2130      	movs	r1, #48	; 0x30
 8000768:	483f      	ldr	r0, [pc, #252]	; (8000868 <MX_GPIO_Init+0x1cc>)
 800076a:	f001 ffa5 	bl	80026b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PDMC_CS2_Pin|PDMC_CS5_Pin|PDMC_CS7_Pin|PDMC_CS6_Pin, GPIO_PIN_RESET);
 800076e:	2200      	movs	r2, #0
 8000770:	f640 4103 	movw	r1, #3075	; 0xc03
 8000774:	483d      	ldr	r0, [pc, #244]	; (800086c <MX_GPIO_Init+0x1d0>)
 8000776:	f001 ff9f 	bl	80026b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800077a:	230c      	movs	r3, #12
 800077c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800077e:	2300      	movs	r3, #0
 8000780:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000782:	2300      	movs	r3, #0
 8000784:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000786:	f107 031c 	add.w	r3, r7, #28
 800078a:	4619      	mov	r1, r3
 800078c:	4834      	ldr	r0, [pc, #208]	; (8000860 <MX_GPIO_Init+0x1c4>)
 800078e:	f001 fe19 	bl	80023c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|PDMC_CS1_Pin|S2_Pin
 8000792:	f64f 33b0 	movw	r3, #64432	; 0xfbb0
 8000796:	61fb      	str	r3, [r7, #28]
                          |PDMC_CS4_Pin|S1_Pin|PDMC_CS3_Pin|LHI_Pin
                          |S0_Pin|PDMC_CS8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000798:	2301      	movs	r3, #1
 800079a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079c:	2300      	movs	r3, #0
 800079e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a0:	2300      	movs	r3, #0
 80007a2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007a4:	f107 031c 	add.w	r3, r7, #28
 80007a8:	4619      	mov	r1, r3
 80007aa:	482d      	ldr	r0, [pc, #180]	; (8000860 <MX_GPIO_Init+0x1c4>)
 80007ac:	f001 fe0a 	bl	80023c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = OPEN_LOAD8_Pin|OPEN_LOAD4_Pin|OPEN_LOAD2_Pin|OPEN_LOAD5_Pin
 80007b0:	23f8      	movs	r3, #248	; 0xf8
 80007b2:	61fb      	str	r3, [r7, #28]
                          |OPEN_LOAD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b4:	2301      	movs	r3, #1
 80007b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007bc:	2300      	movs	r3, #0
 80007be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c0:	f107 031c 	add.w	r3, r7, #28
 80007c4:	4619      	mov	r1, r3
 80007c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ca:	f001 fdfb 	bl	80023c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OPEN_LOAD3_Pin;
 80007ce:	2310      	movs	r3, #16
 80007d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d2:	2301      	movs	r3, #1
 80007d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d6:	2300      	movs	r3, #0
 80007d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007da:	2300      	movs	r3, #0
 80007dc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OPEN_LOAD3_GPIO_Port, &GPIO_InitStruct);
 80007de:	f107 031c 	add.w	r3, r7, #28
 80007e2:	4619      	mov	r1, r3
 80007e4:	481f      	ldr	r0, [pc, #124]	; (8000864 <MX_GPIO_Init+0x1c8>)
 80007e6:	f001 fded 	bl	80023c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = OPEN_LOAD6_Pin|OPEN_LOAD7_Pin;
 80007ea:	2330      	movs	r3, #48	; 0x30
 80007ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ee:	2301      	movs	r3, #1
 80007f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f6:	2300      	movs	r3, #0
 80007f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007fa:	f107 031c 	add.w	r3, r7, #28
 80007fe:	4619      	mov	r1, r3
 8000800:	4819      	ldr	r0, [pc, #100]	; (8000868 <MX_GPIO_Init+0x1cc>)
 8000802:	f001 fddf 	bl	80023c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = PDMC_CS2_Pin|PDMC_CS5_Pin|PDMC_CS7_Pin|PDMC_CS6_Pin;
 8000806:	f640 4303 	movw	r3, #3075	; 0xc03
 800080a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080c:	2301      	movs	r3, #1
 800080e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000814:	2300      	movs	r3, #0
 8000816:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000818:	f107 031c 	add.w	r3, r7, #28
 800081c:	4619      	mov	r1, r3
 800081e:	4813      	ldr	r0, [pc, #76]	; (800086c <MX_GPIO_Init+0x1d0>)
 8000820:	f001 fdd0 	bl	80023c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000824:	2380      	movs	r3, #128	; 0x80
 8000826:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000828:	2300      	movs	r3, #0
 800082a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082c:	2300      	movs	r3, #0
 800082e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000830:	f107 031c 	add.w	r3, r7, #28
 8000834:	4619      	mov	r1, r3
 8000836:	480e      	ldr	r0, [pc, #56]	; (8000870 <MX_GPIO_Init+0x1d4>)
 8000838:	f001 fdc4 	bl	80023c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800083c:	2308      	movs	r3, #8
 800083e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000840:	2300      	movs	r3, #0
 8000842:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000848:	f107 031c 	add.w	r3, r7, #28
 800084c:	4619      	mov	r1, r3
 800084e:	4807      	ldr	r0, [pc, #28]	; (800086c <MX_GPIO_Init+0x1d0>)
 8000850:	f001 fdb8 	bl	80023c4 <HAL_GPIO_Init>

}
 8000854:	bf00      	nop
 8000856:	3730      	adds	r7, #48	; 0x30
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	40021000 	.word	0x40021000
 8000860:	48001000 	.word	0x48001000
 8000864:	48001400 	.word	0x48001400
 8000868:	48000800 	.word	0x48000800
 800086c:	48000400 	.word	0x48000400
 8000870:	48000c00 	.word	0x48000c00

08000874 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000878:	4b1b      	ldr	r3, [pc, #108]	; (80008e8 <MX_I2C1_Init+0x74>)
 800087a:	4a1c      	ldr	r2, [pc, #112]	; (80008ec <MX_I2C1_Init+0x78>)
 800087c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800087e:	4b1a      	ldr	r3, [pc, #104]	; (80008e8 <MX_I2C1_Init+0x74>)
 8000880:	4a1b      	ldr	r2, [pc, #108]	; (80008f0 <MX_I2C1_Init+0x7c>)
 8000882:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000884:	4b18      	ldr	r3, [pc, #96]	; (80008e8 <MX_I2C1_Init+0x74>)
 8000886:	2200      	movs	r2, #0
 8000888:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800088a:	4b17      	ldr	r3, [pc, #92]	; (80008e8 <MX_I2C1_Init+0x74>)
 800088c:	2201      	movs	r2, #1
 800088e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000890:	4b15      	ldr	r3, [pc, #84]	; (80008e8 <MX_I2C1_Init+0x74>)
 8000892:	2200      	movs	r2, #0
 8000894:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000896:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <MX_I2C1_Init+0x74>)
 8000898:	2200      	movs	r2, #0
 800089a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800089c:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <MX_I2C1_Init+0x74>)
 800089e:	2200      	movs	r2, #0
 80008a0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008a2:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <MX_I2C1_Init+0x74>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008a8:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <MX_I2C1_Init+0x74>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008ae:	480e      	ldr	r0, [pc, #56]	; (80008e8 <MX_I2C1_Init+0x74>)
 80008b0:	f001 ff1a 	bl	80026e8 <HAL_I2C_Init>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008ba:	f000 faff 	bl	8000ebc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008be:	2100      	movs	r1, #0
 80008c0:	4809      	ldr	r0, [pc, #36]	; (80008e8 <MX_I2C1_Init+0x74>)
 80008c2:	f001 ffa0 	bl	8002806 <HAL_I2CEx_ConfigAnalogFilter>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008cc:	f000 faf6 	bl	8000ebc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008d0:	2100      	movs	r1, #0
 80008d2:	4805      	ldr	r0, [pc, #20]	; (80008e8 <MX_I2C1_Init+0x74>)
 80008d4:	f001 ffe2 	bl	800289c <HAL_I2CEx_ConfigDigitalFilter>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008de:	f000 faed 	bl	8000ebc <Error_Handler>
  }

}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	2000049c 	.word	0x2000049c
 80008ec:	40005400 	.word	0x40005400
 80008f0:	2000090e 	.word	0x2000090e

080008f4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b08a      	sub	sp, #40	; 0x28
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fc:	f107 0314 	add.w	r3, r7, #20
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]
 8000908:	60da      	str	r2, [r3, #12]
 800090a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a17      	ldr	r2, [pc, #92]	; (8000970 <HAL_I2C_MspInit+0x7c>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d128      	bne.n	8000968 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000916:	4b17      	ldr	r3, [pc, #92]	; (8000974 <HAL_I2C_MspInit+0x80>)
 8000918:	695b      	ldr	r3, [r3, #20]
 800091a:	4a16      	ldr	r2, [pc, #88]	; (8000974 <HAL_I2C_MspInit+0x80>)
 800091c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000920:	6153      	str	r3, [r2, #20]
 8000922:	4b14      	ldr	r3, [pc, #80]	; (8000974 <HAL_I2C_MspInit+0x80>)
 8000924:	695b      	ldr	r3, [r3, #20]
 8000926:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800092a:	613b      	str	r3, [r7, #16]
 800092c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800092e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000932:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000934:	2312      	movs	r3, #18
 8000936:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000938:	2301      	movs	r3, #1
 800093a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800093c:	2303      	movs	r3, #3
 800093e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000940:	2304      	movs	r3, #4
 8000942:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000944:	f107 0314 	add.w	r3, r7, #20
 8000948:	4619      	mov	r1, r3
 800094a:	480b      	ldr	r0, [pc, #44]	; (8000978 <HAL_I2C_MspInit+0x84>)
 800094c:	f001 fd3a 	bl	80023c4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000950:	4b08      	ldr	r3, [pc, #32]	; (8000974 <HAL_I2C_MspInit+0x80>)
 8000952:	69db      	ldr	r3, [r3, #28]
 8000954:	4a07      	ldr	r2, [pc, #28]	; (8000974 <HAL_I2C_MspInit+0x80>)
 8000956:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800095a:	61d3      	str	r3, [r2, #28]
 800095c:	4b05      	ldr	r3, [pc, #20]	; (8000974 <HAL_I2C_MspInit+0x80>)
 800095e:	69db      	ldr	r3, [r3, #28]
 8000960:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000964:	60fb      	str	r3, [r7, #12]
 8000966:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000968:	bf00      	nop
 800096a:	3728      	adds	r7, #40	; 0x28
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	40005400 	.word	0x40005400
 8000974:	40021000 	.word	0x40021000
 8000978:	48000400 	.word	0x48000400

0800097c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b086      	sub	sp, #24
 8000980:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000982:	f000 fd11 	bl	80013a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000986:	f000 fa2f 	bl	8000de8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800098a:	f7ff fe87 	bl	800069c <MX_GPIO_Init>
  MX_ADC1_Init();
 800098e:	f7ff fc1b 	bl	80001c8 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000992:	f7ff fc89 	bl	80002a8 <MX_ADC2_Init>
  MX_CAN_Init();
 8000996:	f7ff fe09 	bl	80005ac <MX_CAN_Init>
  MX_I2C1_Init();
 800099a:	f7ff ff6b 	bl	8000874 <MX_I2C1_Init>
  MX_RTC_Init();
 800099e:	f000 fa95 	bl	8000ecc <MX_RTC_Init>
  MX_SPI2_Init();
 80009a2:	f000 fadf 	bl	8000f64 <MX_SPI2_Init>
  MX_SPI3_Init();
 80009a6:	f000 fb1b 	bl	8000fe0 <MX_SPI3_Init>
  MX_USART2_UART_Init();
 80009aa:	f000 fc5f 	bl	800126c <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 80009ae:	f008 fe87 	bl	80096c0 <MX_USB_DEVICE_Init>
  MX_FATFS_Init();
 80009b2:	f006 fb19 	bl	8006fe8 <MX_FATFS_Init>

  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(PDMC_CS5_GPIO_Port, PDMC_CS5_Pin, GPIO_PIN_SET);
 80009b6:	2201      	movs	r2, #1
 80009b8:	2102      	movs	r1, #2
 80009ba:	48cf      	ldr	r0, [pc, #828]	; (8000cf8 <main+0x37c>)
 80009bc:	f001 fe7c 	bl	80026b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PDMC_CS6_GPIO_Port, PDMC_CS6_Pin, GPIO_PIN_SET);
 80009c0:	2201      	movs	r2, #1
 80009c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009c6:	48cc      	ldr	r0, [pc, #816]	; (8000cf8 <main+0x37c>)
 80009c8:	f001 fe76 	bl	80026b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PDMC_CS1_GPIO_Port, PDMC_CS1_Pin, GPIO_PIN_SET);
 80009cc:	2201      	movs	r2, #1
 80009ce:	2180      	movs	r1, #128	; 0x80
 80009d0:	48ca      	ldr	r0, [pc, #808]	; (8000cfc <main+0x380>)
 80009d2:	f001 fe71 	bl	80026b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PDMC_CS7_GPIO_Port, PDMC_CS7_Pin, GPIO_PIN_SET);
 80009d6:	2201      	movs	r2, #1
 80009d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009dc:	48c6      	ldr	r0, [pc, #792]	; (8000cf8 <main+0x37c>)
 80009de:	f001 fe6b 	bl	80026b8 <HAL_GPIO_WritePin>

  uint8_t buffer[1] = {0};
 80009e2:	2300      	movs	r3, #0
 80009e4:	733b      	strb	r3, [r7, #12]
  uint8_t receiveBuff[1] = {0};
 80009e6:	2300      	movs	r3, #0
 80009e8:	723b      	strb	r3, [r7, #8]
  buffer[0] = (uint8_t)0x00;
 80009ea:	2300      	movs	r3, #0
 80009ec:	733b      	strb	r3, [r7, #12]
  receiveBuff[0] = (uint8_t)0x00;
 80009ee:	2300      	movs	r3, #0
 80009f0:	723b      	strb	r3, [r7, #8]

  uint16_t Tx16SPIBuffer[1] = {0};
 80009f2:	2300      	movs	r3, #0
 80009f4:	80bb      	strh	r3, [r7, #4]
  uint16_t RxSPIBuffer[1] = {0};
 80009f6:	2300      	movs	r3, #0
 80009f8:	803b      	strh	r3, [r7, #0]
  Tx16SPIBuffer[0] = 0xFFFF;
 80009fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009fe:	80bb      	strh	r3, [r7, #4]
  RxSPIBuffer[0] = 0xFFFF;
 8000a00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a04:	803b      	strh	r3, [r7, #0]
  HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)Tx16SPIBuffer, (uint8_t *)RxSPIBuffer, 1, 1000);
 8000a06:	463a      	mov	r2, r7
 8000a08:	1d39      	adds	r1, r7, #4
 8000a0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a0e:	9300      	str	r3, [sp, #0]
 8000a10:	2301      	movs	r3, #1
 8000a12:	48bb      	ldr	r0, [pc, #748]	; (8000d00 <main+0x384>)
 8000a14:	f004 fa91 	bl	8004f3a <HAL_SPI_TransmitReceive>

//  Set DCR register, with SWR set to 0 - bit needs to be set for writing a register
  buffer[0] = (uint8_t)0x00;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	733b      	strb	r3, [r7, #12]
  receiveBuff[0] = BTS7XX_WriteRegister(&hspi2, BTS7XX_WRITE_DCR_COMMAND, (uint8_t *)buffer, PDMC_CS5_GPIO_Port, PDMC_CS5_Pin);
 8000a1c:	f107 020c 	add.w	r2, r7, #12
 8000a20:	2302      	movs	r3, #2
 8000a22:	9300      	str	r3, [sp, #0]
 8000a24:	4bb4      	ldr	r3, [pc, #720]	; (8000cf8 <main+0x37c>)
 8000a26:	21f0      	movs	r1, #240	; 0xf0
 8000a28:	48b5      	ldr	r0, [pc, #724]	; (8000d00 <main+0x384>)
 8000a2a:	f7ff fd4d 	bl	80004c8 <BTS7XX_WriteRegister>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	723b      	strb	r3, [r7, #8]
  receiveBuff[0] = BTS7XX_WriteRegister(&hspi2, BTS7XX_WRITE_DCR_COMMAND, (uint8_t *)buffer, PDMC_CS6_GPIO_Port, PDMC_CS6_Pin);
 8000a32:	f107 020c 	add.w	r2, r7, #12
 8000a36:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a3a:	9300      	str	r3, [sp, #0]
 8000a3c:	4bae      	ldr	r3, [pc, #696]	; (8000cf8 <main+0x37c>)
 8000a3e:	21f0      	movs	r1, #240	; 0xf0
 8000a40:	48af      	ldr	r0, [pc, #700]	; (8000d00 <main+0x384>)
 8000a42:	f7ff fd41 	bl	80004c8 <BTS7XX_WriteRegister>
 8000a46:	4603      	mov	r3, r0
 8000a48:	723b      	strb	r3, [r7, #8]
  receiveBuff[0] = BTS7XX_WriteRegister(&hspi2, BTS7XX_WRITE_DCR_COMMAND, (uint8_t *)buffer, PDMC_CS1_GPIO_Port, PDMC_CS1_Pin);
 8000a4a:	f107 020c 	add.w	r2, r7, #12
 8000a4e:	2380      	movs	r3, #128	; 0x80
 8000a50:	9300      	str	r3, [sp, #0]
 8000a52:	4baa      	ldr	r3, [pc, #680]	; (8000cfc <main+0x380>)
 8000a54:	21f0      	movs	r1, #240	; 0xf0
 8000a56:	48aa      	ldr	r0, [pc, #680]	; (8000d00 <main+0x384>)
 8000a58:	f7ff fd36 	bl	80004c8 <BTS7XX_WriteRegister>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	723b      	strb	r3, [r7, #8]
  receiveBuff[0] = BTS7XX_WriteRegister(&hspi2, BTS7XX_WRITE_DCR_COMMAND, (uint8_t *)buffer, PDMC_CS7_GPIO_Port, PDMC_CS7_Pin);
 8000a60:	f107 020c 	add.w	r2, r7, #12
 8000a64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a68:	9300      	str	r3, [sp, #0]
 8000a6a:	4ba3      	ldr	r3, [pc, #652]	; (8000cf8 <main+0x37c>)
 8000a6c:	21f0      	movs	r1, #240	; 0xf0
 8000a6e:	48a4      	ldr	r0, [pc, #656]	; (8000d00 <main+0x384>)
 8000a70:	f7ff fd2a 	bl	80004c8 <BTS7XX_WriteRegister>
 8000a74:	4603      	mov	r3, r0
 8000a76:	723b      	strb	r3, [r7, #8]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	buffer[0] = BTS7XX_OUT_CH1;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	733b      	strb	r3, [r7, #12]
	receiveBuff[0] = BTS7XX_WriteRegister(&hspi2, BTS7XX_WRITE_OUT_COMMAND, (uint8_t *)buffer, PDMC_CS5_GPIO_Port, PDMC_CS5_Pin);
 8000a7c:	f107 020c 	add.w	r2, r7, #12
 8000a80:	2302      	movs	r3, #2
 8000a82:	9300      	str	r3, [sp, #0]
 8000a84:	4b9c      	ldr	r3, [pc, #624]	; (8000cf8 <main+0x37c>)
 8000a86:	2180      	movs	r1, #128	; 0x80
 8000a88:	489d      	ldr	r0, [pc, #628]	; (8000d00 <main+0x384>)
 8000a8a:	f7ff fd1d 	bl	80004c8 <BTS7XX_WriteRegister>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	723b      	strb	r3, [r7, #8]
	receiveBuff[0] = BTS7XX_WriteRegister(&hspi2, BTS7XX_WRITE_OUT_COMMAND, (uint8_t *)buffer, PDMC_CS6_GPIO_Port, PDMC_CS6_Pin);
 8000a92:	f107 020c 	add.w	r2, r7, #12
 8000a96:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a9a:	9300      	str	r3, [sp, #0]
 8000a9c:	4b96      	ldr	r3, [pc, #600]	; (8000cf8 <main+0x37c>)
 8000a9e:	2180      	movs	r1, #128	; 0x80
 8000aa0:	4897      	ldr	r0, [pc, #604]	; (8000d00 <main+0x384>)
 8000aa2:	f7ff fd11 	bl	80004c8 <BTS7XX_WriteRegister>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	723b      	strb	r3, [r7, #8]
	receiveBuff[0] = BTS7XX_WriteRegister(&hspi2, BTS7XX_WRITE_OUT_COMMAND, (uint8_t *)buffer, PDMC_CS1_GPIO_Port, PDMC_CS1_Pin);
 8000aaa:	f107 020c 	add.w	r2, r7, #12
 8000aae:	2380      	movs	r3, #128	; 0x80
 8000ab0:	9300      	str	r3, [sp, #0]
 8000ab2:	4b92      	ldr	r3, [pc, #584]	; (8000cfc <main+0x380>)
 8000ab4:	2180      	movs	r1, #128	; 0x80
 8000ab6:	4892      	ldr	r0, [pc, #584]	; (8000d00 <main+0x384>)
 8000ab8:	f7ff fd06 	bl	80004c8 <BTS7XX_WriteRegister>
 8000abc:	4603      	mov	r3, r0
 8000abe:	723b      	strb	r3, [r7, #8]
	receiveBuff[0] = BTS7XX_WriteRegister(&hspi2, BTS7XX_WRITE_OUT_COMMAND, (uint8_t *)buffer, PDMC_CS7_GPIO_Port, PDMC_CS7_Pin);
 8000ac0:	f107 020c 	add.w	r2, r7, #12
 8000ac4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ac8:	9300      	str	r3, [sp, #0]
 8000aca:	4b8b      	ldr	r3, [pc, #556]	; (8000cf8 <main+0x37c>)
 8000acc:	2180      	movs	r1, #128	; 0x80
 8000ace:	488c      	ldr	r0, [pc, #560]	; (8000d00 <main+0x384>)
 8000ad0:	f7ff fcfa 	bl	80004c8 <BTS7XX_WriteRegister>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	723b      	strb	r3, [r7, #8]
	HAL_Delay(500);
 8000ad8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000adc:	f000 fcca 	bl	8001474 <HAL_Delay>

	buffer[0] = BTS7XX_OUT_CH1 | BTS7XX_OUT_CH2;
 8000ae0:	2303      	movs	r3, #3
 8000ae2:	733b      	strb	r3, [r7, #12]
	receiveBuff[0] = BTS7XX_WriteRegister(&hspi2, BTS7XX_WRITE_OUT_COMMAND, (uint8_t *)buffer, PDMC_CS5_GPIO_Port, PDMC_CS5_Pin);
 8000ae4:	f107 020c 	add.w	r2, r7, #12
 8000ae8:	2302      	movs	r3, #2
 8000aea:	9300      	str	r3, [sp, #0]
 8000aec:	4b82      	ldr	r3, [pc, #520]	; (8000cf8 <main+0x37c>)
 8000aee:	2180      	movs	r1, #128	; 0x80
 8000af0:	4883      	ldr	r0, [pc, #524]	; (8000d00 <main+0x384>)
 8000af2:	f7ff fce9 	bl	80004c8 <BTS7XX_WriteRegister>
 8000af6:	4603      	mov	r3, r0
 8000af8:	723b      	strb	r3, [r7, #8]
	receiveBuff[0] = BTS7XX_WriteRegister(&hspi2, BTS7XX_WRITE_OUT_COMMAND, (uint8_t *)buffer, PDMC_CS6_GPIO_Port, PDMC_CS6_Pin);
 8000afa:	f107 020c 	add.w	r2, r7, #12
 8000afe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b02:	9300      	str	r3, [sp, #0]
 8000b04:	4b7c      	ldr	r3, [pc, #496]	; (8000cf8 <main+0x37c>)
 8000b06:	2180      	movs	r1, #128	; 0x80
 8000b08:	487d      	ldr	r0, [pc, #500]	; (8000d00 <main+0x384>)
 8000b0a:	f7ff fcdd 	bl	80004c8 <BTS7XX_WriteRegister>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	723b      	strb	r3, [r7, #8]
	receiveBuff[0] = BTS7XX_WriteRegister(&hspi2, BTS7XX_WRITE_OUT_COMMAND, (uint8_t *)buffer, PDMC_CS1_GPIO_Port, PDMC_CS1_Pin);
 8000b12:	f107 020c 	add.w	r2, r7, #12
 8000b16:	2380      	movs	r3, #128	; 0x80
 8000b18:	9300      	str	r3, [sp, #0]
 8000b1a:	4b78      	ldr	r3, [pc, #480]	; (8000cfc <main+0x380>)
 8000b1c:	2180      	movs	r1, #128	; 0x80
 8000b1e:	4878      	ldr	r0, [pc, #480]	; (8000d00 <main+0x384>)
 8000b20:	f7ff fcd2 	bl	80004c8 <BTS7XX_WriteRegister>
 8000b24:	4603      	mov	r3, r0
 8000b26:	723b      	strb	r3, [r7, #8]
	receiveBuff[0] = BTS7XX_WriteRegister(&hspi2, BTS7XX_WRITE_OUT_COMMAND, (uint8_t *)buffer, PDMC_CS7_GPIO_Port, PDMC_CS7_Pin);
 8000b28:	f107 020c 	add.w	r2, r7, #12
 8000b2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b30:	9300      	str	r3, [sp, #0]
 8000b32:	4b71      	ldr	r3, [pc, #452]	; (8000cf8 <main+0x37c>)
 8000b34:	2180      	movs	r1, #128	; 0x80
 8000b36:	4872      	ldr	r0, [pc, #456]	; (8000d00 <main+0x384>)
 8000b38:	f7ff fcc6 	bl	80004c8 <BTS7XX_WriteRegister>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	723b      	strb	r3, [r7, #8]
	HAL_Delay(500);
 8000b40:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b44:	f000 fc96 	bl	8001474 <HAL_Delay>

	buffer[0] = BTS7XX_OUT_CH1 | BTS7XX_OUT_CH2 | BTS7XX_OUT_CH3;
 8000b48:	2307      	movs	r3, #7
 8000b4a:	733b      	strb	r3, [r7, #12]
	receiveBuff[0] = BTS7XX_WriteRegister(&hspi2, BTS7XX_WRITE_OUT_COMMAND, (uint8_t *)buffer, PDMC_CS5_GPIO_Port, PDMC_CS5_Pin);
 8000b4c:	f107 020c 	add.w	r2, r7, #12
 8000b50:	2302      	movs	r3, #2
 8000b52:	9300      	str	r3, [sp, #0]
 8000b54:	4b68      	ldr	r3, [pc, #416]	; (8000cf8 <main+0x37c>)
 8000b56:	2180      	movs	r1, #128	; 0x80
 8000b58:	4869      	ldr	r0, [pc, #420]	; (8000d00 <main+0x384>)
 8000b5a:	f7ff fcb5 	bl	80004c8 <BTS7XX_WriteRegister>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	723b      	strb	r3, [r7, #8]
	receiveBuff[0] = BTS7XX_WriteRegister(&hspi2, BTS7XX_WRITE_OUT_COMMAND, (uint8_t *)buffer, PDMC_CS6_GPIO_Port, PDMC_CS6_Pin);
 8000b62:	f107 020c 	add.w	r2, r7, #12
 8000b66:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b6a:	9300      	str	r3, [sp, #0]
 8000b6c:	4b62      	ldr	r3, [pc, #392]	; (8000cf8 <main+0x37c>)
 8000b6e:	2180      	movs	r1, #128	; 0x80
 8000b70:	4863      	ldr	r0, [pc, #396]	; (8000d00 <main+0x384>)
 8000b72:	f7ff fca9 	bl	80004c8 <BTS7XX_WriteRegister>
 8000b76:	4603      	mov	r3, r0
 8000b78:	723b      	strb	r3, [r7, #8]
	receiveBuff[0] = BTS7XX_WriteRegister(&hspi2, BTS7XX_WRITE_OUT_COMMAND, (uint8_t *)buffer, PDMC_CS1_GPIO_Port, PDMC_CS1_Pin);
 8000b7a:	f107 020c 	add.w	r2, r7, #12
 8000b7e:	2380      	movs	r3, #128	; 0x80
 8000b80:	9300      	str	r3, [sp, #0]
 8000b82:	4b5e      	ldr	r3, [pc, #376]	; (8000cfc <main+0x380>)
 8000b84:	2180      	movs	r1, #128	; 0x80
 8000b86:	485e      	ldr	r0, [pc, #376]	; (8000d00 <main+0x384>)
 8000b88:	f7ff fc9e 	bl	80004c8 <BTS7XX_WriteRegister>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	723b      	strb	r3, [r7, #8]
	receiveBuff[0] = BTS7XX_WriteRegister(&hspi2, BTS7XX_WRITE_OUT_COMMAND, (uint8_t *)buffer, PDMC_CS7_GPIO_Port, PDMC_CS7_Pin);
 8000b90:	f107 020c 	add.w	r2, r7, #12
 8000b94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b98:	9300      	str	r3, [sp, #0]
 8000b9a:	4b57      	ldr	r3, [pc, #348]	; (8000cf8 <main+0x37c>)
 8000b9c:	2180      	movs	r1, #128	; 0x80
 8000b9e:	4858      	ldr	r0, [pc, #352]	; (8000d00 <main+0x384>)
 8000ba0:	f7ff fc92 	bl	80004c8 <BTS7XX_WriteRegister>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	723b      	strb	r3, [r7, #8]
	HAL_Delay(500);
 8000ba8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bac:	f000 fc62 	bl	8001474 <HAL_Delay>

	buffer[0] = BTS7XX_OUT_CH1 | BTS7XX_OUT_CH2 | BTS7XX_OUT_CH3 | BTS7XX_OUT_CH4;
 8000bb0:	230f      	movs	r3, #15
 8000bb2:	733b      	strb	r3, [r7, #12]
	receiveBuff[0] = BTS7XX_WriteRegister(&hspi2, BTS7XX_WRITE_OUT_COMMAND, (uint8_t *)buffer, PDMC_CS5_GPIO_Port, PDMC_CS5_Pin);
 8000bb4:	f107 020c 	add.w	r2, r7, #12
 8000bb8:	2302      	movs	r3, #2
 8000bba:	9300      	str	r3, [sp, #0]
 8000bbc:	4b4e      	ldr	r3, [pc, #312]	; (8000cf8 <main+0x37c>)
 8000bbe:	2180      	movs	r1, #128	; 0x80
 8000bc0:	484f      	ldr	r0, [pc, #316]	; (8000d00 <main+0x384>)
 8000bc2:	f7ff fc81 	bl	80004c8 <BTS7XX_WriteRegister>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	723b      	strb	r3, [r7, #8]
	receiveBuff[0] = BTS7XX_WriteRegister(&hspi2, BTS7XX_WRITE_OUT_COMMAND, (uint8_t *)buffer, PDMC_CS6_GPIO_Port, PDMC_CS6_Pin);
 8000bca:	f107 020c 	add.w	r2, r7, #12
 8000bce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000bd2:	9300      	str	r3, [sp, #0]
 8000bd4:	4b48      	ldr	r3, [pc, #288]	; (8000cf8 <main+0x37c>)
 8000bd6:	2180      	movs	r1, #128	; 0x80
 8000bd8:	4849      	ldr	r0, [pc, #292]	; (8000d00 <main+0x384>)
 8000bda:	f7ff fc75 	bl	80004c8 <BTS7XX_WriteRegister>
 8000bde:	4603      	mov	r3, r0
 8000be0:	723b      	strb	r3, [r7, #8]
	receiveBuff[0] = BTS7XX_WriteRegister(&hspi2, BTS7XX_WRITE_OUT_COMMAND, (uint8_t *)buffer, PDMC_CS1_GPIO_Port, PDMC_CS1_Pin);
 8000be2:	f107 020c 	add.w	r2, r7, #12
 8000be6:	2380      	movs	r3, #128	; 0x80
 8000be8:	9300      	str	r3, [sp, #0]
 8000bea:	4b44      	ldr	r3, [pc, #272]	; (8000cfc <main+0x380>)
 8000bec:	2180      	movs	r1, #128	; 0x80
 8000bee:	4844      	ldr	r0, [pc, #272]	; (8000d00 <main+0x384>)
 8000bf0:	f7ff fc6a 	bl	80004c8 <BTS7XX_WriteRegister>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	723b      	strb	r3, [r7, #8]
	receiveBuff[0] = BTS7XX_WriteRegister(&hspi2, BTS7XX_WRITE_OUT_COMMAND, (uint8_t *)buffer, PDMC_CS7_GPIO_Port, PDMC_CS7_Pin);
 8000bf8:	f107 020c 	add.w	r2, r7, #12
 8000bfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c00:	9300      	str	r3, [sp, #0]
 8000c02:	4b3d      	ldr	r3, [pc, #244]	; (8000cf8 <main+0x37c>)
 8000c04:	2180      	movs	r1, #128	; 0x80
 8000c06:	483e      	ldr	r0, [pc, #248]	; (8000d00 <main+0x384>)
 8000c08:	f7ff fc5e 	bl	80004c8 <BTS7XX_WriteRegister>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	723b      	strb	r3, [r7, #8]
	HAL_Delay(500);
 8000c10:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c14:	f000 fc2e 	bl	8001474 <HAL_Delay>

	buffer[0] = BTS7XX_OUT_CH1 | BTS7XX_OUT_CH2 | BTS7XX_OUT_CH3;
 8000c18:	2307      	movs	r3, #7
 8000c1a:	733b      	strb	r3, [r7, #12]
	receiveBuff[0] = BTS7XX_WriteRegister(&hspi2, BTS7XX_WRITE_OUT_COMMAND, (uint8_t *)buffer, PDMC_CS5_GPIO_Port, PDMC_CS5_Pin);
 8000c1c:	f107 020c 	add.w	r2, r7, #12
 8000c20:	2302      	movs	r3, #2
 8000c22:	9300      	str	r3, [sp, #0]
 8000c24:	4b34      	ldr	r3, [pc, #208]	; (8000cf8 <main+0x37c>)
 8000c26:	2180      	movs	r1, #128	; 0x80
 8000c28:	4835      	ldr	r0, [pc, #212]	; (8000d00 <main+0x384>)
 8000c2a:	f7ff fc4d 	bl	80004c8 <BTS7XX_WriteRegister>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	723b      	strb	r3, [r7, #8]
	receiveBuff[0] = BTS7XX_WriteRegister(&hspi2, BTS7XX_WRITE_OUT_COMMAND, (uint8_t *)buffer, PDMC_CS6_GPIO_Port, PDMC_CS6_Pin);
 8000c32:	f107 020c 	add.w	r2, r7, #12
 8000c36:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c3a:	9300      	str	r3, [sp, #0]
 8000c3c:	4b2e      	ldr	r3, [pc, #184]	; (8000cf8 <main+0x37c>)
 8000c3e:	2180      	movs	r1, #128	; 0x80
 8000c40:	482f      	ldr	r0, [pc, #188]	; (8000d00 <main+0x384>)
 8000c42:	f7ff fc41 	bl	80004c8 <BTS7XX_WriteRegister>
 8000c46:	4603      	mov	r3, r0
 8000c48:	723b      	strb	r3, [r7, #8]
	receiveBuff[0] = BTS7XX_WriteRegister(&hspi2, BTS7XX_WRITE_OUT_COMMAND, (uint8_t *)buffer, PDMC_CS1_GPIO_Port, PDMC_CS1_Pin);
 8000c4a:	f107 020c 	add.w	r2, r7, #12
 8000c4e:	2380      	movs	r3, #128	; 0x80
 8000c50:	9300      	str	r3, [sp, #0]
 8000c52:	4b2a      	ldr	r3, [pc, #168]	; (8000cfc <main+0x380>)
 8000c54:	2180      	movs	r1, #128	; 0x80
 8000c56:	482a      	ldr	r0, [pc, #168]	; (8000d00 <main+0x384>)
 8000c58:	f7ff fc36 	bl	80004c8 <BTS7XX_WriteRegister>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	723b      	strb	r3, [r7, #8]
	receiveBuff[0] = BTS7XX_WriteRegister(&hspi2, BTS7XX_WRITE_OUT_COMMAND, (uint8_t *)buffer, PDMC_CS7_GPIO_Port, PDMC_CS7_Pin);
 8000c60:	f107 020c 	add.w	r2, r7, #12
 8000c64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c68:	9300      	str	r3, [sp, #0]
 8000c6a:	4b23      	ldr	r3, [pc, #140]	; (8000cf8 <main+0x37c>)
 8000c6c:	2180      	movs	r1, #128	; 0x80
 8000c6e:	4824      	ldr	r0, [pc, #144]	; (8000d00 <main+0x384>)
 8000c70:	f7ff fc2a 	bl	80004c8 <BTS7XX_WriteRegister>
 8000c74:	4603      	mov	r3, r0
 8000c76:	723b      	strb	r3, [r7, #8]
	HAL_Delay(500);
 8000c78:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c7c:	f000 fbfa 	bl	8001474 <HAL_Delay>

	buffer[0] = BTS7XX_OUT_CH1 | BTS7XX_OUT_CH2;
 8000c80:	2303      	movs	r3, #3
 8000c82:	733b      	strb	r3, [r7, #12]
	receiveBuff[0] = BTS7XX_WriteRegister(&hspi2, BTS7XX_WRITE_OUT_COMMAND, (uint8_t *)buffer, PDMC_CS5_GPIO_Port, PDMC_CS5_Pin);
 8000c84:	f107 020c 	add.w	r2, r7, #12
 8000c88:	2302      	movs	r3, #2
 8000c8a:	9300      	str	r3, [sp, #0]
 8000c8c:	4b1a      	ldr	r3, [pc, #104]	; (8000cf8 <main+0x37c>)
 8000c8e:	2180      	movs	r1, #128	; 0x80
 8000c90:	481b      	ldr	r0, [pc, #108]	; (8000d00 <main+0x384>)
 8000c92:	f7ff fc19 	bl	80004c8 <BTS7XX_WriteRegister>
 8000c96:	4603      	mov	r3, r0
 8000c98:	723b      	strb	r3, [r7, #8]
	receiveBuff[0] = BTS7XX_WriteRegister(&hspi2, BTS7XX_WRITE_OUT_COMMAND, (uint8_t *)buffer, PDMC_CS6_GPIO_Port, PDMC_CS6_Pin);
 8000c9a:	f107 020c 	add.w	r2, r7, #12
 8000c9e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ca2:	9300      	str	r3, [sp, #0]
 8000ca4:	4b14      	ldr	r3, [pc, #80]	; (8000cf8 <main+0x37c>)
 8000ca6:	2180      	movs	r1, #128	; 0x80
 8000ca8:	4815      	ldr	r0, [pc, #84]	; (8000d00 <main+0x384>)
 8000caa:	f7ff fc0d 	bl	80004c8 <BTS7XX_WriteRegister>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	723b      	strb	r3, [r7, #8]
	receiveBuff[0] = BTS7XX_WriteRegister(&hspi2, BTS7XX_WRITE_OUT_COMMAND, (uint8_t *)buffer, PDMC_CS1_GPIO_Port, PDMC_CS1_Pin);
 8000cb2:	f107 020c 	add.w	r2, r7, #12
 8000cb6:	2380      	movs	r3, #128	; 0x80
 8000cb8:	9300      	str	r3, [sp, #0]
 8000cba:	4b10      	ldr	r3, [pc, #64]	; (8000cfc <main+0x380>)
 8000cbc:	2180      	movs	r1, #128	; 0x80
 8000cbe:	4810      	ldr	r0, [pc, #64]	; (8000d00 <main+0x384>)
 8000cc0:	f7ff fc02 	bl	80004c8 <BTS7XX_WriteRegister>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	723b      	strb	r3, [r7, #8]
	receiveBuff[0] = BTS7XX_WriteRegister(&hspi2, BTS7XX_WRITE_OUT_COMMAND, (uint8_t *)buffer, PDMC_CS7_GPIO_Port, PDMC_CS7_Pin);
 8000cc8:	f107 020c 	add.w	r2, r7, #12
 8000ccc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cd0:	9300      	str	r3, [sp, #0]
 8000cd2:	4b09      	ldr	r3, [pc, #36]	; (8000cf8 <main+0x37c>)
 8000cd4:	2180      	movs	r1, #128	; 0x80
 8000cd6:	480a      	ldr	r0, [pc, #40]	; (8000d00 <main+0x384>)
 8000cd8:	f7ff fbf6 	bl	80004c8 <BTS7XX_WriteRegister>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	723b      	strb	r3, [r7, #8]
	HAL_Delay(500);
 8000ce0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ce4:	f000 fbc6 	bl	8001474 <HAL_Delay>

	buffer[0] = BTS7XX_OUT_CH1;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	733b      	strb	r3, [r7, #12]
	receiveBuff[0] = BTS7XX_WriteRegister(&hspi2, BTS7XX_WRITE_OUT_COMMAND, (uint8_t *)buffer, PDMC_CS5_GPIO_Port, PDMC_CS5_Pin);
 8000cec:	f107 020c 	add.w	r2, r7, #12
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	9300      	str	r3, [sp, #0]
 8000cf4:	e006      	b.n	8000d04 <main+0x388>
 8000cf6:	bf00      	nop
 8000cf8:	48000400 	.word	0x48000400
 8000cfc:	48001000 	.word	0x48001000
 8000d00:	20000508 	.word	0x20000508
 8000d04:	4b35      	ldr	r3, [pc, #212]	; (8000ddc <main+0x460>)
 8000d06:	2180      	movs	r1, #128	; 0x80
 8000d08:	4835      	ldr	r0, [pc, #212]	; (8000de0 <main+0x464>)
 8000d0a:	f7ff fbdd 	bl	80004c8 <BTS7XX_WriteRegister>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	723b      	strb	r3, [r7, #8]
	receiveBuff[0] = BTS7XX_WriteRegister(&hspi2, BTS7XX_WRITE_OUT_COMMAND, (uint8_t *)buffer, PDMC_CS6_GPIO_Port, PDMC_CS6_Pin);
 8000d12:	f107 020c 	add.w	r2, r7, #12
 8000d16:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d1a:	9300      	str	r3, [sp, #0]
 8000d1c:	4b2f      	ldr	r3, [pc, #188]	; (8000ddc <main+0x460>)
 8000d1e:	2180      	movs	r1, #128	; 0x80
 8000d20:	482f      	ldr	r0, [pc, #188]	; (8000de0 <main+0x464>)
 8000d22:	f7ff fbd1 	bl	80004c8 <BTS7XX_WriteRegister>
 8000d26:	4603      	mov	r3, r0
 8000d28:	723b      	strb	r3, [r7, #8]
	receiveBuff[0] = BTS7XX_WriteRegister(&hspi2, BTS7XX_WRITE_OUT_COMMAND, (uint8_t *)buffer, PDMC_CS1_GPIO_Port, PDMC_CS1_Pin);
 8000d2a:	f107 020c 	add.w	r2, r7, #12
 8000d2e:	2380      	movs	r3, #128	; 0x80
 8000d30:	9300      	str	r3, [sp, #0]
 8000d32:	4b2c      	ldr	r3, [pc, #176]	; (8000de4 <main+0x468>)
 8000d34:	2180      	movs	r1, #128	; 0x80
 8000d36:	482a      	ldr	r0, [pc, #168]	; (8000de0 <main+0x464>)
 8000d38:	f7ff fbc6 	bl	80004c8 <BTS7XX_WriteRegister>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	723b      	strb	r3, [r7, #8]
	receiveBuff[0] = BTS7XX_WriteRegister(&hspi2, BTS7XX_WRITE_OUT_COMMAND, (uint8_t *)buffer, PDMC_CS7_GPIO_Port, PDMC_CS7_Pin);
 8000d40:	f107 020c 	add.w	r2, r7, #12
 8000d44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d48:	9300      	str	r3, [sp, #0]
 8000d4a:	4b24      	ldr	r3, [pc, #144]	; (8000ddc <main+0x460>)
 8000d4c:	2180      	movs	r1, #128	; 0x80
 8000d4e:	4824      	ldr	r0, [pc, #144]	; (8000de0 <main+0x464>)
 8000d50:	f7ff fbba 	bl	80004c8 <BTS7XX_WriteRegister>
 8000d54:	4603      	mov	r3, r0
 8000d56:	723b      	strb	r3, [r7, #8]
	HAL_Delay(500);
 8000d58:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d5c:	f000 fb8a 	bl	8001474 <HAL_Delay>

	receiveBuff[0] = BTS7XX_ReadRegister(&hspi2, BTS7XX_READ_OUT_COMMAND, PDMC_CS5_GPIO_Port, PDMC_CS5_Pin);
 8000d60:	2302      	movs	r3, #2
 8000d62:	4a1e      	ldr	r2, [pc, #120]	; (8000ddc <main+0x460>)
 8000d64:	2100      	movs	r1, #0
 8000d66:	481e      	ldr	r0, [pc, #120]	; (8000de0 <main+0x464>)
 8000d68:	f7ff fbdc 	bl	8000524 <BTS7XX_ReadRegister>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	723b      	strb	r3, [r7, #8]

	buffer[0] = 0x00;
 8000d70:	2300      	movs	r3, #0
 8000d72:	733b      	strb	r3, [r7, #12]
	receiveBuff[0] = BTS7XX_WriteRegister(&hspi2, BTS7XX_WRITE_OUT_COMMAND, (uint8_t *)buffer, PDMC_CS5_GPIO_Port, PDMC_CS5_Pin);
 8000d74:	f107 020c 	add.w	r2, r7, #12
 8000d78:	2302      	movs	r3, #2
 8000d7a:	9300      	str	r3, [sp, #0]
 8000d7c:	4b17      	ldr	r3, [pc, #92]	; (8000ddc <main+0x460>)
 8000d7e:	2180      	movs	r1, #128	; 0x80
 8000d80:	4817      	ldr	r0, [pc, #92]	; (8000de0 <main+0x464>)
 8000d82:	f7ff fba1 	bl	80004c8 <BTS7XX_WriteRegister>
 8000d86:	4603      	mov	r3, r0
 8000d88:	723b      	strb	r3, [r7, #8]
	receiveBuff[0] = BTS7XX_WriteRegister(&hspi2, BTS7XX_WRITE_OUT_COMMAND, (uint8_t *)buffer, PDMC_CS6_GPIO_Port, PDMC_CS6_Pin);
 8000d8a:	f107 020c 	add.w	r2, r7, #12
 8000d8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d92:	9300      	str	r3, [sp, #0]
 8000d94:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <main+0x460>)
 8000d96:	2180      	movs	r1, #128	; 0x80
 8000d98:	4811      	ldr	r0, [pc, #68]	; (8000de0 <main+0x464>)
 8000d9a:	f7ff fb95 	bl	80004c8 <BTS7XX_WriteRegister>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	723b      	strb	r3, [r7, #8]
	receiveBuff[0] = BTS7XX_WriteRegister(&hspi2, BTS7XX_WRITE_OUT_COMMAND, (uint8_t *)buffer, PDMC_CS1_GPIO_Port, PDMC_CS1_Pin);
 8000da2:	f107 020c 	add.w	r2, r7, #12
 8000da6:	2380      	movs	r3, #128	; 0x80
 8000da8:	9300      	str	r3, [sp, #0]
 8000daa:	4b0e      	ldr	r3, [pc, #56]	; (8000de4 <main+0x468>)
 8000dac:	2180      	movs	r1, #128	; 0x80
 8000dae:	480c      	ldr	r0, [pc, #48]	; (8000de0 <main+0x464>)
 8000db0:	f7ff fb8a 	bl	80004c8 <BTS7XX_WriteRegister>
 8000db4:	4603      	mov	r3, r0
 8000db6:	723b      	strb	r3, [r7, #8]
	receiveBuff[0] = BTS7XX_WriteRegister(&hspi2, BTS7XX_WRITE_OUT_COMMAND, (uint8_t *)buffer, PDMC_CS7_GPIO_Port, PDMC_CS7_Pin);
 8000db8:	f107 020c 	add.w	r2, r7, #12
 8000dbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dc0:	9300      	str	r3, [sp, #0]
 8000dc2:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <main+0x460>)
 8000dc4:	2180      	movs	r1, #128	; 0x80
 8000dc6:	4806      	ldr	r0, [pc, #24]	; (8000de0 <main+0x464>)
 8000dc8:	f7ff fb7e 	bl	80004c8 <BTS7XX_WriteRegister>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	723b      	strb	r3, [r7, #8]
	HAL_Delay(500);
 8000dd0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dd4:	f000 fb4e 	bl	8001474 <HAL_Delay>
	buffer[0] = BTS7XX_OUT_CH1;
 8000dd8:	e64e      	b.n	8000a78 <main+0xfc>
 8000dda:	bf00      	nop
 8000ddc:	48000400 	.word	0x48000400
 8000de0:	20000508 	.word	0x20000508
 8000de4:	48001000 	.word	0x48001000

08000de8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b09c      	sub	sp, #112	; 0x70
 8000dec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000df2:	2228      	movs	r2, #40	; 0x28
 8000df4:	2100      	movs	r1, #0
 8000df6:	4618      	mov	r0, r3
 8000df8:	f009 f90e 	bl	800a018 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dfc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e0c:	463b      	mov	r3, r7
 8000e0e:	2234      	movs	r2, #52	; 0x34
 8000e10:	2100      	movs	r1, #0
 8000e12:	4618      	mov	r0, r3
 8000e14:	f009 f900 	bl	800a018 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000e18:	230b      	movs	r3, #11
 8000e1a:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e20:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e22:	2300      	movs	r3, #0
 8000e24:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e26:	2301      	movs	r3, #1
 8000e28:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e2a:	2310      	movs	r3, #16
 8000e2c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e32:	2302      	movs	r3, #2
 8000e34:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e3a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e3c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000e40:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e42:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000e46:	4618      	mov	r0, r3
 8000e48:	f002 fc30 	bl	80036ac <HAL_RCC_OscConfig>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000e52:	f000 f833 	bl	8000ebc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e56:	230f      	movs	r3, #15
 8000e58:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e66:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e6c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e70:	2102      	movs	r1, #2
 8000e72:	4618      	mov	r0, r3
 8000e74:	f003 fb22 	bl	80044bc <HAL_RCC_ClockConfig>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000e7e:	f000 f81d 	bl	8000ebc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART2
 8000e82:	4b0d      	ldr	r3, [pc, #52]	; (8000eb8 <SystemClock_Config+0xd0>)
 8000e84:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e86:	2300      	movs	r3, #0
 8000e88:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000e8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e8e:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000e90:	2300      	movs	r3, #0
 8000e92:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000e94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e98:	607b      	str	r3, [r7, #4]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e9e:	463b      	mov	r3, r7
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f003 fd41 	bl	8004928 <HAL_RCCEx_PeriphCLKConfig>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000eac:	f000 f806 	bl	8000ebc <Error_Handler>
  }
}
 8000eb0:	bf00      	nop
 8000eb2:	3770      	adds	r7, #112	; 0x70
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	000300a2 	.word	0x000300a2

08000ebc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
	...

08000ecc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000ed0:	4b0f      	ldr	r3, [pc, #60]	; (8000f10 <MX_RTC_Init+0x44>)
 8000ed2:	4a10      	ldr	r2, [pc, #64]	; (8000f14 <MX_RTC_Init+0x48>)
 8000ed4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000ed6:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <MX_RTC_Init+0x44>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000edc:	4b0c      	ldr	r3, [pc, #48]	; (8000f10 <MX_RTC_Init+0x44>)
 8000ede:	227f      	movs	r2, #127	; 0x7f
 8000ee0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000ee2:	4b0b      	ldr	r3, [pc, #44]	; (8000f10 <MX_RTC_Init+0x44>)
 8000ee4:	22ff      	movs	r2, #255	; 0xff
 8000ee6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000ee8:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <MX_RTC_Init+0x44>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000eee:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <MX_RTC_Init+0x44>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000ef4:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <MX_RTC_Init+0x44>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000efa:	4805      	ldr	r0, [pc, #20]	; (8000f10 <MX_RTC_Init+0x44>)
 8000efc:	f003 fea6 	bl	8004c4c <HAL_RTC_Init>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000f06:	f7ff ffd9 	bl	8000ebc <Error_Handler>
  }

}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	200004e8 	.word	0x200004e8
 8000f14:	40002800 	.word	0x40002800

08000f18 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a0d      	ldr	r2, [pc, #52]	; (8000f5c <HAL_RTC_MspInit+0x44>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d111      	bne.n	8000f4e <HAL_RTC_MspInit+0x36>
 8000f2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f2e:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	fa93 f3a3 	rbit	r3, r3
 8000f36:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000f38:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000f3a:	fab3 f383 	clz	r3, r3
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	461a      	mov	r2, r3
 8000f42:	4b07      	ldr	r3, [pc, #28]	; (8000f60 <HAL_RTC_MspInit+0x48>)
 8000f44:	4413      	add	r3, r2
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	461a      	mov	r2, r3
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000f4e:	bf00      	nop
 8000f50:	3714      	adds	r7, #20
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	40002800 	.word	0x40002800
 8000f60:	10908100 	.word	0x10908100

08000f64 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8000f68:	4b1b      	ldr	r3, [pc, #108]	; (8000fd8 <MX_SPI2_Init+0x74>)
 8000f6a:	4a1c      	ldr	r2, [pc, #112]	; (8000fdc <MX_SPI2_Init+0x78>)
 8000f6c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f6e:	4b1a      	ldr	r3, [pc, #104]	; (8000fd8 <MX_SPI2_Init+0x74>)
 8000f70:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f74:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000f76:	4b18      	ldr	r3, [pc, #96]	; (8000fd8 <MX_SPI2_Init+0x74>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f7c:	4b16      	ldr	r3, [pc, #88]	; (8000fd8 <MX_SPI2_Init+0x74>)
 8000f7e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000f82:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f84:	4b14      	ldr	r3, [pc, #80]	; (8000fd8 <MX_SPI2_Init+0x74>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000f8a:	4b13      	ldr	r3, [pc, #76]	; (8000fd8 <MX_SPI2_Init+0x74>)
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000f90:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <MX_SPI2_Init+0x74>)
 8000f92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f96:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000f98:	4b0f      	ldr	r3, [pc, #60]	; (8000fd8 <MX_SPI2_Init+0x74>)
 8000f9a:	2238      	movs	r2, #56	; 0x38
 8000f9c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f9e:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <MX_SPI2_Init+0x74>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fa4:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <MX_SPI2_Init+0x74>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000faa:	4b0b      	ldr	r3, [pc, #44]	; (8000fd8 <MX_SPI2_Init+0x74>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000fb0:	4b09      	ldr	r3, [pc, #36]	; (8000fd8 <MX_SPI2_Init+0x74>)
 8000fb2:	2207      	movs	r2, #7
 8000fb4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000fb6:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <MX_SPI2_Init+0x74>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000fbc:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <MX_SPI2_Init+0x74>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000fc2:	4805      	ldr	r0, [pc, #20]	; (8000fd8 <MX_SPI2_Init+0x74>)
 8000fc4:	f003 ff27 	bl	8004e16 <HAL_SPI_Init>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000fce:	f7ff ff75 	bl	8000ebc <Error_Handler>
  }

}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000508 	.word	0x20000508
 8000fdc:	40003800 	.word	0x40003800

08000fe0 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8000fe4:	4b1b      	ldr	r3, [pc, #108]	; (8001054 <MX_SPI3_Init+0x74>)
 8000fe6:	4a1c      	ldr	r2, [pc, #112]	; (8001058 <MX_SPI3_Init+0x78>)
 8000fe8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000fea:	4b1a      	ldr	r3, [pc, #104]	; (8001054 <MX_SPI3_Init+0x74>)
 8000fec:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ff0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000ff2:	4b18      	ldr	r3, [pc, #96]	; (8001054 <MX_SPI3_Init+0x74>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000ff8:	4b16      	ldr	r3, [pc, #88]	; (8001054 <MX_SPI3_Init+0x74>)
 8000ffa:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000ffe:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001000:	4b14      	ldr	r3, [pc, #80]	; (8001054 <MX_SPI3_Init+0x74>)
 8001002:	2200      	movs	r2, #0
 8001004:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001006:	4b13      	ldr	r3, [pc, #76]	; (8001054 <MX_SPI3_Init+0x74>)
 8001008:	2200      	movs	r2, #0
 800100a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800100c:	4b11      	ldr	r3, [pc, #68]	; (8001054 <MX_SPI3_Init+0x74>)
 800100e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001012:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001014:	4b0f      	ldr	r3, [pc, #60]	; (8001054 <MX_SPI3_Init+0x74>)
 8001016:	2218      	movs	r2, #24
 8001018:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800101a:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <MX_SPI3_Init+0x74>)
 800101c:	2200      	movs	r2, #0
 800101e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001020:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <MX_SPI3_Init+0x74>)
 8001022:	2200      	movs	r2, #0
 8001024:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001026:	4b0b      	ldr	r3, [pc, #44]	; (8001054 <MX_SPI3_Init+0x74>)
 8001028:	2200      	movs	r2, #0
 800102a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800102c:	4b09      	ldr	r3, [pc, #36]	; (8001054 <MX_SPI3_Init+0x74>)
 800102e:	2207      	movs	r2, #7
 8001030:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001032:	4b08      	ldr	r3, [pc, #32]	; (8001054 <MX_SPI3_Init+0x74>)
 8001034:	2200      	movs	r2, #0
 8001036:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001038:	4b06      	ldr	r3, [pc, #24]	; (8001054 <MX_SPI3_Init+0x74>)
 800103a:	2208      	movs	r2, #8
 800103c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800103e:	4805      	ldr	r0, [pc, #20]	; (8001054 <MX_SPI3_Init+0x74>)
 8001040:	f003 fee9 	bl	8004e16 <HAL_SPI_Init>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800104a:	f7ff ff37 	bl	8000ebc <Error_Handler>
  }

}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	2000056c 	.word	0x2000056c
 8001058:	40003c00 	.word	0x40003c00

0800105c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b08c      	sub	sp, #48	; 0x30
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001064:	f107 031c 	add.w	r3, r7, #28
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a3e      	ldr	r2, [pc, #248]	; (8001174 <HAL_SPI_MspInit+0x118>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d129      	bne.n	80010d2 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800107e:	4b3e      	ldr	r3, [pc, #248]	; (8001178 <HAL_SPI_MspInit+0x11c>)
 8001080:	69db      	ldr	r3, [r3, #28]
 8001082:	4a3d      	ldr	r2, [pc, #244]	; (8001178 <HAL_SPI_MspInit+0x11c>)
 8001084:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001088:	61d3      	str	r3, [r2, #28]
 800108a:	4b3b      	ldr	r3, [pc, #236]	; (8001178 <HAL_SPI_MspInit+0x11c>)
 800108c:	69db      	ldr	r3, [r3, #28]
 800108e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001092:	61bb      	str	r3, [r7, #24]
 8001094:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001096:	4b38      	ldr	r3, [pc, #224]	; (8001178 <HAL_SPI_MspInit+0x11c>)
 8001098:	695b      	ldr	r3, [r3, #20]
 800109a:	4a37      	ldr	r2, [pc, #220]	; (8001178 <HAL_SPI_MspInit+0x11c>)
 800109c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010a0:	6153      	str	r3, [r2, #20]
 80010a2:	4b35      	ldr	r3, [pc, #212]	; (8001178 <HAL_SPI_MspInit+0x11c>)
 80010a4:	695b      	ldr	r3, [r3, #20]
 80010a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010aa:	617b      	str	r3, [r7, #20]
 80010ac:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80010ae:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80010b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b4:	2302      	movs	r3, #2
 80010b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010bc:	2303      	movs	r3, #3
 80010be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010c0:	2305      	movs	r3, #5
 80010c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c4:	f107 031c 	add.w	r3, r7, #28
 80010c8:	4619      	mov	r1, r3
 80010ca:	482c      	ldr	r0, [pc, #176]	; (800117c <HAL_SPI_MspInit+0x120>)
 80010cc:	f001 f97a 	bl	80023c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80010d0:	e04b      	b.n	800116a <HAL_SPI_MspInit+0x10e>
  else if(spiHandle->Instance==SPI3)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a2a      	ldr	r2, [pc, #168]	; (8001180 <HAL_SPI_MspInit+0x124>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d146      	bne.n	800116a <HAL_SPI_MspInit+0x10e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80010dc:	4b26      	ldr	r3, [pc, #152]	; (8001178 <HAL_SPI_MspInit+0x11c>)
 80010de:	69db      	ldr	r3, [r3, #28]
 80010e0:	4a25      	ldr	r2, [pc, #148]	; (8001178 <HAL_SPI_MspInit+0x11c>)
 80010e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010e6:	61d3      	str	r3, [r2, #28]
 80010e8:	4b23      	ldr	r3, [pc, #140]	; (8001178 <HAL_SPI_MspInit+0x11c>)
 80010ea:	69db      	ldr	r3, [r3, #28]
 80010ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80010f0:	613b      	str	r3, [r7, #16]
 80010f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f4:	4b20      	ldr	r3, [pc, #128]	; (8001178 <HAL_SPI_MspInit+0x11c>)
 80010f6:	695b      	ldr	r3, [r3, #20]
 80010f8:	4a1f      	ldr	r2, [pc, #124]	; (8001178 <HAL_SPI_MspInit+0x11c>)
 80010fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010fe:	6153      	str	r3, [r2, #20]
 8001100:	4b1d      	ldr	r3, [pc, #116]	; (8001178 <HAL_SPI_MspInit+0x11c>)
 8001102:	695b      	ldr	r3, [r3, #20]
 8001104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001108:	60fb      	str	r3, [r7, #12]
 800110a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800110c:	4b1a      	ldr	r3, [pc, #104]	; (8001178 <HAL_SPI_MspInit+0x11c>)
 800110e:	695b      	ldr	r3, [r3, #20]
 8001110:	4a19      	ldr	r2, [pc, #100]	; (8001178 <HAL_SPI_MspInit+0x11c>)
 8001112:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001116:	6153      	str	r3, [r2, #20]
 8001118:	4b17      	ldr	r3, [pc, #92]	; (8001178 <HAL_SPI_MspInit+0x11c>)
 800111a:	695b      	ldr	r3, [r3, #20]
 800111c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001120:	60bb      	str	r3, [r7, #8]
 8001122:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001124:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001128:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112a:	2302      	movs	r3, #2
 800112c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112e:	2300      	movs	r3, #0
 8001130:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001132:	2303      	movs	r3, #3
 8001134:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001136:	2306      	movs	r3, #6
 8001138:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800113a:	f107 031c 	add.w	r3, r7, #28
 800113e:	4619      	mov	r1, r3
 8001140:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001144:	f001 f93e 	bl	80023c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001148:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800114c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114e:	2302      	movs	r3, #2
 8001150:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001156:	2303      	movs	r3, #3
 8001158:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800115a:	2306      	movs	r3, #6
 800115c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800115e:	f107 031c 	add.w	r3, r7, #28
 8001162:	4619      	mov	r1, r3
 8001164:	4807      	ldr	r0, [pc, #28]	; (8001184 <HAL_SPI_MspInit+0x128>)
 8001166:	f001 f92d 	bl	80023c4 <HAL_GPIO_Init>
}
 800116a:	bf00      	nop
 800116c:	3730      	adds	r7, #48	; 0x30
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40003800 	.word	0x40003800
 8001178:	40021000 	.word	0x40021000
 800117c:	48000400 	.word	0x48000400
 8001180:	40003c00 	.word	0x40003c00
 8001184:	48000800 	.word	0x48000800

08001188 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800118e:	4b0f      	ldr	r3, [pc, #60]	; (80011cc <HAL_MspInit+0x44>)
 8001190:	699b      	ldr	r3, [r3, #24]
 8001192:	4a0e      	ldr	r2, [pc, #56]	; (80011cc <HAL_MspInit+0x44>)
 8001194:	f043 0301 	orr.w	r3, r3, #1
 8001198:	6193      	str	r3, [r2, #24]
 800119a:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <HAL_MspInit+0x44>)
 800119c:	699b      	ldr	r3, [r3, #24]
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	607b      	str	r3, [r7, #4]
 80011a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011a6:	4b09      	ldr	r3, [pc, #36]	; (80011cc <HAL_MspInit+0x44>)
 80011a8:	69db      	ldr	r3, [r3, #28]
 80011aa:	4a08      	ldr	r2, [pc, #32]	; (80011cc <HAL_MspInit+0x44>)
 80011ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011b0:	61d3      	str	r3, [r2, #28]
 80011b2:	4b06      	ldr	r3, [pc, #24]	; (80011cc <HAL_MspInit+0x44>)
 80011b4:	69db      	ldr	r3, [r3, #28]
 80011b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ba:	603b      	str	r3, [r7, #0]
 80011bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011be:	bf00      	nop
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	40021000 	.word	0x40021000

080011d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80011d4:	bf00      	nop
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr

080011de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011de:	b480      	push	{r7}
 80011e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011e2:	e7fe      	b.n	80011e2 <HardFault_Handler+0x4>

080011e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011e8:	e7fe      	b.n	80011e8 <MemManage_Handler+0x4>

080011ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011ea:	b480      	push	{r7}
 80011ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ee:	e7fe      	b.n	80011ee <BusFault_Handler+0x4>

080011f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011f4:	e7fe      	b.n	80011f4 <UsageFault_Handler+0x4>

080011f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011f6:	b480      	push	{r7}
 80011f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011fa:	bf00      	nop
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr

08001204 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr

08001212 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001212:	b480      	push	{r7}
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001224:	f000 f906 	bl	8001434 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001228:	bf00      	nop
 800122a:	bd80      	pop	{r7, pc}

0800122c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001230:	4802      	ldr	r0, [pc, #8]	; (800123c <USB_LP_IRQHandler+0x10>)
 8001232:	f001 fc59 	bl	8002ae8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	20000f7c 	.word	0x20000f7c

08001240 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001244:	4b08      	ldr	r3, [pc, #32]	; (8001268 <SystemInit+0x28>)
 8001246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800124a:	4a07      	ldr	r2, [pc, #28]	; (8001268 <SystemInit+0x28>)
 800124c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001250:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001254:	4b04      	ldr	r3, [pc, #16]	; (8001268 <SystemInit+0x28>)
 8001256:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800125a:	609a      	str	r2, [r3, #8]
#endif
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	e000ed00 	.word	0xe000ed00

0800126c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001270:	4b14      	ldr	r3, [pc, #80]	; (80012c4 <MX_USART2_UART_Init+0x58>)
 8001272:	4a15      	ldr	r2, [pc, #84]	; (80012c8 <MX_USART2_UART_Init+0x5c>)
 8001274:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001276:	4b13      	ldr	r3, [pc, #76]	; (80012c4 <MX_USART2_UART_Init+0x58>)
 8001278:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800127c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800127e:	4b11      	ldr	r3, [pc, #68]	; (80012c4 <MX_USART2_UART_Init+0x58>)
 8001280:	2200      	movs	r2, #0
 8001282:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001284:	4b0f      	ldr	r3, [pc, #60]	; (80012c4 <MX_USART2_UART_Init+0x58>)
 8001286:	2200      	movs	r2, #0
 8001288:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800128a:	4b0e      	ldr	r3, [pc, #56]	; (80012c4 <MX_USART2_UART_Init+0x58>)
 800128c:	2200      	movs	r2, #0
 800128e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001290:	4b0c      	ldr	r3, [pc, #48]	; (80012c4 <MX_USART2_UART_Init+0x58>)
 8001292:	220c      	movs	r2, #12
 8001294:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001296:	4b0b      	ldr	r3, [pc, #44]	; (80012c4 <MX_USART2_UART_Init+0x58>)
 8001298:	2200      	movs	r2, #0
 800129a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800129c:	4b09      	ldr	r3, [pc, #36]	; (80012c4 <MX_USART2_UART_Init+0x58>)
 800129e:	2200      	movs	r2, #0
 80012a0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012a2:	4b08      	ldr	r3, [pc, #32]	; (80012c4 <MX_USART2_UART_Init+0x58>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012a8:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <MX_USART2_UART_Init+0x58>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012ae:	4805      	ldr	r0, [pc, #20]	; (80012c4 <MX_USART2_UART_Init+0x58>)
 80012b0:	f004 f973 	bl	800559a <HAL_UART_Init>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80012ba:	f7ff fdff 	bl	8000ebc <Error_Handler>
  }

}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	200005d0 	.word	0x200005d0
 80012c8:	40004400 	.word	0x40004400

080012cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b08a      	sub	sp, #40	; 0x28
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d4:	f107 0314 	add.w	r3, r7, #20
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]
 80012e2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a17      	ldr	r2, [pc, #92]	; (8001348 <HAL_UART_MspInit+0x7c>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d127      	bne.n	800133e <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012ee:	4b17      	ldr	r3, [pc, #92]	; (800134c <HAL_UART_MspInit+0x80>)
 80012f0:	69db      	ldr	r3, [r3, #28]
 80012f2:	4a16      	ldr	r2, [pc, #88]	; (800134c <HAL_UART_MspInit+0x80>)
 80012f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012f8:	61d3      	str	r3, [r2, #28]
 80012fa:	4b14      	ldr	r3, [pc, #80]	; (800134c <HAL_UART_MspInit+0x80>)
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001302:	613b      	str	r3, [r7, #16]
 8001304:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001306:	4b11      	ldr	r3, [pc, #68]	; (800134c <HAL_UART_MspInit+0x80>)
 8001308:	695b      	ldr	r3, [r3, #20]
 800130a:	4a10      	ldr	r2, [pc, #64]	; (800134c <HAL_UART_MspInit+0x80>)
 800130c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001310:	6153      	str	r3, [r2, #20]
 8001312:	4b0e      	ldr	r3, [pc, #56]	; (800134c <HAL_UART_MspInit+0x80>)
 8001314:	695b      	ldr	r3, [r3, #20]
 8001316:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800131e:	2360      	movs	r3, #96	; 0x60
 8001320:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001322:	2302      	movs	r3, #2
 8001324:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001326:	2300      	movs	r3, #0
 8001328:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800132a:	2303      	movs	r3, #3
 800132c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800132e:	2307      	movs	r3, #7
 8001330:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001332:	f107 0314 	add.w	r3, r7, #20
 8001336:	4619      	mov	r1, r3
 8001338:	4805      	ldr	r0, [pc, #20]	; (8001350 <HAL_UART_MspInit+0x84>)
 800133a:	f001 f843 	bl	80023c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800133e:	bf00      	nop
 8001340:	3728      	adds	r7, #40	; 0x28
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40004400 	.word	0x40004400
 800134c:	40021000 	.word	0x40021000
 8001350:	48000c00 	.word	0x48000c00

08001354 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001354:	f8df d034 	ldr.w	sp, [pc, #52]	; 800138c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001358:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800135a:	e003      	b.n	8001364 <LoopCopyDataInit>

0800135c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800135c:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800135e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001360:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001362:	3104      	adds	r1, #4

08001364 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001364:	480b      	ldr	r0, [pc, #44]	; (8001394 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001366:	4b0c      	ldr	r3, [pc, #48]	; (8001398 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001368:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800136a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800136c:	d3f6      	bcc.n	800135c <CopyDataInit>
	ldr	r2, =_sbss
 800136e:	4a0b      	ldr	r2, [pc, #44]	; (800139c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001370:	e002      	b.n	8001378 <LoopFillZerobss>

08001372 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001372:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001374:	f842 3b04 	str.w	r3, [r2], #4

08001378 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001378:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <LoopForever+0x16>)
	cmp	r2, r3
 800137a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800137c:	d3f9      	bcc.n	8001372 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800137e:	f7ff ff5f 	bl	8001240 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001382:	f008 fe25 	bl	8009fd0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001386:	f7ff faf9 	bl	800097c <main>

0800138a <LoopForever>:

LoopForever:
    b LoopForever
 800138a:	e7fe      	b.n	800138a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800138c:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8001390:	0800a100 	.word	0x0800a100
	ldr	r0, =_sdata
 8001394:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001398:	20000134 	.word	0x20000134
	ldr	r2, =_sbss
 800139c:	20000134 	.word	0x20000134
	ldr	r3, = _ebss
 80013a0:	200011e8 	.word	0x200011e8

080013a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013a4:	e7fe      	b.n	80013a4 <ADC1_2_IRQHandler>
	...

080013a8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013ac:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <HAL_Init+0x28>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a07      	ldr	r2, [pc, #28]	; (80013d0 <HAL_Init+0x28>)
 80013b2:	f043 0310 	orr.w	r3, r3, #16
 80013b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013b8:	2003      	movs	r0, #3
 80013ba:	f000 ffc1 	bl	8002340 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013be:	2000      	movs	r0, #0
 80013c0:	f000 f808 	bl	80013d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013c4:	f7ff fee0 	bl	8001188 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013c8:	2300      	movs	r3, #0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40022000 	.word	0x40022000

080013d4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013dc:	4b12      	ldr	r3, [pc, #72]	; (8001428 <HAL_InitTick+0x54>)
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	4b12      	ldr	r3, [pc, #72]	; (800142c <HAL_InitTick+0x58>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	4619      	mov	r1, r3
 80013e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80013ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80013f2:	4618      	mov	r0, r3
 80013f4:	f000 ffd9 	bl	80023aa <HAL_SYSTICK_Config>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e00e      	b.n	8001420 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2b0f      	cmp	r3, #15
 8001406:	d80a      	bhi.n	800141e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001408:	2200      	movs	r2, #0
 800140a:	6879      	ldr	r1, [r7, #4]
 800140c:	f04f 30ff 	mov.w	r0, #4294967295
 8001410:	f000 ffa1 	bl	8002356 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001414:	4a06      	ldr	r2, [pc, #24]	; (8001430 <HAL_InitTick+0x5c>)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800141a:	2300      	movs	r3, #0
 800141c:	e000      	b.n	8001420 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
}
 8001420:	4618      	mov	r0, r3
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	20000000 	.word	0x20000000
 800142c:	20000008 	.word	0x20000008
 8001430:	20000004 	.word	0x20000004

08001434 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001438:	4b06      	ldr	r3, [pc, #24]	; (8001454 <HAL_IncTick+0x20>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	461a      	mov	r2, r3
 800143e:	4b06      	ldr	r3, [pc, #24]	; (8001458 <HAL_IncTick+0x24>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4413      	add	r3, r2
 8001444:	4a04      	ldr	r2, [pc, #16]	; (8001458 <HAL_IncTick+0x24>)
 8001446:	6013      	str	r3, [r2, #0]
}
 8001448:	bf00      	nop
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	20000008 	.word	0x20000008
 8001458:	20000650 	.word	0x20000650

0800145c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001460:	4b03      	ldr	r3, [pc, #12]	; (8001470 <HAL_GetTick+0x14>)
 8001462:	681b      	ldr	r3, [r3, #0]
}
 8001464:	4618      	mov	r0, r3
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	20000650 	.word	0x20000650

08001474 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800147c:	f7ff ffee 	bl	800145c <HAL_GetTick>
 8001480:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800148c:	d005      	beq.n	800149a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800148e:	4b09      	ldr	r3, [pc, #36]	; (80014b4 <HAL_Delay+0x40>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	461a      	mov	r2, r3
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	4413      	add	r3, r2
 8001498:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800149a:	bf00      	nop
 800149c:	f7ff ffde 	bl	800145c <HAL_GetTick>
 80014a0:	4602      	mov	r2, r0
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	68fa      	ldr	r2, [r7, #12]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d8f7      	bhi.n	800149c <HAL_Delay+0x28>
  {
  }
}
 80014ac:	bf00      	nop
 80014ae:	3710      	adds	r7, #16
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	20000008 	.word	0x20000008

080014b8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b09a      	sub	sp, #104	; 0x68
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014c0:	2300      	movs	r3, #0
 80014c2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80014c6:	2300      	movs	r3, #0
 80014c8:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80014ca:	2300      	movs	r3, #0
 80014cc:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d101      	bne.n	80014d8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e172      	b.n	80017be <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	691b      	ldr	r3, [r3, #16]
 80014dc:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e2:	f003 0310 	and.w	r3, r3, #16
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d176      	bne.n	80015d8 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d152      	bne.n	8001598 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2200      	movs	r2, #0
 80014f6:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2200      	movs	r2, #0
 80014fc:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2200      	movs	r2, #0
 8001502:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2200      	movs	r2, #0
 8001508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f7fe ff29 	bl	8000364 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800151c:	2b00      	cmp	r3, #0
 800151e:	d13b      	bne.n	8001598 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f000 fce3 	bl	8001eec <ADC_Disable>
 8001526:	4603      	mov	r3, r0
 8001528:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001530:	f003 0310 	and.w	r3, r3, #16
 8001534:	2b00      	cmp	r3, #0
 8001536:	d12f      	bne.n	8001598 <HAL_ADC_Init+0xe0>
 8001538:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800153c:	2b00      	cmp	r3, #0
 800153e:	d12b      	bne.n	8001598 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001544:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001548:	f023 0302 	bic.w	r3, r3, #2
 800154c:	f043 0202 	orr.w	r2, r3, #2
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	689a      	ldr	r2, [r3, #8]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001562:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	689a      	ldr	r2, [r3, #8]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001572:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001574:	4b94      	ldr	r3, [pc, #592]	; (80017c8 <HAL_ADC_Init+0x310>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a94      	ldr	r2, [pc, #592]	; (80017cc <HAL_ADC_Init+0x314>)
 800157a:	fba2 2303 	umull	r2, r3, r2, r3
 800157e:	0c9a      	lsrs	r2, r3, #18
 8001580:	4613      	mov	r3, r2
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	4413      	add	r3, r2
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800158a:	e002      	b.n	8001592 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	3b01      	subs	r3, #1
 8001590:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d1f9      	bne.n	800158c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d007      	beq.n	80015b6 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80015b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80015b4:	d110      	bne.n	80015d8 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ba:	f023 0312 	bic.w	r3, r3, #18
 80015be:	f043 0210 	orr.w	r2, r3, #16
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ca:	f043 0201 	orr.w	r2, r3, #1
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015dc:	f003 0310 	and.w	r3, r3, #16
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	f040 80df 	bne.w	80017a4 <HAL_ADC_Init+0x2ec>
 80015e6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	f040 80da 	bne.w	80017a4 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	f040 80d2 	bne.w	80017a4 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001604:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001608:	f043 0202 	orr.w	r2, r3, #2
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001610:	4b6f      	ldr	r3, [pc, #444]	; (80017d0 <HAL_ADC_Init+0x318>)
 8001612:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800161c:	d102      	bne.n	8001624 <HAL_ADC_Init+0x16c>
 800161e:	4b6d      	ldr	r3, [pc, #436]	; (80017d4 <HAL_ADC_Init+0x31c>)
 8001620:	60fb      	str	r3, [r7, #12]
 8001622:	e002      	b.n	800162a <HAL_ADC_Init+0x172>
 8001624:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001628:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	f003 0303 	and.w	r3, r3, #3
 8001634:	2b01      	cmp	r3, #1
 8001636:	d108      	bne.n	800164a <HAL_ADC_Init+0x192>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	2b01      	cmp	r3, #1
 8001644:	d101      	bne.n	800164a <HAL_ADC_Init+0x192>
 8001646:	2301      	movs	r3, #1
 8001648:	e000      	b.n	800164c <HAL_ADC_Init+0x194>
 800164a:	2300      	movs	r3, #0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d11c      	bne.n	800168a <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001650:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001652:	2b00      	cmp	r3, #0
 8001654:	d010      	beq.n	8001678 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	f003 0303 	and.w	r3, r3, #3
 800165e:	2b01      	cmp	r3, #1
 8001660:	d107      	bne.n	8001672 <HAL_ADC_Init+0x1ba>
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	2b01      	cmp	r3, #1
 800166c:	d101      	bne.n	8001672 <HAL_ADC_Init+0x1ba>
 800166e:	2301      	movs	r3, #1
 8001670:	e000      	b.n	8001674 <HAL_ADC_Init+0x1bc>
 8001672:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001674:	2b00      	cmp	r3, #0
 8001676:	d108      	bne.n	800168a <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001678:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	431a      	orrs	r2, r3
 8001686:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001688:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	7e5b      	ldrb	r3, [r3, #25]
 800168e:	035b      	lsls	r3, r3, #13
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001694:	2a01      	cmp	r2, #1
 8001696:	d002      	beq.n	800169e <HAL_ADC_Init+0x1e6>
 8001698:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800169c:	e000      	b.n	80016a0 <HAL_ADC_Init+0x1e8>
 800169e:	2200      	movs	r2, #0
 80016a0:	431a      	orrs	r2, r3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	68db      	ldr	r3, [r3, #12]
 80016a6:	431a      	orrs	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80016b0:	4313      	orrs	r3, r2
 80016b2:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d11b      	bne.n	80016f6 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	7e5b      	ldrb	r3, [r3, #25]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d109      	bne.n	80016da <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ca:	3b01      	subs	r3, #1
 80016cc:	045a      	lsls	r2, r3, #17
 80016ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80016d0:	4313      	orrs	r3, r2
 80016d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016d6:	663b      	str	r3, [r7, #96]	; 0x60
 80016d8:	e00d      	b.n	80016f6 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016de:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80016e2:	f043 0220 	orr.w	r2, r3, #32
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ee:	f043 0201 	orr.w	r2, r3, #1
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d007      	beq.n	800170e <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001706:	4313      	orrs	r3, r2
 8001708:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800170a:	4313      	orrs	r3, r2
 800170c:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f003 030c 	and.w	r3, r3, #12
 8001718:	2b00      	cmp	r3, #0
 800171a:	d114      	bne.n	8001746 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	68db      	ldr	r3, [r3, #12]
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	6812      	ldr	r2, [r2, #0]
 8001726:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800172a:	f023 0302 	bic.w	r3, r3, #2
 800172e:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	7e1b      	ldrb	r3, [r3, #24]
 8001734:	039a      	lsls	r2, r3, #14
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	4313      	orrs	r3, r2
 8001740:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001742:	4313      	orrs	r3, r2
 8001744:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	68da      	ldr	r2, [r3, #12]
 800174c:	4b22      	ldr	r3, [pc, #136]	; (80017d8 <HAL_ADC_Init+0x320>)
 800174e:	4013      	ands	r3, r2
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	6812      	ldr	r2, [r2, #0]
 8001754:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001756:	430b      	orrs	r3, r1
 8001758:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	691b      	ldr	r3, [r3, #16]
 800175e:	2b01      	cmp	r3, #1
 8001760:	d10c      	bne.n	800177c <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001768:	f023 010f 	bic.w	r1, r3, #15
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	69db      	ldr	r3, [r3, #28]
 8001770:	1e5a      	subs	r2, r3, #1
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	430a      	orrs	r2, r1
 8001778:	631a      	str	r2, [r3, #48]	; 0x30
 800177a:	e007      	b.n	800178c <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f022 020f 	bic.w	r2, r2, #15
 800178a:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2200      	movs	r2, #0
 8001790:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001796:	f023 0303 	bic.w	r3, r3, #3
 800179a:	f043 0201 	orr.w	r2, r3, #1
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	641a      	str	r2, [r3, #64]	; 0x40
 80017a2:	e00a      	b.n	80017ba <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a8:	f023 0312 	bic.w	r3, r3, #18
 80017ac:	f043 0210 	orr.w	r2, r3, #16
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80017b4:	2301      	movs	r3, #1
 80017b6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80017ba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3768      	adds	r7, #104	; 0x68
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20000000 	.word	0x20000000
 80017cc:	431bde83 	.word	0x431bde83
 80017d0:	50000300 	.word	0x50000300
 80017d4:	50000100 	.word	0x50000100
 80017d8:	fff0c007 	.word	0xfff0c007

080017dc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80017dc:	b480      	push	{r7}
 80017de:	b09b      	sub	sp, #108	; 0x6c
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017e6:	2300      	movs	r3, #0
 80017e8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80017ec:	2300      	movs	r3, #0
 80017ee:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d101      	bne.n	80017fe <HAL_ADC_ConfigChannel+0x22>
 80017fa:	2302      	movs	r3, #2
 80017fc:	e2a5      	b.n	8001d4a <HAL_ADC_ConfigChannel+0x56e>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2201      	movs	r2, #1
 8001802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	f003 0304 	and.w	r3, r3, #4
 8001810:	2b00      	cmp	r3, #0
 8001812:	f040 8289 	bne.w	8001d28 <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	2b04      	cmp	r3, #4
 800181c:	d81c      	bhi.n	8001858 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	685a      	ldr	r2, [r3, #4]
 8001828:	4613      	mov	r3, r2
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	4413      	add	r3, r2
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	461a      	mov	r2, r3
 8001832:	231f      	movs	r3, #31
 8001834:	4093      	lsls	r3, r2
 8001836:	43db      	mvns	r3, r3
 8001838:	4019      	ands	r1, r3
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	6818      	ldr	r0, [r3, #0]
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685a      	ldr	r2, [r3, #4]
 8001842:	4613      	mov	r3, r2
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	4413      	add	r3, r2
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	fa00 f203 	lsl.w	r2, r0, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	430a      	orrs	r2, r1
 8001854:	631a      	str	r2, [r3, #48]	; 0x30
 8001856:	e063      	b.n	8001920 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	2b09      	cmp	r3, #9
 800185e:	d81e      	bhi.n	800189e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685a      	ldr	r2, [r3, #4]
 800186a:	4613      	mov	r3, r2
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	4413      	add	r3, r2
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	3b1e      	subs	r3, #30
 8001874:	221f      	movs	r2, #31
 8001876:	fa02 f303 	lsl.w	r3, r2, r3
 800187a:	43db      	mvns	r3, r3
 800187c:	4019      	ands	r1, r3
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	6818      	ldr	r0, [r3, #0]
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685a      	ldr	r2, [r3, #4]
 8001886:	4613      	mov	r3, r2
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	4413      	add	r3, r2
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	3b1e      	subs	r3, #30
 8001890:	fa00 f203 	lsl.w	r2, r0, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	430a      	orrs	r2, r1
 800189a:	635a      	str	r2, [r3, #52]	; 0x34
 800189c:	e040      	b.n	8001920 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	2b0e      	cmp	r3, #14
 80018a4:	d81e      	bhi.n	80018e4 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685a      	ldr	r2, [r3, #4]
 80018b0:	4613      	mov	r3, r2
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	4413      	add	r3, r2
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	3b3c      	subs	r3, #60	; 0x3c
 80018ba:	221f      	movs	r2, #31
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	43db      	mvns	r3, r3
 80018c2:	4019      	ands	r1, r3
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	6818      	ldr	r0, [r3, #0]
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685a      	ldr	r2, [r3, #4]
 80018cc:	4613      	mov	r3, r2
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	4413      	add	r3, r2
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	3b3c      	subs	r3, #60	; 0x3c
 80018d6:	fa00 f203 	lsl.w	r2, r0, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	430a      	orrs	r2, r1
 80018e0:	639a      	str	r2, [r3, #56]	; 0x38
 80018e2:	e01d      	b.n	8001920 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685a      	ldr	r2, [r3, #4]
 80018ee:	4613      	mov	r3, r2
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	4413      	add	r3, r2
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	3b5a      	subs	r3, #90	; 0x5a
 80018f8:	221f      	movs	r2, #31
 80018fa:	fa02 f303 	lsl.w	r3, r2, r3
 80018fe:	43db      	mvns	r3, r3
 8001900:	4019      	ands	r1, r3
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	6818      	ldr	r0, [r3, #0]
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685a      	ldr	r2, [r3, #4]
 800190a:	4613      	mov	r3, r2
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	4413      	add	r3, r2
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	3b5a      	subs	r3, #90	; 0x5a
 8001914:	fa00 f203 	lsl.w	r2, r0, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	430a      	orrs	r2, r1
 800191e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	f003 030c 	and.w	r3, r3, #12
 800192a:	2b00      	cmp	r3, #0
 800192c:	f040 80e5 	bne.w	8001afa <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2b09      	cmp	r3, #9
 8001936:	d91c      	bls.n	8001972 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	6999      	ldr	r1, [r3, #24]
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	4613      	mov	r3, r2
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	4413      	add	r3, r2
 8001948:	3b1e      	subs	r3, #30
 800194a:	2207      	movs	r2, #7
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	43db      	mvns	r3, r3
 8001952:	4019      	ands	r1, r3
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	6898      	ldr	r0, [r3, #8]
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	4613      	mov	r3, r2
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	4413      	add	r3, r2
 8001962:	3b1e      	subs	r3, #30
 8001964:	fa00 f203 	lsl.w	r2, r0, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	430a      	orrs	r2, r1
 800196e:	619a      	str	r2, [r3, #24]
 8001970:	e019      	b.n	80019a6 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	6959      	ldr	r1, [r3, #20]
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	4613      	mov	r3, r2
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	4413      	add	r3, r2
 8001982:	2207      	movs	r2, #7
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	43db      	mvns	r3, r3
 800198a:	4019      	ands	r1, r3
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	6898      	ldr	r0, [r3, #8]
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	4613      	mov	r3, r2
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	4413      	add	r3, r2
 800199a:	fa00 f203 	lsl.w	r2, r0, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	430a      	orrs	r2, r1
 80019a4:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	695a      	ldr	r2, [r3, #20]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	08db      	lsrs	r3, r3, #3
 80019b2:	f003 0303 	and.w	r3, r3, #3
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	691b      	ldr	r3, [r3, #16]
 80019c2:	3b01      	subs	r3, #1
 80019c4:	2b03      	cmp	r3, #3
 80019c6:	d84f      	bhi.n	8001a68 <HAL_ADC_ConfigChannel+0x28c>
 80019c8:	a201      	add	r2, pc, #4	; (adr r2, 80019d0 <HAL_ADC_ConfigChannel+0x1f4>)
 80019ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ce:	bf00      	nop
 80019d0:	080019e1 	.word	0x080019e1
 80019d4:	08001a03 	.word	0x08001a03
 80019d8:	08001a25 	.word	0x08001a25
 80019dc:	08001a47 	.word	0x08001a47
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80019e6:	4b9e      	ldr	r3, [pc, #632]	; (8001c60 <HAL_ADC_ConfigChannel+0x484>)
 80019e8:	4013      	ands	r3, r2
 80019ea:	683a      	ldr	r2, [r7, #0]
 80019ec:	6812      	ldr	r2, [r2, #0]
 80019ee:	0691      	lsls	r1, r2, #26
 80019f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80019f2:	430a      	orrs	r2, r1
 80019f4:	431a      	orrs	r2, r3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80019fe:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001a00:	e07e      	b.n	8001b00 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001a08:	4b95      	ldr	r3, [pc, #596]	; (8001c60 <HAL_ADC_ConfigChannel+0x484>)
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	683a      	ldr	r2, [r7, #0]
 8001a0e:	6812      	ldr	r2, [r2, #0]
 8001a10:	0691      	lsls	r1, r2, #26
 8001a12:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001a14:	430a      	orrs	r2, r1
 8001a16:	431a      	orrs	r2, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001a20:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001a22:	e06d      	b.n	8001b00 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001a2a:	4b8d      	ldr	r3, [pc, #564]	; (8001c60 <HAL_ADC_ConfigChannel+0x484>)
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	683a      	ldr	r2, [r7, #0]
 8001a30:	6812      	ldr	r2, [r2, #0]
 8001a32:	0691      	lsls	r1, r2, #26
 8001a34:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001a36:	430a      	orrs	r2, r1
 8001a38:	431a      	orrs	r2, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001a42:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001a44:	e05c      	b.n	8001b00 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001a4c:	4b84      	ldr	r3, [pc, #528]	; (8001c60 <HAL_ADC_ConfigChannel+0x484>)
 8001a4e:	4013      	ands	r3, r2
 8001a50:	683a      	ldr	r2, [r7, #0]
 8001a52:	6812      	ldr	r2, [r2, #0]
 8001a54:	0691      	lsls	r1, r2, #26
 8001a56:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001a58:	430a      	orrs	r2, r1
 8001a5a:	431a      	orrs	r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001a64:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001a66:	e04b      	b.n	8001b00 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a6e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	069b      	lsls	r3, r3, #26
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d107      	bne.n	8001a8c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001a8a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001a92:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	069b      	lsls	r3, r3, #26
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d107      	bne.n	8001ab0 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001aae:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ab6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	069b      	lsls	r3, r3, #26
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d107      	bne.n	8001ad4 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001ad2:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ada:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	069b      	lsls	r3, r3, #26
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d10a      	bne.n	8001afe <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001af6:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001af8:	e001      	b.n	8001afe <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001afa:	bf00      	nop
 8001afc:	e000      	b.n	8001b00 <HAL_ADC_ConfigChannel+0x324>
      break;
 8001afe:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f003 0303 	and.w	r3, r3, #3
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d108      	bne.n	8001b20 <HAL_ADC_ConfigChannel+0x344>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0301 	and.w	r3, r3, #1
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d101      	bne.n	8001b20 <HAL_ADC_ConfigChannel+0x344>
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e000      	b.n	8001b22 <HAL_ADC_ConfigChannel+0x346>
 8001b20:	2300      	movs	r3, #0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	f040 810b 	bne.w	8001d3e <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d00f      	beq.n	8001b50 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	43da      	mvns	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	400a      	ands	r2, r1
 8001b4a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001b4e:	e049      	b.n	8001be4 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	409a      	lsls	r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	430a      	orrs	r2, r1
 8001b66:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2b09      	cmp	r3, #9
 8001b70:	d91c      	bls.n	8001bac <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	6999      	ldr	r1, [r3, #24]
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	4413      	add	r3, r2
 8001b82:	3b1b      	subs	r3, #27
 8001b84:	2207      	movs	r2, #7
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	43db      	mvns	r3, r3
 8001b8c:	4019      	ands	r1, r3
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	6898      	ldr	r0, [r3, #8]
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	4613      	mov	r3, r2
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	4413      	add	r3, r2
 8001b9c:	3b1b      	subs	r3, #27
 8001b9e:	fa00 f203 	lsl.w	r2, r0, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	430a      	orrs	r2, r1
 8001ba8:	619a      	str	r2, [r3, #24]
 8001baa:	e01b      	b.n	8001be4 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	6959      	ldr	r1, [r3, #20]
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	1c5a      	adds	r2, r3, #1
 8001bb8:	4613      	mov	r3, r2
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	4413      	add	r3, r2
 8001bbe:	2207      	movs	r2, #7
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	4019      	ands	r1, r3
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	6898      	ldr	r0, [r3, #8]
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	1c5a      	adds	r2, r3, #1
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	4413      	add	r3, r2
 8001bd8:	fa00 f203 	lsl.w	r2, r0, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	430a      	orrs	r2, r1
 8001be2:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001be4:	4b1f      	ldr	r3, [pc, #124]	; (8001c64 <HAL_ADC_ConfigChannel+0x488>)
 8001be6:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2b10      	cmp	r3, #16
 8001bee:	d105      	bne.n	8001bfc <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001bf0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d015      	beq.n	8001c28 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001c00:	2b11      	cmp	r3, #17
 8001c02:	d105      	bne.n	8001c10 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001c04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d00b      	beq.n	8001c28 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001c14:	2b12      	cmp	r3, #18
 8001c16:	f040 8092 	bne.w	8001d3e <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001c1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	f040 808b 	bne.w	8001d3e <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c30:	d102      	bne.n	8001c38 <HAL_ADC_ConfigChannel+0x45c>
 8001c32:	4b0d      	ldr	r3, [pc, #52]	; (8001c68 <HAL_ADC_ConfigChannel+0x48c>)
 8001c34:	60fb      	str	r3, [r7, #12]
 8001c36:	e002      	b.n	8001c3e <HAL_ADC_ConfigChannel+0x462>
 8001c38:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001c3c:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f003 0303 	and.w	r3, r3, #3
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d10f      	bne.n	8001c6c <HAL_ADC_ConfigChannel+0x490>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d108      	bne.n	8001c6c <HAL_ADC_ConfigChannel+0x490>
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e007      	b.n	8001c6e <HAL_ADC_ConfigChannel+0x492>
 8001c5e:	bf00      	nop
 8001c60:	83fff000 	.word	0x83fff000
 8001c64:	50000300 	.word	0x50000300
 8001c68:	50000100 	.word	0x50000100
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d150      	bne.n	8001d14 <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001c72:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d010      	beq.n	8001c9a <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f003 0303 	and.w	r3, r3, #3
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d107      	bne.n	8001c94 <HAL_ADC_ConfigChannel+0x4b8>
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0301 	and.w	r3, r3, #1
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d101      	bne.n	8001c94 <HAL_ADC_ConfigChannel+0x4b8>
 8001c90:	2301      	movs	r3, #1
 8001c92:	e000      	b.n	8001c96 <HAL_ADC_ConfigChannel+0x4ba>
 8001c94:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d13c      	bne.n	8001d14 <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	2b10      	cmp	r3, #16
 8001ca0:	d11d      	bne.n	8001cde <HAL_ADC_ConfigChannel+0x502>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001caa:	d118      	bne.n	8001cde <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001cac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001cb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cb6:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001cb8:	4b27      	ldr	r3, [pc, #156]	; (8001d58 <HAL_ADC_ConfigChannel+0x57c>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a27      	ldr	r2, [pc, #156]	; (8001d5c <HAL_ADC_ConfigChannel+0x580>)
 8001cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001cc2:	0c9a      	lsrs	r2, r3, #18
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	4413      	add	r3, r2
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001cce:	e002      	b.n	8001cd6 <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d1f9      	bne.n	8001cd0 <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001cdc:	e02e      	b.n	8001d3c <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2b11      	cmp	r3, #17
 8001ce4:	d10b      	bne.n	8001cfe <HAL_ADC_ConfigChannel+0x522>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cee:	d106      	bne.n	8001cfe <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001cf0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001cf8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cfa:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001cfc:	e01e      	b.n	8001d3c <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2b12      	cmp	r3, #18
 8001d04:	d11a      	bne.n	8001d3c <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001d06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001d0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d10:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001d12:	e013      	b.n	8001d3c <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d18:	f043 0220 	orr.w	r2, r3, #32
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001d26:	e00a      	b.n	8001d3e <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2c:	f043 0220 	orr.w	r2, r3, #32
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001d3a:	e000      	b.n	8001d3e <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001d3c:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001d46:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	376c      	adds	r7, #108	; 0x6c
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	20000000 	.word	0x20000000
 8001d5c:	431bde83 	.word	0x431bde83

08001d60 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b099      	sub	sp, #100	; 0x64
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d78:	d102      	bne.n	8001d80 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001d7a:	4b5a      	ldr	r3, [pc, #360]	; (8001ee4 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8001d7c:	60bb      	str	r3, [r7, #8]
 8001d7e:	e002      	b.n	8001d86 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8001d80:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001d84:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d101      	bne.n	8001d90 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e0a2      	b.n	8001ed6 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d101      	bne.n	8001d9e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	e09b      	b.n	8001ed6 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2201      	movs	r2, #1
 8001da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f003 0304 	and.w	r3, r3, #4
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d17f      	bne.n	8001eb4 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f003 0304 	and.w	r3, r3, #4
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d179      	bne.n	8001eb4 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001dc0:	4b49      	ldr	r3, [pc, #292]	; (8001ee8 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8001dc2:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d040      	beq.n	8001e4e <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001dcc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	6859      	ldr	r1, [r3, #4]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001dde:	035b      	lsls	r3, r3, #13
 8001de0:	430b      	orrs	r3, r1
 8001de2:	431a      	orrs	r2, r3
 8001de4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001de6:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f003 0303 	and.w	r3, r3, #3
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d108      	bne.n	8001e08 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0301 	and.w	r3, r3, #1
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d101      	bne.n	8001e08 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001e04:	2301      	movs	r3, #1
 8001e06:	e000      	b.n	8001e0a <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8001e08:	2300      	movs	r3, #0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d15c      	bne.n	8001ec8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f003 0303 	and.w	r3, r3, #3
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d107      	bne.n	8001e2a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d101      	bne.n	8001e2a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001e26:	2301      	movs	r3, #1
 8001e28:	e000      	b.n	8001e2c <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8001e2a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d14b      	bne.n	8001ec8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001e30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001e38:	f023 030f 	bic.w	r3, r3, #15
 8001e3c:	683a      	ldr	r2, [r7, #0]
 8001e3e:	6811      	ldr	r1, [r2, #0]
 8001e40:	683a      	ldr	r2, [r7, #0]
 8001e42:	6892      	ldr	r2, [r2, #8]
 8001e44:	430a      	orrs	r2, r1
 8001e46:	431a      	orrs	r2, r3
 8001e48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e4a:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e4c:	e03c      	b.n	8001ec8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001e4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e58:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f003 0303 	and.w	r3, r3, #3
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d108      	bne.n	8001e7a <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d101      	bne.n	8001e7a <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001e76:	2301      	movs	r3, #1
 8001e78:	e000      	b.n	8001e7c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d123      	bne.n	8001ec8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f003 0303 	and.w	r3, r3, #3
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d107      	bne.n	8001e9c <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0301 	and.w	r3, r3, #1
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d101      	bne.n	8001e9c <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e000      	b.n	8001e9e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8001e9c:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d112      	bne.n	8001ec8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001ea2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001eaa:	f023 030f 	bic.w	r3, r3, #15
 8001eae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001eb0:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001eb2:	e009      	b.n	8001ec8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb8:	f043 0220 	orr.w	r2, r3, #32
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001ec6:	e000      	b.n	8001eca <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001ec8:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001ed2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3764      	adds	r7, #100	; 0x64
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	50000100 	.word	0x50000100
 8001ee8:	50000300 	.word	0x50000300

08001eec <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f003 0303 	and.w	r3, r3, #3
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d108      	bne.n	8001f18 <ADC_Disable+0x2c>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0301 	and.w	r3, r3, #1
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d101      	bne.n	8001f18 <ADC_Disable+0x2c>
 8001f14:	2301      	movs	r3, #1
 8001f16:	e000      	b.n	8001f1a <ADC_Disable+0x2e>
 8001f18:	2300      	movs	r3, #0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d040      	beq.n	8001fa0 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f003 030d 	and.w	r3, r3, #13
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d10f      	bne.n	8001f4c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	689a      	ldr	r2, [r3, #8]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f042 0202 	orr.w	r2, r2, #2
 8001f3a:	609a      	str	r2, [r3, #8]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2203      	movs	r2, #3
 8001f42:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001f44:	f7ff fa8a 	bl	800145c <HAL_GetTick>
 8001f48:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001f4a:	e022      	b.n	8001f92 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f50:	f043 0210 	orr.w	r2, r3, #16
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5c:	f043 0201 	orr.w	r2, r3, #1
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e01c      	b.n	8001fa2 <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001f68:	f7ff fa78 	bl	800145c <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d90d      	bls.n	8001f92 <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7a:	f043 0210 	orr.w	r2, r3, #16
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f86:	f043 0201 	orr.w	r2, r3, #1
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e007      	b.n	8001fa2 <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	f003 0301 	and.w	r3, r3, #1
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d0e3      	beq.n	8001f68 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b084      	sub	sp, #16
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d101      	bne.n	8001fbc <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e0ed      	b.n	8002198 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d102      	bne.n	8001fce <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f7fe fb23 	bl	8000614 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f022 0202 	bic.w	r2, r2, #2
 8001fdc:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001fde:	f7ff fa3d 	bl	800145c <HAL_GetTick>
 8001fe2:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001fe4:	e012      	b.n	800200c <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001fe6:	f7ff fa39 	bl	800145c <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b0a      	cmp	r3, #10
 8001ff2:	d90b      	bls.n	800200c <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2205      	movs	r2, #5
 8002004:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e0c5      	b.n	8002198 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f003 0302 	and.w	r3, r3, #2
 8002016:	2b00      	cmp	r3, #0
 8002018:	d1e5      	bne.n	8001fe6 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f042 0201 	orr.w	r2, r2, #1
 8002028:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800202a:	f7ff fa17 	bl	800145c <HAL_GetTick>
 800202e:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002030:	e012      	b.n	8002058 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002032:	f7ff fa13 	bl	800145c <HAL_GetTick>
 8002036:	4602      	mov	r2, r0
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	2b0a      	cmp	r3, #10
 800203e:	d90b      	bls.n	8002058 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002044:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2205      	movs	r2, #5
 8002050:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e09f      	b.n	8002198 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	2b00      	cmp	r3, #0
 8002064:	d0e5      	beq.n	8002032 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	7e1b      	ldrb	r3, [r3, #24]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d108      	bne.n	8002080 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800207c:	601a      	str	r2, [r3, #0]
 800207e:	e007      	b.n	8002090 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800208e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	7e5b      	ldrb	r3, [r3, #25]
 8002094:	2b01      	cmp	r3, #1
 8002096:	d108      	bne.n	80020aa <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	e007      	b.n	80020ba <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	7e9b      	ldrb	r3, [r3, #26]
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d108      	bne.n	80020d4 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f042 0220 	orr.w	r2, r2, #32
 80020d0:	601a      	str	r2, [r3, #0]
 80020d2:	e007      	b.n	80020e4 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f022 0220 	bic.w	r2, r2, #32
 80020e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	7edb      	ldrb	r3, [r3, #27]
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d108      	bne.n	80020fe <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f022 0210 	bic.w	r2, r2, #16
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	e007      	b.n	800210e <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f042 0210 	orr.w	r2, r2, #16
 800210c:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	7f1b      	ldrb	r3, [r3, #28]
 8002112:	2b01      	cmp	r3, #1
 8002114:	d108      	bne.n	8002128 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f042 0208 	orr.w	r2, r2, #8
 8002124:	601a      	str	r2, [r3, #0]
 8002126:	e007      	b.n	8002138 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f022 0208 	bic.w	r2, r2, #8
 8002136:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	7f5b      	ldrb	r3, [r3, #29]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d108      	bne.n	8002152 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f042 0204 	orr.w	r2, r2, #4
 800214e:	601a      	str	r2, [r3, #0]
 8002150:	e007      	b.n	8002162 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f022 0204 	bic.w	r2, r2, #4
 8002160:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	689a      	ldr	r2, [r3, #8]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	431a      	orrs	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	691b      	ldr	r3, [r3, #16]
 8002170:	431a      	orrs	r2, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	695b      	ldr	r3, [r3, #20]
 8002176:	ea42 0103 	orr.w	r1, r2, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	1e5a      	subs	r2, r3, #1
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	430a      	orrs	r2, r1
 8002186:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2201      	movs	r2, #1
 8002192:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002196:	2300      	movs	r3, #0
}
 8002198:	4618      	mov	r0, r3
 800219a:	3710      	adds	r7, #16
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f003 0307 	and.w	r3, r3, #7
 80021ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021b0:	4b0c      	ldr	r3, [pc, #48]	; (80021e4 <__NVIC_SetPriorityGrouping+0x44>)
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021b6:	68ba      	ldr	r2, [r7, #8]
 80021b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021bc:	4013      	ands	r3, r2
 80021be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021d2:	4a04      	ldr	r2, [pc, #16]	; (80021e4 <__NVIC_SetPriorityGrouping+0x44>)
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	60d3      	str	r3, [r2, #12]
}
 80021d8:	bf00      	nop
 80021da:	3714      	adds	r7, #20
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr
 80021e4:	e000ed00 	.word	0xe000ed00

080021e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021ec:	4b04      	ldr	r3, [pc, #16]	; (8002200 <__NVIC_GetPriorityGrouping+0x18>)
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	0a1b      	lsrs	r3, r3, #8
 80021f2:	f003 0307 	and.w	r3, r3, #7
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr
 8002200:	e000ed00 	.word	0xe000ed00

08002204 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	4603      	mov	r3, r0
 800220c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800220e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002212:	2b00      	cmp	r3, #0
 8002214:	db0b      	blt.n	800222e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002216:	79fb      	ldrb	r3, [r7, #7]
 8002218:	f003 021f 	and.w	r2, r3, #31
 800221c:	4907      	ldr	r1, [pc, #28]	; (800223c <__NVIC_EnableIRQ+0x38>)
 800221e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002222:	095b      	lsrs	r3, r3, #5
 8002224:	2001      	movs	r0, #1
 8002226:	fa00 f202 	lsl.w	r2, r0, r2
 800222a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800222e:	bf00      	nop
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	e000e100 	.word	0xe000e100

08002240 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	4603      	mov	r3, r0
 8002248:	6039      	str	r1, [r7, #0]
 800224a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800224c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002250:	2b00      	cmp	r3, #0
 8002252:	db0a      	blt.n	800226a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	b2da      	uxtb	r2, r3
 8002258:	490c      	ldr	r1, [pc, #48]	; (800228c <__NVIC_SetPriority+0x4c>)
 800225a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800225e:	0112      	lsls	r2, r2, #4
 8002260:	b2d2      	uxtb	r2, r2
 8002262:	440b      	add	r3, r1
 8002264:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002268:	e00a      	b.n	8002280 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	b2da      	uxtb	r2, r3
 800226e:	4908      	ldr	r1, [pc, #32]	; (8002290 <__NVIC_SetPriority+0x50>)
 8002270:	79fb      	ldrb	r3, [r7, #7]
 8002272:	f003 030f 	and.w	r3, r3, #15
 8002276:	3b04      	subs	r3, #4
 8002278:	0112      	lsls	r2, r2, #4
 800227a:	b2d2      	uxtb	r2, r2
 800227c:	440b      	add	r3, r1
 800227e:	761a      	strb	r2, [r3, #24]
}
 8002280:	bf00      	nop
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr
 800228c:	e000e100 	.word	0xe000e100
 8002290:	e000ed00 	.word	0xe000ed00

08002294 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002294:	b480      	push	{r7}
 8002296:	b089      	sub	sp, #36	; 0x24
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f003 0307 	and.w	r3, r3, #7
 80022a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	f1c3 0307 	rsb	r3, r3, #7
 80022ae:	2b04      	cmp	r3, #4
 80022b0:	bf28      	it	cs
 80022b2:	2304      	movcs	r3, #4
 80022b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	3304      	adds	r3, #4
 80022ba:	2b06      	cmp	r3, #6
 80022bc:	d902      	bls.n	80022c4 <NVIC_EncodePriority+0x30>
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	3b03      	subs	r3, #3
 80022c2:	e000      	b.n	80022c6 <NVIC_EncodePriority+0x32>
 80022c4:	2300      	movs	r3, #0
 80022c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022c8:	f04f 32ff 	mov.w	r2, #4294967295
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	43da      	mvns	r2, r3
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	401a      	ands	r2, r3
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022dc:	f04f 31ff 	mov.w	r1, #4294967295
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	fa01 f303 	lsl.w	r3, r1, r3
 80022e6:	43d9      	mvns	r1, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022ec:	4313      	orrs	r3, r2
         );
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3724      	adds	r7, #36	; 0x24
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
	...

080022fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	3b01      	subs	r3, #1
 8002308:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800230c:	d301      	bcc.n	8002312 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800230e:	2301      	movs	r3, #1
 8002310:	e00f      	b.n	8002332 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002312:	4a0a      	ldr	r2, [pc, #40]	; (800233c <SysTick_Config+0x40>)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	3b01      	subs	r3, #1
 8002318:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800231a:	210f      	movs	r1, #15
 800231c:	f04f 30ff 	mov.w	r0, #4294967295
 8002320:	f7ff ff8e 	bl	8002240 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002324:	4b05      	ldr	r3, [pc, #20]	; (800233c <SysTick_Config+0x40>)
 8002326:	2200      	movs	r2, #0
 8002328:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800232a:	4b04      	ldr	r3, [pc, #16]	; (800233c <SysTick_Config+0x40>)
 800232c:	2207      	movs	r2, #7
 800232e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	e000e010 	.word	0xe000e010

08002340 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f7ff ff29 	bl	80021a0 <__NVIC_SetPriorityGrouping>
}
 800234e:	bf00      	nop
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b086      	sub	sp, #24
 800235a:	af00      	add	r7, sp, #0
 800235c:	4603      	mov	r3, r0
 800235e:	60b9      	str	r1, [r7, #8]
 8002360:	607a      	str	r2, [r7, #4]
 8002362:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002364:	2300      	movs	r3, #0
 8002366:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002368:	f7ff ff3e 	bl	80021e8 <__NVIC_GetPriorityGrouping>
 800236c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	68b9      	ldr	r1, [r7, #8]
 8002372:	6978      	ldr	r0, [r7, #20]
 8002374:	f7ff ff8e 	bl	8002294 <NVIC_EncodePriority>
 8002378:	4602      	mov	r2, r0
 800237a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800237e:	4611      	mov	r1, r2
 8002380:	4618      	mov	r0, r3
 8002382:	f7ff ff5d 	bl	8002240 <__NVIC_SetPriority>
}
 8002386:	bf00      	nop
 8002388:	3718      	adds	r7, #24
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800238e:	b580      	push	{r7, lr}
 8002390:	b082      	sub	sp, #8
 8002392:	af00      	add	r7, sp, #0
 8002394:	4603      	mov	r3, r0
 8002396:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239c:	4618      	mov	r0, r3
 800239e:	f7ff ff31 	bl	8002204 <__NVIC_EnableIRQ>
}
 80023a2:	bf00      	nop
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b082      	sub	sp, #8
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f7ff ffa2 	bl	80022fc <SysTick_Config>
 80023b8:	4603      	mov	r3, r0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
	...

080023c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b087      	sub	sp, #28
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023ce:	2300      	movs	r3, #0
 80023d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023d2:	e154      	b.n	800267e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	2101      	movs	r1, #1
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	fa01 f303 	lsl.w	r3, r1, r3
 80023e0:	4013      	ands	r3, r2
 80023e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	f000 8146 	beq.w	8002678 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d003      	beq.n	80023fc <HAL_GPIO_Init+0x38>
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	2b12      	cmp	r3, #18
 80023fa:	d123      	bne.n	8002444 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	08da      	lsrs	r2, r3, #3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	3208      	adds	r2, #8
 8002404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002408:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	f003 0307 	and.w	r3, r3, #7
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	220f      	movs	r2, #15
 8002414:	fa02 f303 	lsl.w	r3, r2, r3
 8002418:	43db      	mvns	r3, r3
 800241a:	693a      	ldr	r2, [r7, #16]
 800241c:	4013      	ands	r3, r2
 800241e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	691a      	ldr	r2, [r3, #16]
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	f003 0307 	and.w	r3, r3, #7
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	fa02 f303 	lsl.w	r3, r2, r3
 8002430:	693a      	ldr	r2, [r7, #16]
 8002432:	4313      	orrs	r3, r2
 8002434:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	08da      	lsrs	r2, r3, #3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	3208      	adds	r2, #8
 800243e:	6939      	ldr	r1, [r7, #16]
 8002440:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	005b      	lsls	r3, r3, #1
 800244e:	2203      	movs	r2, #3
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	43db      	mvns	r3, r3
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	4013      	ands	r3, r2
 800245a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f003 0203 	and.w	r2, r3, #3
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	693a      	ldr	r2, [r7, #16]
 800246e:	4313      	orrs	r3, r2
 8002470:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	693a      	ldr	r2, [r7, #16]
 8002476:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	2b01      	cmp	r3, #1
 800247e:	d00b      	beq.n	8002498 <HAL_GPIO_Init+0xd4>
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	2b02      	cmp	r3, #2
 8002486:	d007      	beq.n	8002498 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800248c:	2b11      	cmp	r3, #17
 800248e:	d003      	beq.n	8002498 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	2b12      	cmp	r3, #18
 8002496:	d130      	bne.n	80024fa <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	2203      	movs	r2, #3
 80024a4:	fa02 f303 	lsl.w	r3, r2, r3
 80024a8:	43db      	mvns	r3, r3
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	4013      	ands	r3, r2
 80024ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	68da      	ldr	r2, [r3, #12]
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	4313      	orrs	r3, r2
 80024c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	693a      	ldr	r2, [r7, #16]
 80024c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024ce:	2201      	movs	r2, #1
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	fa02 f303 	lsl.w	r3, r2, r3
 80024d6:	43db      	mvns	r3, r3
 80024d8:	693a      	ldr	r2, [r7, #16]
 80024da:	4013      	ands	r3, r2
 80024dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	091b      	lsrs	r3, r3, #4
 80024e4:	f003 0201 	and.w	r2, r3, #1
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	fa02 f303 	lsl.w	r3, r2, r3
 80024ee:	693a      	ldr	r2, [r7, #16]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	693a      	ldr	r2, [r7, #16]
 80024f8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	005b      	lsls	r3, r3, #1
 8002504:	2203      	movs	r2, #3
 8002506:	fa02 f303 	lsl.w	r3, r2, r3
 800250a:	43db      	mvns	r3, r3
 800250c:	693a      	ldr	r2, [r7, #16]
 800250e:	4013      	ands	r3, r2
 8002510:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	689a      	ldr	r2, [r3, #8]
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	fa02 f303 	lsl.w	r3, r2, r3
 800251e:	693a      	ldr	r2, [r7, #16]
 8002520:	4313      	orrs	r3, r2
 8002522:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	693a      	ldr	r2, [r7, #16]
 8002528:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002532:	2b00      	cmp	r3, #0
 8002534:	f000 80a0 	beq.w	8002678 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002538:	4b58      	ldr	r3, [pc, #352]	; (800269c <HAL_GPIO_Init+0x2d8>)
 800253a:	699b      	ldr	r3, [r3, #24]
 800253c:	4a57      	ldr	r2, [pc, #348]	; (800269c <HAL_GPIO_Init+0x2d8>)
 800253e:	f043 0301 	orr.w	r3, r3, #1
 8002542:	6193      	str	r3, [r2, #24]
 8002544:	4b55      	ldr	r3, [pc, #340]	; (800269c <HAL_GPIO_Init+0x2d8>)
 8002546:	699b      	ldr	r3, [r3, #24]
 8002548:	f003 0301 	and.w	r3, r3, #1
 800254c:	60bb      	str	r3, [r7, #8]
 800254e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002550:	4a53      	ldr	r2, [pc, #332]	; (80026a0 <HAL_GPIO_Init+0x2dc>)
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	089b      	lsrs	r3, r3, #2
 8002556:	3302      	adds	r3, #2
 8002558:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800255c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	f003 0303 	and.w	r3, r3, #3
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	220f      	movs	r2, #15
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	43db      	mvns	r3, r3
 800256e:	693a      	ldr	r2, [r7, #16]
 8002570:	4013      	ands	r3, r2
 8002572:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800257a:	d019      	beq.n	80025b0 <HAL_GPIO_Init+0x1ec>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	4a49      	ldr	r2, [pc, #292]	; (80026a4 <HAL_GPIO_Init+0x2e0>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d013      	beq.n	80025ac <HAL_GPIO_Init+0x1e8>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	4a48      	ldr	r2, [pc, #288]	; (80026a8 <HAL_GPIO_Init+0x2e4>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d00d      	beq.n	80025a8 <HAL_GPIO_Init+0x1e4>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	4a47      	ldr	r2, [pc, #284]	; (80026ac <HAL_GPIO_Init+0x2e8>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d007      	beq.n	80025a4 <HAL_GPIO_Init+0x1e0>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	4a46      	ldr	r2, [pc, #280]	; (80026b0 <HAL_GPIO_Init+0x2ec>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d101      	bne.n	80025a0 <HAL_GPIO_Init+0x1dc>
 800259c:	2304      	movs	r3, #4
 800259e:	e008      	b.n	80025b2 <HAL_GPIO_Init+0x1ee>
 80025a0:	2305      	movs	r3, #5
 80025a2:	e006      	b.n	80025b2 <HAL_GPIO_Init+0x1ee>
 80025a4:	2303      	movs	r3, #3
 80025a6:	e004      	b.n	80025b2 <HAL_GPIO_Init+0x1ee>
 80025a8:	2302      	movs	r3, #2
 80025aa:	e002      	b.n	80025b2 <HAL_GPIO_Init+0x1ee>
 80025ac:	2301      	movs	r3, #1
 80025ae:	e000      	b.n	80025b2 <HAL_GPIO_Init+0x1ee>
 80025b0:	2300      	movs	r3, #0
 80025b2:	697a      	ldr	r2, [r7, #20]
 80025b4:	f002 0203 	and.w	r2, r2, #3
 80025b8:	0092      	lsls	r2, r2, #2
 80025ba:	4093      	lsls	r3, r2
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	4313      	orrs	r3, r2
 80025c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80025c2:	4937      	ldr	r1, [pc, #220]	; (80026a0 <HAL_GPIO_Init+0x2dc>)
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	089b      	lsrs	r3, r3, #2
 80025c8:	3302      	adds	r3, #2
 80025ca:	693a      	ldr	r2, [r7, #16]
 80025cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025d0:	4b38      	ldr	r3, [pc, #224]	; (80026b4 <HAL_GPIO_Init+0x2f0>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	43db      	mvns	r3, r3
 80025da:	693a      	ldr	r2, [r7, #16]
 80025dc:	4013      	ands	r3, r2
 80025de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d003      	beq.n	80025f4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80025ec:	693a      	ldr	r2, [r7, #16]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80025f4:	4a2f      	ldr	r2, [pc, #188]	; (80026b4 <HAL_GPIO_Init+0x2f0>)
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80025fa:	4b2e      	ldr	r3, [pc, #184]	; (80026b4 <HAL_GPIO_Init+0x2f0>)
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	43db      	mvns	r3, r3
 8002604:	693a      	ldr	r2, [r7, #16]
 8002606:	4013      	ands	r3, r2
 8002608:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d003      	beq.n	800261e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002616:	693a      	ldr	r2, [r7, #16]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	4313      	orrs	r3, r2
 800261c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800261e:	4a25      	ldr	r2, [pc, #148]	; (80026b4 <HAL_GPIO_Init+0x2f0>)
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002624:	4b23      	ldr	r3, [pc, #140]	; (80026b4 <HAL_GPIO_Init+0x2f0>)
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	43db      	mvns	r3, r3
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	4013      	ands	r3, r2
 8002632:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d003      	beq.n	8002648 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002640:	693a      	ldr	r2, [r7, #16]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	4313      	orrs	r3, r2
 8002646:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002648:	4a1a      	ldr	r2, [pc, #104]	; (80026b4 <HAL_GPIO_Init+0x2f0>)
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800264e:	4b19      	ldr	r3, [pc, #100]	; (80026b4 <HAL_GPIO_Init+0x2f0>)
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	43db      	mvns	r3, r3
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	4013      	ands	r3, r2
 800265c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d003      	beq.n	8002672 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	4313      	orrs	r3, r2
 8002670:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002672:	4a10      	ldr	r2, [pc, #64]	; (80026b4 <HAL_GPIO_Init+0x2f0>)
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	3301      	adds	r3, #1
 800267c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	fa22 f303 	lsr.w	r3, r2, r3
 8002688:	2b00      	cmp	r3, #0
 800268a:	f47f aea3 	bne.w	80023d4 <HAL_GPIO_Init+0x10>
  }
}
 800268e:	bf00      	nop
 8002690:	371c      	adds	r7, #28
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	40021000 	.word	0x40021000
 80026a0:	40010000 	.word	0x40010000
 80026a4:	48000400 	.word	0x48000400
 80026a8:	48000800 	.word	0x48000800
 80026ac:	48000c00 	.word	0x48000c00
 80026b0:	48001000 	.word	0x48001000
 80026b4:	40010400 	.word	0x40010400

080026b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	460b      	mov	r3, r1
 80026c2:	807b      	strh	r3, [r7, #2]
 80026c4:	4613      	mov	r3, r2
 80026c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026c8:	787b      	ldrb	r3, [r7, #1]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d003      	beq.n	80026d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80026ce:	887a      	ldrh	r2, [r7, #2]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80026d4:	e002      	b.n	80026dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80026d6:	887a      	ldrh	r2, [r7, #2]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80026dc:	bf00      	nop
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d101      	bne.n	80026fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e081      	b.n	80027fe <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002700:	b2db      	uxtb	r3, r3
 8002702:	2b00      	cmp	r3, #0
 8002704:	d106      	bne.n	8002714 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f7fe f8f0 	bl	80008f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2224      	movs	r2, #36	; 0x24
 8002718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f022 0201 	bic.w	r2, r2, #1
 800272a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685a      	ldr	r2, [r3, #4]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002738:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	689a      	ldr	r2, [r3, #8]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002748:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	2b01      	cmp	r3, #1
 8002750:	d107      	bne.n	8002762 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	689a      	ldr	r2, [r3, #8]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800275e:	609a      	str	r2, [r3, #8]
 8002760:	e006      	b.n	8002770 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	689a      	ldr	r2, [r3, #8]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800276e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	2b02      	cmp	r3, #2
 8002776:	d104      	bne.n	8002782 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002780:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	6812      	ldr	r2, [r2, #0]
 800278c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002790:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002794:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	68da      	ldr	r2, [r3, #12]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027a4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	691a      	ldr	r2, [r3, #16]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	ea42 0103 	orr.w	r1, r2, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	699b      	ldr	r3, [r3, #24]
 80027b6:	021a      	lsls	r2, r3, #8
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	430a      	orrs	r2, r1
 80027be:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	69d9      	ldr	r1, [r3, #28]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6a1a      	ldr	r2, [r3, #32]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	430a      	orrs	r2, r1
 80027ce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f042 0201 	orr.w	r2, r2, #1
 80027de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2220      	movs	r2, #32
 80027ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002806:	b480      	push	{r7}
 8002808:	b083      	sub	sp, #12
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
 800280e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002816:	b2db      	uxtb	r3, r3
 8002818:	2b20      	cmp	r3, #32
 800281a:	d138      	bne.n	800288e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002822:	2b01      	cmp	r3, #1
 8002824:	d101      	bne.n	800282a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002826:	2302      	movs	r3, #2
 8002828:	e032      	b.n	8002890 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2201      	movs	r2, #1
 800282e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2224      	movs	r2, #36	; 0x24
 8002836:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f022 0201 	bic.w	r2, r2, #1
 8002848:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002858:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	6819      	ldr	r1, [r3, #0]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	683a      	ldr	r2, [r7, #0]
 8002866:	430a      	orrs	r2, r1
 8002868:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f042 0201 	orr.w	r2, r2, #1
 8002878:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2220      	movs	r2, #32
 800287e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800288a:	2300      	movs	r3, #0
 800288c:	e000      	b.n	8002890 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800288e:	2302      	movs	r3, #2
  }
}
 8002890:	4618      	mov	r0, r3
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800289c:	b480      	push	{r7}
 800289e:	b085      	sub	sp, #20
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	2b20      	cmp	r3, #32
 80028b0:	d139      	bne.n	8002926 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d101      	bne.n	80028c0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80028bc:	2302      	movs	r3, #2
 80028be:	e033      	b.n	8002928 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2224      	movs	r2, #36	; 0x24
 80028cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f022 0201 	bic.w	r2, r2, #1
 80028de:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80028ee:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	021b      	lsls	r3, r3, #8
 80028f4:	68fa      	ldr	r2, [r7, #12]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f042 0201 	orr.w	r2, r2, #1
 8002910:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2220      	movs	r2, #32
 8002916:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002922:	2300      	movs	r3, #0
 8002924:	e000      	b.n	8002928 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002926:	2302      	movs	r3, #2
  }
}
 8002928:	4618      	mov	r0, r3
 800292a:	3714      	adds	r7, #20
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002934:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002936:	b08b      	sub	sp, #44	; 0x2c
 8002938:	af06      	add	r7, sp, #24
 800293a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d101      	bne.n	8002946 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e0a6      	b.n	8002a94 <HAL_PCD_Init+0x160>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 800294c:	b2db      	uxtb	r3, r3
 800294e:	2b00      	cmp	r3, #0
 8002950:	d106      	bne.n	8002960 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f007 f852 	bl	8009a04 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2203      	movs	r2, #3
 8002964:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4618      	mov	r0, r3
 800296e:	f003 f9f7 	bl	8005d60 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002972:	2300      	movs	r3, #0
 8002974:	73fb      	strb	r3, [r7, #15]
 8002976:	e035      	b.n	80029e4 <HAL_PCD_Init+0xb0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002978:	7bfb      	ldrb	r3, [r7, #15]
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	015b      	lsls	r3, r3, #5
 800297e:	4413      	add	r3, r2
 8002980:	3329      	adds	r3, #41	; 0x29
 8002982:	2201      	movs	r2, #1
 8002984:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002986:	7bfb      	ldrb	r3, [r7, #15]
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	015b      	lsls	r3, r3, #5
 800298c:	4413      	add	r3, r2
 800298e:	3328      	adds	r3, #40	; 0x28
 8002990:	7bfa      	ldrb	r2, [r7, #15]
 8002992:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002994:	7bfb      	ldrb	r3, [r7, #15]
 8002996:	7bfa      	ldrb	r2, [r7, #15]
 8002998:	b291      	uxth	r1, r2
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	015b      	lsls	r3, r3, #5
 800299e:	4413      	add	r3, r2
 80029a0:	3336      	adds	r3, #54	; 0x36
 80029a2:	460a      	mov	r2, r1
 80029a4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80029a6:	7bfb      	ldrb	r3, [r7, #15]
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	015b      	lsls	r3, r3, #5
 80029ac:	4413      	add	r3, r2
 80029ae:	332b      	adds	r3, #43	; 0x2b
 80029b0:	2200      	movs	r2, #0
 80029b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80029b4:	7bfb      	ldrb	r3, [r7, #15]
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	015b      	lsls	r3, r3, #5
 80029ba:	4413      	add	r3, r2
 80029bc:	3338      	adds	r3, #56	; 0x38
 80029be:	2200      	movs	r2, #0
 80029c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80029c2:	7bfb      	ldrb	r3, [r7, #15]
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	015b      	lsls	r3, r3, #5
 80029c8:	4413      	add	r3, r2
 80029ca:	333c      	adds	r3, #60	; 0x3c
 80029cc:	2200      	movs	r2, #0
 80029ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80029d0:	7bfb      	ldrb	r3, [r7, #15]
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	3302      	adds	r3, #2
 80029d6:	015b      	lsls	r3, r3, #5
 80029d8:	4413      	add	r3, r2
 80029da:	2200      	movs	r2, #0
 80029dc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029de:	7bfb      	ldrb	r3, [r7, #15]
 80029e0:	3301      	adds	r3, #1
 80029e2:	73fb      	strb	r3, [r7, #15]
 80029e4:	7bfa      	ldrb	r2, [r7, #15]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d3c4      	bcc.n	8002978 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029ee:	2300      	movs	r3, #0
 80029f0:	73fb      	strb	r3, [r7, #15]
 80029f2:	e031      	b.n	8002a58 <HAL_PCD_Init+0x124>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80029f4:	7bfb      	ldrb	r3, [r7, #15]
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	015b      	lsls	r3, r3, #5
 80029fa:	4413      	add	r3, r2
 80029fc:	f203 1329 	addw	r3, r3, #297	; 0x129
 8002a00:	2200      	movs	r2, #0
 8002a02:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a04:	7bfb      	ldrb	r3, [r7, #15]
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	015b      	lsls	r3, r3, #5
 8002a0a:	4413      	add	r3, r2
 8002a0c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002a10:	7bfa      	ldrb	r2, [r7, #15]
 8002a12:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a14:	7bfb      	ldrb	r3, [r7, #15]
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	015b      	lsls	r3, r3, #5
 8002a1a:	4413      	add	r3, r2
 8002a1c:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8002a20:	2200      	movs	r2, #0
 8002a22:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a24:	7bfb      	ldrb	r3, [r7, #15]
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	015b      	lsls	r3, r3, #5
 8002a2a:	4413      	add	r3, r2
 8002a2c:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8002a30:	2200      	movs	r2, #0
 8002a32:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a34:	7bfb      	ldrb	r3, [r7, #15]
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	015b      	lsls	r3, r3, #5
 8002a3a:	4413      	add	r3, r2
 8002a3c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a44:	7bfb      	ldrb	r3, [r7, #15]
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	330a      	adds	r3, #10
 8002a4a:	015b      	lsls	r3, r3, #5
 8002a4c:	4413      	add	r3, r2
 8002a4e:	2200      	movs	r2, #0
 8002a50:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a52:	7bfb      	ldrb	r3, [r7, #15]
 8002a54:	3301      	adds	r3, #1
 8002a56:	73fb      	strb	r3, [r7, #15]
 8002a58:	7bfa      	ldrb	r2, [r7, #15]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d3c8      	bcc.n	80029f4 <HAL_PCD_Init+0xc0>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	603b      	str	r3, [r7, #0]
 8002a68:	687e      	ldr	r6, [r7, #4]
 8002a6a:	466d      	mov	r5, sp
 8002a6c:	f106 0410 	add.w	r4, r6, #16
 8002a70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a74:	6823      	ldr	r3, [r4, #0]
 8002a76:	602b      	str	r3, [r5, #0]
 8002a78:	1d33      	adds	r3, r6, #4
 8002a7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a7c:	6838      	ldr	r0, [r7, #0]
 8002a7e:	f003 f98c 	bl	8005d9a <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  return HAL_OK;
 8002a92:	2300      	movs	r3, #0
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3714      	adds	r7, #20
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a9c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d101      	bne.n	8002ab2 <HAL_PCD_Start+0x16>
 8002aae:	2302      	movs	r3, #2
 8002ab0:	e016      	b.n	8002ae0 <HAL_PCD_Start+0x44>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002aba:	2101      	movs	r1, #1
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f007 fa4f 	bl	8009f60 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f004 f9d2 	bl	8006e70 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f003 f92d 	bl	8005d30 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3708      	adds	r7, #8
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4618      	mov	r0, r3
 8002af6:	f004 f9c6 	bl	8006e86 <USB_ReadInterrupts>
 8002afa:	4603      	mov	r3, r0
 8002afc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b04:	d102      	bne.n	8002b0c <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f000 faf4 	bl	80030f4 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4618      	mov	r0, r3
 8002b12:	f004 f9b8 	bl	8006e86 <USB_ReadInterrupts>
 8002b16:	4603      	mov	r3, r0
 8002b18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b20:	d112      	bne.n	8002b48 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b2a:	b29a      	uxth	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b34:	b292      	uxth	r2, r2
 8002b36:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f007 f805 	bl	8009b4a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002b40:	2100      	movs	r1, #0
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 f8d2 	bl	8002cec <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f004 f99a 	bl	8006e86 <USB_ReadInterrupts>
 8002b52:	4603      	mov	r3, r0
 8002b54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b5c:	d10b      	bne.n	8002b76 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b66:	b29a      	uxth	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002b70:	b292      	uxth	r2, r2
 8002b72:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f004 f983 	bl	8006e86 <USB_ReadInterrupts>
 8002b80:	4603      	mov	r3, r0
 8002b82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b8a:	d10b      	bne.n	8002ba4 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b94:	b29a      	uxth	r2, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b9e:	b292      	uxth	r2, r2
 8002ba0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f004 f96c 	bl	8006e86 <USB_ReadInterrupts>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bb8:	d126      	bne.n	8002c08 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002bc2:	b29a      	uxth	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f022 0204 	bic.w	r2, r2, #4
 8002bcc:	b292      	uxth	r2, r2
 8002bce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002bda:	b29a      	uxth	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f022 0208 	bic.w	r2, r2, #8
 8002be4:	b292      	uxth	r2, r2
 8002be6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f006 ffe6 	bl	8009bbc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002bf8:	b29a      	uxth	r2, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002c02:	b292      	uxth	r2, r2
 8002c04:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f004 f93a 	bl	8006e86 <USB_ReadInterrupts>
 8002c12:	4603      	mov	r3, r0
 8002c14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c1c:	d131      	bne.n	8002c82 <HAL_PCD_IRQHandler+0x19a>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002c26:	b29a      	uxth	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f042 0208 	orr.w	r2, r2, #8
 8002c30:	b292      	uxth	r2, r2
 8002c32:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c3e:	b29a      	uxth	r2, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c48:	b292      	uxth	r2, r2
 8002c4a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002c56:	b29a      	uxth	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f042 0204 	orr.w	r2, r2, #4
 8002c60:	b292      	uxth	r2, r2
 8002c62:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP) == 0U)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f004 f90b 	bl	8006e86 <USB_ReadInterrupts>
 8002c70:	4603      	mov	r3, r0
 8002c72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c7a:	d002      	beq.n	8002c82 <HAL_PCD_IRQHandler+0x19a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f006 ff83 	bl	8009b88 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f004 f8fd 	bl	8006e86 <USB_ReadInterrupts>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c96:	d10e      	bne.n	8002cb6 <HAL_PCD_IRQHandler+0x1ce>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ca0:	b29a      	uxth	r2, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002caa:	b292      	uxth	r2, r2
 8002cac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f006 ff3c 	bl	8009b2e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f004 f8e3 	bl	8006e86 <USB_ReadInterrupts>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cca:	d10b      	bne.n	8002ce4 <HAL_PCD_IRQHandler+0x1fc>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002cd4:	b29a      	uxth	r2, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cde:	b292      	uxth	r2, r2
 8002ce0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002ce4:	bf00      	nop
 8002ce6:	3708      	adds	r7, #8
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d101      	bne.n	8002d06 <HAL_PCD_SetAddress+0x1a>
 8002d02:	2302      	movs	r3, #2
 8002d04:	e013      	b.n	8002d2e <HAL_PCD_SetAddress+0x42>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	78fa      	ldrb	r2, [r7, #3]
 8002d12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	78fa      	ldrb	r2, [r7, #3]
 8002d1c:	4611      	mov	r1, r2
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f004 f892 	bl	8006e48 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3708      	adds	r7, #8
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b084      	sub	sp, #16
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
 8002d3e:	4608      	mov	r0, r1
 8002d40:	4611      	mov	r1, r2
 8002d42:	461a      	mov	r2, r3
 8002d44:	4603      	mov	r3, r0
 8002d46:	70fb      	strb	r3, [r7, #3]
 8002d48:	460b      	mov	r3, r1
 8002d4a:	803b      	strh	r3, [r7, #0]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002d50:	2300      	movs	r3, #0
 8002d52:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	da0b      	bge.n	8002d74 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d5c:	78fb      	ldrb	r3, [r7, #3]
 8002d5e:	f003 0307 	and.w	r3, r3, #7
 8002d62:	015b      	lsls	r3, r3, #5
 8002d64:	3328      	adds	r3, #40	; 0x28
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	4413      	add	r3, r2
 8002d6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	705a      	strb	r2, [r3, #1]
 8002d72:	e00b      	b.n	8002d8c <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d74:	78fb      	ldrb	r3, [r7, #3]
 8002d76:	f003 0307 	and.w	r3, r3, #7
 8002d7a:	015b      	lsls	r3, r3, #5
 8002d7c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	4413      	add	r3, r2
 8002d84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002d8c:	78fb      	ldrb	r3, [r7, #3]
 8002d8e:	f003 0307 	and.w	r3, r3, #7
 8002d92:	b2da      	uxtb	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002d98:	883a      	ldrh	r2, [r7, #0]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	78ba      	ldrb	r2, [r7, #2]
 8002da2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	785b      	ldrb	r3, [r3, #1]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d004      	beq.n	8002db6 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	b29a      	uxth	r2, r3
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002db6:	78bb      	ldrb	r3, [r7, #2]
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d102      	bne.n	8002dc2 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d101      	bne.n	8002dd0 <HAL_PCD_EP_Open+0x9a>
 8002dcc:	2302      	movs	r3, #2
 8002dce:	e00e      	b.n	8002dee <HAL_PCD_EP_Open+0xb8>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68f9      	ldr	r1, [r7, #12]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f003 f800 	bl	8005de4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8002dec:	7afb      	ldrb	r3, [r7, #11]
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3710      	adds	r7, #16
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b084      	sub	sp, #16
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
 8002dfe:	460b      	mov	r3, r1
 8002e00:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	da0b      	bge.n	8002e22 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e0a:	78fb      	ldrb	r3, [r7, #3]
 8002e0c:	f003 0307 	and.w	r3, r3, #7
 8002e10:	015b      	lsls	r3, r3, #5
 8002e12:	3328      	adds	r3, #40	; 0x28
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	4413      	add	r3, r2
 8002e18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	705a      	strb	r2, [r3, #1]
 8002e20:	e00b      	b.n	8002e3a <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e22:	78fb      	ldrb	r3, [r7, #3]
 8002e24:	f003 0307 	and.w	r3, r3, #7
 8002e28:	015b      	lsls	r3, r3, #5
 8002e2a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	4413      	add	r3, r2
 8002e32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2200      	movs	r2, #0
 8002e38:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002e3a:	78fb      	ldrb	r3, [r7, #3]
 8002e3c:	f003 0307 	and.w	r3, r3, #7
 8002e40:	b2da      	uxtb	r2, r3
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d101      	bne.n	8002e54 <HAL_PCD_EP_Close+0x5e>
 8002e50:	2302      	movs	r3, #2
 8002e52:	e00e      	b.n	8002e72 <HAL_PCD_EP_Close+0x7c>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2201      	movs	r2, #1
 8002e58:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	68f9      	ldr	r1, [r7, #12]
 8002e62:	4618      	mov	r0, r3
 8002e64:	f003 fab2 	bl	80063cc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3710      	adds	r7, #16
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b086      	sub	sp, #24
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	60f8      	str	r0, [r7, #12]
 8002e82:	607a      	str	r2, [r7, #4]
 8002e84:	603b      	str	r3, [r7, #0]
 8002e86:	460b      	mov	r3, r1
 8002e88:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e8a:	7afb      	ldrb	r3, [r7, #11]
 8002e8c:	f003 0307 	and.w	r3, r3, #7
 8002e90:	015b      	lsls	r3, r3, #5
 8002e92:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002e96:	68fa      	ldr	r2, [r7, #12]
 8002e98:	4413      	add	r3, r2
 8002e9a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	683a      	ldr	r2, [r7, #0]
 8002ea6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002eb4:	7afb      	ldrb	r3, [r7, #11]
 8002eb6:	f003 0307 	and.w	r3, r3, #7
 8002eba:	b2da      	uxtb	r2, r3
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ec0:	7afb      	ldrb	r3, [r7, #11]
 8002ec2:	f003 0307 	and.w	r3, r3, #7
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d106      	bne.n	8002ed8 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	6979      	ldr	r1, [r7, #20]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f003 fc11 	bl	80066f8 <USB_EPStartXfer>
 8002ed6:	e005      	b.n	8002ee4 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	6979      	ldr	r1, [r7, #20]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f003 fc0a 	bl	80066f8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3718      	adds	r7, #24
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}

08002eee <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002eee:	b480      	push	{r7}
 8002ef0:	b083      	sub	sp, #12
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
 8002ef6:	460b      	mov	r3, r1
 8002ef8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002efa:	78fb      	ldrb	r3, [r7, #3]
 8002efc:	f003 0307 	and.w	r3, r3, #7
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	330a      	adds	r3, #10
 8002f04:	015b      	lsls	r3, r3, #5
 8002f06:	4413      	add	r3, r2
 8002f08:	3304      	adds	r3, #4
 8002f0a:	681b      	ldr	r3, [r3, #0]
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b086      	sub	sp, #24
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	607a      	str	r2, [r7, #4]
 8002f22:	603b      	str	r3, [r7, #0]
 8002f24:	460b      	mov	r3, r1
 8002f26:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f28:	7afb      	ldrb	r3, [r7, #11]
 8002f2a:	f003 0307 	and.w	r3, r3, #7
 8002f2e:	015b      	lsls	r3, r3, #5
 8002f30:	3328      	adds	r3, #40	; 0x28
 8002f32:	68fa      	ldr	r2, [r7, #12]
 8002f34:	4413      	add	r3, r2
 8002f36:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	683a      	ldr	r2, [r7, #0]
 8002f42:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	2200      	movs	r2, #0
 8002f48:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f50:	7afb      	ldrb	r3, [r7, #11]
 8002f52:	f003 0307 	and.w	r3, r3, #7
 8002f56:	b2da      	uxtb	r2, r3
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f5c:	7afb      	ldrb	r3, [r7, #11]
 8002f5e:	f003 0307 	and.w	r3, r3, #7
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d106      	bne.n	8002f74 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	6979      	ldr	r1, [r7, #20]
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f003 fbc3 	bl	80066f8 <USB_EPStartXfer>
 8002f72:	e005      	b.n	8002f80 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	6979      	ldr	r1, [r7, #20]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f003 fbbc 	bl	80066f8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3718      	adds	r7, #24
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}

08002f8a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b084      	sub	sp, #16
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
 8002f92:	460b      	mov	r3, r1
 8002f94:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002f96:	78fb      	ldrb	r3, [r7, #3]
 8002f98:	f003 0207 	and.w	r2, r3, #7
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d901      	bls.n	8002fa8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e046      	b.n	8003036 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002fa8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	da0b      	bge.n	8002fc8 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fb0:	78fb      	ldrb	r3, [r7, #3]
 8002fb2:	f003 0307 	and.w	r3, r3, #7
 8002fb6:	015b      	lsls	r3, r3, #5
 8002fb8:	3328      	adds	r3, #40	; 0x28
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	705a      	strb	r2, [r3, #1]
 8002fc6:	e009      	b.n	8002fdc <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002fc8:	78fb      	ldrb	r3, [r7, #3]
 8002fca:	015b      	lsls	r3, r3, #5
 8002fcc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fe2:	78fb      	ldrb	r3, [r7, #3]
 8002fe4:	f003 0307 	and.w	r3, r3, #7
 8002fe8:	b2da      	uxtb	r2, r3
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d101      	bne.n	8002ffc <HAL_PCD_EP_SetStall+0x72>
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	e01c      	b.n	8003036 <HAL_PCD_EP_SetStall+0xac>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68f9      	ldr	r1, [r7, #12]
 800300a:	4618      	mov	r0, r3
 800300c:	f003 fe46 	bl	8006c9c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003010:	78fb      	ldrb	r3, [r7, #3]
 8003012:	f003 0307 	and.w	r3, r3, #7
 8003016:	2b00      	cmp	r3, #0
 8003018:	d108      	bne.n	800302c <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8003024:	4619      	mov	r1, r3
 8003026:	4610      	mov	r0, r2
 8003028:	f003 ff3d 	bl	8006ea6 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3710      	adds	r7, #16
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}

0800303e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800303e:	b580      	push	{r7, lr}
 8003040:	b084      	sub	sp, #16
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
 8003046:	460b      	mov	r3, r1
 8003048:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800304a:	78fb      	ldrb	r3, [r7, #3]
 800304c:	f003 020f 	and.w	r2, r3, #15
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	429a      	cmp	r2, r3
 8003056:	d901      	bls.n	800305c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e03a      	b.n	80030d2 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800305c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003060:	2b00      	cmp	r3, #0
 8003062:	da0b      	bge.n	800307c <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003064:	78fb      	ldrb	r3, [r7, #3]
 8003066:	f003 0307 	and.w	r3, r3, #7
 800306a:	015b      	lsls	r3, r3, #5
 800306c:	3328      	adds	r3, #40	; 0x28
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	4413      	add	r3, r2
 8003072:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2201      	movs	r2, #1
 8003078:	705a      	strb	r2, [r3, #1]
 800307a:	e00b      	b.n	8003094 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800307c:	78fb      	ldrb	r3, [r7, #3]
 800307e:	f003 0307 	and.w	r3, r3, #7
 8003082:	015b      	lsls	r3, r3, #5
 8003084:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	4413      	add	r3, r2
 800308c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2200      	movs	r2, #0
 8003092:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2200      	movs	r2, #0
 8003098:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800309a:	78fb      	ldrb	r3, [r7, #3]
 800309c:	f003 0307 	and.w	r3, r3, #7
 80030a0:	b2da      	uxtb	r2, r3
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d101      	bne.n	80030b4 <HAL_PCD_EP_ClrStall+0x76>
 80030b0:	2302      	movs	r3, #2
 80030b2:	e00e      	b.n	80030d2 <HAL_PCD_EP_ClrStall+0x94>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	68f9      	ldr	r1, [r7, #12]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f003 fe2c 	bl	8006d20 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3710      	adds	r7, #16
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030da:	b480      	push	{r7}
 80030dc:	b083      	sub	sp, #12
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
 80030e2:	460b      	mov	r3, r1
 80030e4:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hpcd);
  UNUSED(ep_addr);

  return HAL_OK;
 80030e6:	2300      	movs	r3, #0
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80030f4:	b590      	push	{r4, r7, lr}
 80030f6:	b089      	sub	sp, #36	; 0x24
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80030fc:	e286      	b.n	800360c <PCD_EP_ISR_Handler+0x518>
  {
    wIstr = hpcd->Instance->ISTR;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003106:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003108:	8afb      	ldrh	r3, [r7, #22]
 800310a:	b2db      	uxtb	r3, r3
 800310c:	f003 030f 	and.w	r3, r3, #15
 8003110:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8003112:	7d7b      	ldrb	r3, [r7, #21]
 8003114:	2b00      	cmp	r3, #0
 8003116:	f040 8146 	bne.w	80033a6 <PCD_EP_ISR_Handler+0x2b2>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800311a:	8afb      	ldrh	r3, [r7, #22]
 800311c:	f003 0310 	and.w	r3, r3, #16
 8003120:	2b00      	cmp	r3, #0
 8003122:	d151      	bne.n	80031c8 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	881b      	ldrh	r3, [r3, #0]
 800312a:	b29b      	uxth	r3, r3
 800312c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003130:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003134:	b29c      	uxth	r4, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 800313e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003142:	b29b      	uxth	r3, r3
 8003144:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	3328      	adds	r3, #40	; 0x28
 800314a:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003154:	b29b      	uxth	r3, r3
 8003156:	461a      	mov	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	00db      	lsls	r3, r3, #3
 800315e:	4413      	add	r3, r2
 8003160:	3302      	adds	r3, #2
 8003162:	005b      	lsls	r3, r3, #1
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	6812      	ldr	r2, [r2, #0]
 8003168:	4413      	add	r3, r2
 800316a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800316e:	881b      	ldrh	r3, [r3, #0]
 8003170:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	695a      	ldr	r2, [r3, #20]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	69db      	ldr	r3, [r3, #28]
 8003180:	441a      	add	r2, r3
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003186:	2100      	movs	r1, #0
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f006 fcb9 	bl	8009b00 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003194:	b2db      	uxtb	r3, r3
 8003196:	2b00      	cmp	r3, #0
 8003198:	f000 8238 	beq.w	800360c <PCD_EP_ISR_Handler+0x518>
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	699b      	ldr	r3, [r3, #24]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	f040 8233 	bne.w	800360c <PCD_EP_ISR_Handler+0x518>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80031b2:	b2da      	uxtb	r2, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	b292      	uxth	r2, r2
 80031ba:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80031c6:	e221      	b.n	800360c <PCD_EP_ISR_Handler+0x518>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80031ce:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	881b      	ldrh	r3, [r3, #0]
 80031d6:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80031d8:	8a7b      	ldrh	r3, [r7, #18]
 80031da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d033      	beq.n	800324a <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	461a      	mov	r2, r3
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	00db      	lsls	r3, r3, #3
 80031f4:	4413      	add	r3, r2
 80031f6:	3306      	adds	r3, #6
 80031f8:	005b      	lsls	r3, r3, #1
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	6812      	ldr	r2, [r2, #0]
 80031fe:	4413      	add	r3, r2
 8003200:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003204:	881b      	ldrh	r3, [r3, #0]
 8003206:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6818      	ldr	r0, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003220:	b29b      	uxth	r3, r3
 8003222:	f003 fe91 	bl	8006f48 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	881b      	ldrh	r3, [r3, #0]
 800322c:	b29a      	uxth	r2, r3
 800322e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003232:	4013      	ands	r3, r2
 8003234:	b29c      	uxth	r4, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 800323e:	b292      	uxth	r2, r2
 8003240:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f006 fc32 	bl	8009aac <HAL_PCD_SetupStageCallback>
 8003248:	e1e0      	b.n	800360c <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800324a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800324e:	2b00      	cmp	r3, #0
 8003250:	f280 81dc 	bge.w	800360c <PCD_EP_ISR_Handler+0x518>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	881b      	ldrh	r3, [r3, #0]
 800325a:	b29a      	uxth	r2, r3
 800325c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003260:	4013      	ands	r3, r2
 8003262:	b29c      	uxth	r4, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 800326c:	b292      	uxth	r2, r2
 800326e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003278:	b29b      	uxth	r3, r3
 800327a:	461a      	mov	r2, r3
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	00db      	lsls	r3, r3, #3
 8003282:	4413      	add	r3, r2
 8003284:	3306      	adds	r3, #6
 8003286:	005b      	lsls	r3, r3, #1
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	6812      	ldr	r2, [r2, #0]
 800328c:	4413      	add	r3, r2
 800328e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003292:	881b      	ldrh	r3, [r3, #0]
 8003294:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	69db      	ldr	r3, [r3, #28]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d019      	beq.n	80032d8 <PCD_EP_ISR_Handler+0x1e4>
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	695b      	ldr	r3, [r3, #20]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d015      	beq.n	80032d8 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6818      	ldr	r0, [r3, #0]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6959      	ldr	r1, [r3, #20]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80032bc:	b29b      	uxth	r3, r3
 80032be:	f003 fe43 	bl	8006f48 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	695a      	ldr	r2, [r3, #20]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	69db      	ldr	r3, [r3, #28]
 80032ca:	441a      	add	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80032d0:	2100      	movs	r1, #0
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f006 fbfc 	bl	8009ad0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	461c      	mov	r4, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	441c      	add	r4, r3
 80032ea:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 80032ee:	60bb      	str	r3, [r7, #8]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	691b      	ldr	r3, [r3, #16]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d110      	bne.n	800331a <PCD_EP_ISR_Handler+0x226>
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	881b      	ldrh	r3, [r3, #0]
 80032fc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003300:	b29a      	uxth	r2, r3
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	801a      	strh	r2, [r3, #0]
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	881b      	ldrh	r3, [r3, #0]
 800330a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800330e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003312:	b29a      	uxth	r2, r3
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	801a      	strh	r2, [r3, #0]
 8003318:	e02f      	b.n	800337a <PCD_EP_ISR_Handler+0x286>
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	2b3e      	cmp	r3, #62	; 0x3e
 8003320:	d813      	bhi.n	800334a <PCD_EP_ISR_Handler+0x256>
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	085b      	lsrs	r3, r3, #1
 8003328:	61bb      	str	r3, [r7, #24]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	2b00      	cmp	r3, #0
 8003334:	d002      	beq.n	800333c <PCD_EP_ISR_Handler+0x248>
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	3301      	adds	r3, #1
 800333a:	61bb      	str	r3, [r7, #24]
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	b29b      	uxth	r3, r3
 8003340:	029b      	lsls	r3, r3, #10
 8003342:	b29a      	uxth	r2, r3
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	801a      	strh	r2, [r3, #0]
 8003348:	e017      	b.n	800337a <PCD_EP_ISR_Handler+0x286>
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	095b      	lsrs	r3, r3, #5
 8003350:	61bb      	str	r3, [r7, #24]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	f003 031f 	and.w	r3, r3, #31
 800335a:	2b00      	cmp	r3, #0
 800335c:	d102      	bne.n	8003364 <PCD_EP_ISR_Handler+0x270>
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	3b01      	subs	r3, #1
 8003362:	61bb      	str	r3, [r7, #24]
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	b29b      	uxth	r3, r3
 8003368:	029b      	lsls	r3, r3, #10
 800336a:	b29b      	uxth	r3, r3
 800336c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003370:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003374:	b29a      	uxth	r2, r3
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	881b      	ldrh	r3, [r3, #0]
 8003380:	b29b      	uxth	r3, r3
 8003382:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800338a:	b29c      	uxth	r4, r3
 800338c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003390:	b29c      	uxth	r4, r3
 8003392:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003396:	b29c      	uxth	r4, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	4ba2      	ldr	r3, [pc, #648]	; (8003628 <PCD_EP_ISR_Handler+0x534>)
 800339e:	4323      	orrs	r3, r4
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	8013      	strh	r3, [r2, #0]
 80033a4:	e132      	b.n	800360c <PCD_EP_ISR_Handler+0x518>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	461a      	mov	r2, r3
 80033ac:	7d7b      	ldrb	r3, [r7, #21]
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	4413      	add	r3, r2
 80033b2:	881b      	ldrh	r3, [r3, #0]
 80033b4:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80033b6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	f280 80d1 	bge.w	8003562 <PCD_EP_ISR_Handler+0x46e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	461a      	mov	r2, r3
 80033c6:	7d7b      	ldrb	r3, [r7, #21]
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	4413      	add	r3, r2
 80033cc:	881b      	ldrh	r3, [r3, #0]
 80033ce:	b29a      	uxth	r2, r3
 80033d0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80033d4:	4013      	ands	r3, r2
 80033d6:	b29c      	uxth	r4, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	461a      	mov	r2, r3
 80033de:	7d7b      	ldrb	r3, [r7, #21]
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	4413      	add	r3, r2
 80033e4:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80033e8:	b292      	uxth	r2, r2
 80033ea:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80033ec:	7d7b      	ldrb	r3, [r7, #21]
 80033ee:	015b      	lsls	r3, r3, #5
 80033f0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	4413      	add	r3, r2
 80033f8:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	7b1b      	ldrb	r3, [r3, #12]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d121      	bne.n	8003446 <PCD_EP_ISR_Handler+0x352>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800340a:	b29b      	uxth	r3, r3
 800340c:	461a      	mov	r2, r3
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	00db      	lsls	r3, r3, #3
 8003414:	4413      	add	r3, r2
 8003416:	3306      	adds	r3, #6
 8003418:	005b      	lsls	r3, r3, #1
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	6812      	ldr	r2, [r2, #0]
 800341e:	4413      	add	r3, r2
 8003420:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003424:	881b      	ldrh	r3, [r3, #0]
 8003426:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800342a:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 800342c:	8bfb      	ldrh	r3, [r7, #30]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d072      	beq.n	8003518 <PCD_EP_ISR_Handler+0x424>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6818      	ldr	r0, [r3, #0]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6959      	ldr	r1, [r3, #20]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	88da      	ldrh	r2, [r3, #6]
 800343e:	8bfb      	ldrh	r3, [r7, #30]
 8003440:	f003 fd82 	bl	8006f48 <USB_ReadPMA>
 8003444:	e068      	b.n	8003518 <PCD_EP_ISR_Handler+0x424>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	461a      	mov	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	4413      	add	r3, r2
 8003454:	881b      	ldrh	r3, [r3, #0]
 8003456:	b29b      	uxth	r3, r3
 8003458:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d021      	beq.n	80034a4 <PCD_EP_ISR_Handler+0x3b0>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003468:	b29b      	uxth	r3, r3
 800346a:	461a      	mov	r2, r3
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	00db      	lsls	r3, r3, #3
 8003472:	4413      	add	r3, r2
 8003474:	3302      	adds	r3, #2
 8003476:	005b      	lsls	r3, r3, #1
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	6812      	ldr	r2, [r2, #0]
 800347c:	4413      	add	r3, r2
 800347e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003482:	881b      	ldrh	r3, [r3, #0]
 8003484:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003488:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 800348a:	8bfb      	ldrh	r3, [r7, #30]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d02a      	beq.n	80034e6 <PCD_EP_ISR_Handler+0x3f2>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6818      	ldr	r0, [r3, #0]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6959      	ldr	r1, [r3, #20]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	891a      	ldrh	r2, [r3, #8]
 800349c:	8bfb      	ldrh	r3, [r7, #30]
 800349e:	f003 fd53 	bl	8006f48 <USB_ReadPMA>
 80034a2:	e020      	b.n	80034e6 <PCD_EP_ISR_Handler+0x3f2>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	461a      	mov	r2, r3
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	00db      	lsls	r3, r3, #3
 80034b6:	4413      	add	r3, r2
 80034b8:	3306      	adds	r3, #6
 80034ba:	005b      	lsls	r3, r3, #1
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	6812      	ldr	r2, [r2, #0]
 80034c0:	4413      	add	r3, r2
 80034c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80034c6:	881b      	ldrh	r3, [r3, #0]
 80034c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034cc:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80034ce:	8bfb      	ldrh	r3, [r7, #30]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d008      	beq.n	80034e6 <PCD_EP_ISR_Handler+0x3f2>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6818      	ldr	r0, [r3, #0]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6959      	ldr	r1, [r3, #20]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	895a      	ldrh	r2, [r3, #10]
 80034e0:	8bfb      	ldrh	r3, [r7, #30]
 80034e2:	f003 fd31 	bl	8006f48 <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	461a      	mov	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	4413      	add	r3, r2
 80034f4:	881b      	ldrh	r3, [r3, #0]
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003500:	b29c      	uxth	r4, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	461a      	mov	r2, r3
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	441a      	add	r2, r3
 8003510:	4b46      	ldr	r3, [pc, #280]	; (800362c <PCD_EP_ISR_Handler+0x538>)
 8003512:	4323      	orrs	r3, r4
 8003514:	b29b      	uxth	r3, r3
 8003516:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	69da      	ldr	r2, [r3, #28]
 800351c:	8bfb      	ldrh	r3, [r7, #30]
 800351e:	441a      	add	r2, r3
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	695a      	ldr	r2, [r3, #20]
 8003528:	8bfb      	ldrh	r3, [r7, #30]
 800352a:	441a      	add	r2, r3
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	699b      	ldr	r3, [r3, #24]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d004      	beq.n	8003542 <PCD_EP_ISR_Handler+0x44e>
 8003538:	8bfa      	ldrh	r2, [r7, #30]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	429a      	cmp	r2, r3
 8003540:	d206      	bcs.n	8003550 <PCD_EP_ISR_Handler+0x45c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	4619      	mov	r1, r3
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f006 fac1 	bl	8009ad0 <HAL_PCD_DataOutStageCallback>
 800354e:	e008      	b.n	8003562 <PCD_EP_ISR_Handler+0x46e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	7819      	ldrb	r1, [r3, #0]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	695a      	ldr	r2, [r3, #20]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	699b      	ldr	r3, [r3, #24]
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f7ff fc8c 	bl	8002e7a <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003562:	8a7b      	ldrh	r3, [r7, #18]
 8003564:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003568:	2b00      	cmp	r3, #0
 800356a:	d04f      	beq.n	800360c <PCD_EP_ISR_Handler+0x518>
      {
        ep = &hpcd->IN_ep[epindex];
 800356c:	7d7b      	ldrb	r3, [r7, #21]
 800356e:	015b      	lsls	r3, r3, #5
 8003570:	3328      	adds	r3, #40	; 0x28
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	4413      	add	r3, r2
 8003576:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	461a      	mov	r2, r3
 800357e:	7d7b      	ldrb	r3, [r7, #21]
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	4413      	add	r3, r2
 8003584:	881b      	ldrh	r3, [r3, #0]
 8003586:	b29b      	uxth	r3, r3
 8003588:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800358c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003590:	b29c      	uxth	r4, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	461a      	mov	r2, r3
 8003598:	7d7b      	ldrb	r3, [r7, #21]
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	441a      	add	r2, r3
 800359e:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 80035a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	461a      	mov	r2, r3
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	00db      	lsls	r3, r3, #3
 80035bc:	4413      	add	r3, r2
 80035be:	3302      	adds	r3, #2
 80035c0:	005b      	lsls	r3, r3, #1
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	6812      	ldr	r2, [r2, #0]
 80035c6:	4413      	add	r3, r2
 80035c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80035cc:	881b      	ldrh	r3, [r3, #0]
 80035ce:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	695a      	ldr	r2, [r3, #20]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	69db      	ldr	r3, [r3, #28]
 80035de:	441a      	add	r2, r3
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d106      	bne.n	80035fa <PCD_EP_ISR_Handler+0x506>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	4619      	mov	r1, r3
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f006 fa84 	bl	8009b00 <HAL_PCD_DataInStageCallback>
 80035f8:	e008      	b.n	800360c <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	7819      	ldrb	r1, [r3, #0]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	695a      	ldr	r2, [r3, #20]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f7ff fc86 	bl	8002f18 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003614:	b29b      	uxth	r3, r3
 8003616:	b21b      	sxth	r3, r3
 8003618:	2b00      	cmp	r3, #0
 800361a:	f6ff ad70 	blt.w	80030fe <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 800361e:	2300      	movs	r3, #0
}
 8003620:	4618      	mov	r0, r3
 8003622:	3724      	adds	r7, #36	; 0x24
 8003624:	46bd      	mov	sp, r7
 8003626:	bd90      	pop	{r4, r7, pc}
 8003628:	ffff8080 	.word	0xffff8080
 800362c:	ffff80c0 	.word	0xffff80c0

08003630 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8003630:	b480      	push	{r7}
 8003632:	b087      	sub	sp, #28
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	607b      	str	r3, [r7, #4]
 800363a:	460b      	mov	r3, r1
 800363c:	817b      	strh	r3, [r7, #10]
 800363e:	4613      	mov	r3, r2
 8003640:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003642:	897b      	ldrh	r3, [r7, #10]
 8003644:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003648:	b29b      	uxth	r3, r3
 800364a:	2b00      	cmp	r3, #0
 800364c:	d008      	beq.n	8003660 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800364e:	897b      	ldrh	r3, [r7, #10]
 8003650:	f003 0307 	and.w	r3, r3, #7
 8003654:	015b      	lsls	r3, r3, #5
 8003656:	3328      	adds	r3, #40	; 0x28
 8003658:	68fa      	ldr	r2, [r7, #12]
 800365a:	4413      	add	r3, r2
 800365c:	617b      	str	r3, [r7, #20]
 800365e:	e006      	b.n	800366e <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003660:	897b      	ldrh	r3, [r7, #10]
 8003662:	015b      	lsls	r3, r3, #5
 8003664:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003668:	68fa      	ldr	r2, [r7, #12]
 800366a:	4413      	add	r3, r2
 800366c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800366e:	893b      	ldrh	r3, [r7, #8]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d107      	bne.n	8003684 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	2200      	movs	r2, #0
 8003678:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	b29a      	uxth	r2, r3
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	80da      	strh	r2, [r3, #6]
 8003682:	e00b      	b.n	800369c <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	2201      	movs	r2, #1
 8003688:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	b29a      	uxth	r2, r3
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	0c1b      	lsrs	r3, r3, #16
 8003696:	b29a      	uxth	r2, r3
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800369c:	2300      	movs	r3, #0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	371c      	adds	r7, #28
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr
	...

080036ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	1d3b      	adds	r3, r7, #4
 80036b6:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036b8:	1d3b      	adds	r3, r7, #4
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d102      	bne.n	80036c6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	f000 bef4 	b.w	80044ae <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036c6:	1d3b      	adds	r3, r7, #4
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0301 	and.w	r3, r3, #1
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	f000 816a 	beq.w	80039aa <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80036d6:	4bb3      	ldr	r3, [pc, #716]	; (80039a4 <HAL_RCC_OscConfig+0x2f8>)
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f003 030c 	and.w	r3, r3, #12
 80036de:	2b04      	cmp	r3, #4
 80036e0:	d00c      	beq.n	80036fc <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80036e2:	4bb0      	ldr	r3, [pc, #704]	; (80039a4 <HAL_RCC_OscConfig+0x2f8>)
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f003 030c 	and.w	r3, r3, #12
 80036ea:	2b08      	cmp	r3, #8
 80036ec:	d159      	bne.n	80037a2 <HAL_RCC_OscConfig+0xf6>
 80036ee:	4bad      	ldr	r3, [pc, #692]	; (80039a4 <HAL_RCC_OscConfig+0x2f8>)
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036fa:	d152      	bne.n	80037a2 <HAL_RCC_OscConfig+0xf6>
 80036fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003700:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003704:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003708:	fa93 f3a3 	rbit	r3, r3
 800370c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 8003710:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003714:	fab3 f383 	clz	r3, r3
 8003718:	b2db      	uxtb	r3, r3
 800371a:	095b      	lsrs	r3, r3, #5
 800371c:	b2db      	uxtb	r3, r3
 800371e:	f043 0301 	orr.w	r3, r3, #1
 8003722:	b2db      	uxtb	r3, r3
 8003724:	2b01      	cmp	r3, #1
 8003726:	d102      	bne.n	800372e <HAL_RCC_OscConfig+0x82>
 8003728:	4b9e      	ldr	r3, [pc, #632]	; (80039a4 <HAL_RCC_OscConfig+0x2f8>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	e015      	b.n	800375a <HAL_RCC_OscConfig+0xae>
 800372e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003732:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003736:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800373a:	fa93 f3a3 	rbit	r3, r3
 800373e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003742:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003746:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800374a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800374e:	fa93 f3a3 	rbit	r3, r3
 8003752:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003756:	4b93      	ldr	r3, [pc, #588]	; (80039a4 <HAL_RCC_OscConfig+0x2f8>)
 8003758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800375e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003762:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003766:	fa92 f2a2 	rbit	r2, r2
 800376a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800376e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003772:	fab2 f282 	clz	r2, r2
 8003776:	b2d2      	uxtb	r2, r2
 8003778:	f042 0220 	orr.w	r2, r2, #32
 800377c:	b2d2      	uxtb	r2, r2
 800377e:	f002 021f 	and.w	r2, r2, #31
 8003782:	2101      	movs	r1, #1
 8003784:	fa01 f202 	lsl.w	r2, r1, r2
 8003788:	4013      	ands	r3, r2
 800378a:	2b00      	cmp	r3, #0
 800378c:	f000 810c 	beq.w	80039a8 <HAL_RCC_OscConfig+0x2fc>
 8003790:	1d3b      	adds	r3, r7, #4
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	f040 8106 	bne.w	80039a8 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	f000 be86 	b.w	80044ae <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037a2:	1d3b      	adds	r3, r7, #4
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037ac:	d106      	bne.n	80037bc <HAL_RCC_OscConfig+0x110>
 80037ae:	4b7d      	ldr	r3, [pc, #500]	; (80039a4 <HAL_RCC_OscConfig+0x2f8>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a7c      	ldr	r2, [pc, #496]	; (80039a4 <HAL_RCC_OscConfig+0x2f8>)
 80037b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037b8:	6013      	str	r3, [r2, #0]
 80037ba:	e030      	b.n	800381e <HAL_RCC_OscConfig+0x172>
 80037bc:	1d3b      	adds	r3, r7, #4
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d10c      	bne.n	80037e0 <HAL_RCC_OscConfig+0x134>
 80037c6:	4b77      	ldr	r3, [pc, #476]	; (80039a4 <HAL_RCC_OscConfig+0x2f8>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a76      	ldr	r2, [pc, #472]	; (80039a4 <HAL_RCC_OscConfig+0x2f8>)
 80037cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037d0:	6013      	str	r3, [r2, #0]
 80037d2:	4b74      	ldr	r3, [pc, #464]	; (80039a4 <HAL_RCC_OscConfig+0x2f8>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a73      	ldr	r2, [pc, #460]	; (80039a4 <HAL_RCC_OscConfig+0x2f8>)
 80037d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037dc:	6013      	str	r3, [r2, #0]
 80037de:	e01e      	b.n	800381e <HAL_RCC_OscConfig+0x172>
 80037e0:	1d3b      	adds	r3, r7, #4
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037ea:	d10c      	bne.n	8003806 <HAL_RCC_OscConfig+0x15a>
 80037ec:	4b6d      	ldr	r3, [pc, #436]	; (80039a4 <HAL_RCC_OscConfig+0x2f8>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a6c      	ldr	r2, [pc, #432]	; (80039a4 <HAL_RCC_OscConfig+0x2f8>)
 80037f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037f6:	6013      	str	r3, [r2, #0]
 80037f8:	4b6a      	ldr	r3, [pc, #424]	; (80039a4 <HAL_RCC_OscConfig+0x2f8>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a69      	ldr	r2, [pc, #420]	; (80039a4 <HAL_RCC_OscConfig+0x2f8>)
 80037fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003802:	6013      	str	r3, [r2, #0]
 8003804:	e00b      	b.n	800381e <HAL_RCC_OscConfig+0x172>
 8003806:	4b67      	ldr	r3, [pc, #412]	; (80039a4 <HAL_RCC_OscConfig+0x2f8>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a66      	ldr	r2, [pc, #408]	; (80039a4 <HAL_RCC_OscConfig+0x2f8>)
 800380c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003810:	6013      	str	r3, [r2, #0]
 8003812:	4b64      	ldr	r3, [pc, #400]	; (80039a4 <HAL_RCC_OscConfig+0x2f8>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a63      	ldr	r2, [pc, #396]	; (80039a4 <HAL_RCC_OscConfig+0x2f8>)
 8003818:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800381c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800381e:	4b61      	ldr	r3, [pc, #388]	; (80039a4 <HAL_RCC_OscConfig+0x2f8>)
 8003820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003822:	f023 020f 	bic.w	r2, r3, #15
 8003826:	1d3b      	adds	r3, r7, #4
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	495d      	ldr	r1, [pc, #372]	; (80039a4 <HAL_RCC_OscConfig+0x2f8>)
 800382e:	4313      	orrs	r3, r2
 8003830:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003832:	1d3b      	adds	r3, r7, #4
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d059      	beq.n	80038f0 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800383c:	f7fd fe0e 	bl	800145c <HAL_GetTick>
 8003840:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003844:	e00a      	b.n	800385c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003846:	f7fd fe09 	bl	800145c <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	2b64      	cmp	r3, #100	; 0x64
 8003854:	d902      	bls.n	800385c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	f000 be29 	b.w	80044ae <HAL_RCC_OscConfig+0xe02>
 800385c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003860:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003864:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003868:	fa93 f3a3 	rbit	r3, r3
 800386c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003870:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003874:	fab3 f383 	clz	r3, r3
 8003878:	b2db      	uxtb	r3, r3
 800387a:	095b      	lsrs	r3, r3, #5
 800387c:	b2db      	uxtb	r3, r3
 800387e:	f043 0301 	orr.w	r3, r3, #1
 8003882:	b2db      	uxtb	r3, r3
 8003884:	2b01      	cmp	r3, #1
 8003886:	d102      	bne.n	800388e <HAL_RCC_OscConfig+0x1e2>
 8003888:	4b46      	ldr	r3, [pc, #280]	; (80039a4 <HAL_RCC_OscConfig+0x2f8>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	e015      	b.n	80038ba <HAL_RCC_OscConfig+0x20e>
 800388e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003892:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003896:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800389a:	fa93 f3a3 	rbit	r3, r3
 800389e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80038a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038a6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80038aa:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80038ae:	fa93 f3a3 	rbit	r3, r3
 80038b2:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80038b6:	4b3b      	ldr	r3, [pc, #236]	; (80039a4 <HAL_RCC_OscConfig+0x2f8>)
 80038b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80038be:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80038c2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80038c6:	fa92 f2a2 	rbit	r2, r2
 80038ca:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80038ce:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80038d2:	fab2 f282 	clz	r2, r2
 80038d6:	b2d2      	uxtb	r2, r2
 80038d8:	f042 0220 	orr.w	r2, r2, #32
 80038dc:	b2d2      	uxtb	r2, r2
 80038de:	f002 021f 	and.w	r2, r2, #31
 80038e2:	2101      	movs	r1, #1
 80038e4:	fa01 f202 	lsl.w	r2, r1, r2
 80038e8:	4013      	ands	r3, r2
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d0ab      	beq.n	8003846 <HAL_RCC_OscConfig+0x19a>
 80038ee:	e05c      	b.n	80039aa <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f0:	f7fd fdb4 	bl	800145c <HAL_GetTick>
 80038f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038f8:	e00a      	b.n	8003910 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038fa:	f7fd fdaf 	bl	800145c <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	2b64      	cmp	r3, #100	; 0x64
 8003908:	d902      	bls.n	8003910 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	f000 bdcf 	b.w	80044ae <HAL_RCC_OscConfig+0xe02>
 8003910:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003914:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003918:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800391c:	fa93 f3a3 	rbit	r3, r3
 8003920:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003924:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003928:	fab3 f383 	clz	r3, r3
 800392c:	b2db      	uxtb	r3, r3
 800392e:	095b      	lsrs	r3, r3, #5
 8003930:	b2db      	uxtb	r3, r3
 8003932:	f043 0301 	orr.w	r3, r3, #1
 8003936:	b2db      	uxtb	r3, r3
 8003938:	2b01      	cmp	r3, #1
 800393a:	d102      	bne.n	8003942 <HAL_RCC_OscConfig+0x296>
 800393c:	4b19      	ldr	r3, [pc, #100]	; (80039a4 <HAL_RCC_OscConfig+0x2f8>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	e015      	b.n	800396e <HAL_RCC_OscConfig+0x2c2>
 8003942:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003946:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800394a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800394e:	fa93 f3a3 	rbit	r3, r3
 8003952:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003956:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800395a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800395e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003962:	fa93 f3a3 	rbit	r3, r3
 8003966:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800396a:	4b0e      	ldr	r3, [pc, #56]	; (80039a4 <HAL_RCC_OscConfig+0x2f8>)
 800396c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003972:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003976:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800397a:	fa92 f2a2 	rbit	r2, r2
 800397e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003982:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003986:	fab2 f282 	clz	r2, r2
 800398a:	b2d2      	uxtb	r2, r2
 800398c:	f042 0220 	orr.w	r2, r2, #32
 8003990:	b2d2      	uxtb	r2, r2
 8003992:	f002 021f 	and.w	r2, r2, #31
 8003996:	2101      	movs	r1, #1
 8003998:	fa01 f202 	lsl.w	r2, r1, r2
 800399c:	4013      	ands	r3, r2
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d1ab      	bne.n	80038fa <HAL_RCC_OscConfig+0x24e>
 80039a2:	e002      	b.n	80039aa <HAL_RCC_OscConfig+0x2fe>
 80039a4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039aa:	1d3b      	adds	r3, r7, #4
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0302 	and.w	r3, r3, #2
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	f000 816f 	beq.w	8003c98 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80039ba:	4bd0      	ldr	r3, [pc, #832]	; (8003cfc <HAL_RCC_OscConfig+0x650>)
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f003 030c 	and.w	r3, r3, #12
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00b      	beq.n	80039de <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80039c6:	4bcd      	ldr	r3, [pc, #820]	; (8003cfc <HAL_RCC_OscConfig+0x650>)
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f003 030c 	and.w	r3, r3, #12
 80039ce:	2b08      	cmp	r3, #8
 80039d0:	d16c      	bne.n	8003aac <HAL_RCC_OscConfig+0x400>
 80039d2:	4bca      	ldr	r3, [pc, #808]	; (8003cfc <HAL_RCC_OscConfig+0x650>)
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d166      	bne.n	8003aac <HAL_RCC_OscConfig+0x400>
 80039de:	2302      	movs	r3, #2
 80039e0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80039e8:	fa93 f3a3 	rbit	r3, r3
 80039ec:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80039f0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039f4:	fab3 f383 	clz	r3, r3
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	095b      	lsrs	r3, r3, #5
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	f043 0301 	orr.w	r3, r3, #1
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d102      	bne.n	8003a0e <HAL_RCC_OscConfig+0x362>
 8003a08:	4bbc      	ldr	r3, [pc, #752]	; (8003cfc <HAL_RCC_OscConfig+0x650>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	e013      	b.n	8003a36 <HAL_RCC_OscConfig+0x38a>
 8003a0e:	2302      	movs	r3, #2
 8003a10:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a14:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003a18:	fa93 f3a3 	rbit	r3, r3
 8003a1c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003a20:	2302      	movs	r3, #2
 8003a22:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003a26:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003a2a:	fa93 f3a3 	rbit	r3, r3
 8003a2e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003a32:	4bb2      	ldr	r3, [pc, #712]	; (8003cfc <HAL_RCC_OscConfig+0x650>)
 8003a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a36:	2202      	movs	r2, #2
 8003a38:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003a3c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003a40:	fa92 f2a2 	rbit	r2, r2
 8003a44:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003a48:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003a4c:	fab2 f282 	clz	r2, r2
 8003a50:	b2d2      	uxtb	r2, r2
 8003a52:	f042 0220 	orr.w	r2, r2, #32
 8003a56:	b2d2      	uxtb	r2, r2
 8003a58:	f002 021f 	and.w	r2, r2, #31
 8003a5c:	2101      	movs	r1, #1
 8003a5e:	fa01 f202 	lsl.w	r2, r1, r2
 8003a62:	4013      	ands	r3, r2
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d007      	beq.n	8003a78 <HAL_RCC_OscConfig+0x3cc>
 8003a68:	1d3b      	adds	r3, r7, #4
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d002      	beq.n	8003a78 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	f000 bd1b 	b.w	80044ae <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a78:	4ba0      	ldr	r3, [pc, #640]	; (8003cfc <HAL_RCC_OscConfig+0x650>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a80:	1d3b      	adds	r3, r7, #4
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	695b      	ldr	r3, [r3, #20]
 8003a86:	21f8      	movs	r1, #248	; 0xf8
 8003a88:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a8c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003a90:	fa91 f1a1 	rbit	r1, r1
 8003a94:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003a98:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003a9c:	fab1 f181 	clz	r1, r1
 8003aa0:	b2c9      	uxtb	r1, r1
 8003aa2:	408b      	lsls	r3, r1
 8003aa4:	4995      	ldr	r1, [pc, #596]	; (8003cfc <HAL_RCC_OscConfig+0x650>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aaa:	e0f5      	b.n	8003c98 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003aac:	1d3b      	adds	r3, r7, #4
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	f000 8085 	beq.w	8003bc2 <HAL_RCC_OscConfig+0x516>
 8003ab8:	2301      	movs	r3, #1
 8003aba:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003abe:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003ac2:	fa93 f3a3 	rbit	r3, r3
 8003ac6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003aca:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ace:	fab3 f383 	clz	r3, r3
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003ad8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	461a      	mov	r2, r3
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ae4:	f7fd fcba 	bl	800145c <HAL_GetTick>
 8003ae8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aec:	e00a      	b.n	8003b04 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003aee:	f7fd fcb5 	bl	800145c <HAL_GetTick>
 8003af2:	4602      	mov	r2, r0
 8003af4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d902      	bls.n	8003b04 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	f000 bcd5 	b.w	80044ae <HAL_RCC_OscConfig+0xe02>
 8003b04:	2302      	movs	r3, #2
 8003b06:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b0a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003b0e:	fa93 f3a3 	rbit	r3, r3
 8003b12:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003b16:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b1a:	fab3 f383 	clz	r3, r3
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	095b      	lsrs	r3, r3, #5
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	f043 0301 	orr.w	r3, r3, #1
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d102      	bne.n	8003b34 <HAL_RCC_OscConfig+0x488>
 8003b2e:	4b73      	ldr	r3, [pc, #460]	; (8003cfc <HAL_RCC_OscConfig+0x650>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	e013      	b.n	8003b5c <HAL_RCC_OscConfig+0x4b0>
 8003b34:	2302      	movs	r3, #2
 8003b36:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b3a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003b3e:	fa93 f3a3 	rbit	r3, r3
 8003b42:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003b46:	2302      	movs	r3, #2
 8003b48:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003b4c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003b50:	fa93 f3a3 	rbit	r3, r3
 8003b54:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003b58:	4b68      	ldr	r3, [pc, #416]	; (8003cfc <HAL_RCC_OscConfig+0x650>)
 8003b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5c:	2202      	movs	r2, #2
 8003b5e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003b62:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003b66:	fa92 f2a2 	rbit	r2, r2
 8003b6a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003b6e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003b72:	fab2 f282 	clz	r2, r2
 8003b76:	b2d2      	uxtb	r2, r2
 8003b78:	f042 0220 	orr.w	r2, r2, #32
 8003b7c:	b2d2      	uxtb	r2, r2
 8003b7e:	f002 021f 	and.w	r2, r2, #31
 8003b82:	2101      	movs	r1, #1
 8003b84:	fa01 f202 	lsl.w	r2, r1, r2
 8003b88:	4013      	ands	r3, r2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d0af      	beq.n	8003aee <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b8e:	4b5b      	ldr	r3, [pc, #364]	; (8003cfc <HAL_RCC_OscConfig+0x650>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b96:	1d3b      	adds	r3, r7, #4
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	695b      	ldr	r3, [r3, #20]
 8003b9c:	21f8      	movs	r1, #248	; 0xf8
 8003b9e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ba2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003ba6:	fa91 f1a1 	rbit	r1, r1
 8003baa:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003bae:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003bb2:	fab1 f181 	clz	r1, r1
 8003bb6:	b2c9      	uxtb	r1, r1
 8003bb8:	408b      	lsls	r3, r1
 8003bba:	4950      	ldr	r1, [pc, #320]	; (8003cfc <HAL_RCC_OscConfig+0x650>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	600b      	str	r3, [r1, #0]
 8003bc0:	e06a      	b.n	8003c98 <HAL_RCC_OscConfig+0x5ec>
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bc8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003bcc:	fa93 f3a3 	rbit	r3, r3
 8003bd0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003bd4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bd8:	fab3 f383 	clz	r3, r3
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003be2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	461a      	mov	r2, r3
 8003bea:	2300      	movs	r3, #0
 8003bec:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bee:	f7fd fc35 	bl	800145c <HAL_GetTick>
 8003bf2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bf6:	e00a      	b.n	8003c0e <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bf8:	f7fd fc30 	bl	800145c <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d902      	bls.n	8003c0e <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	f000 bc50 	b.w	80044ae <HAL_RCC_OscConfig+0xe02>
 8003c0e:	2302      	movs	r3, #2
 8003c10:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c14:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003c18:	fa93 f3a3 	rbit	r3, r3
 8003c1c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003c20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c24:	fab3 f383 	clz	r3, r3
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	095b      	lsrs	r3, r3, #5
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	f043 0301 	orr.w	r3, r3, #1
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d102      	bne.n	8003c3e <HAL_RCC_OscConfig+0x592>
 8003c38:	4b30      	ldr	r3, [pc, #192]	; (8003cfc <HAL_RCC_OscConfig+0x650>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	e013      	b.n	8003c66 <HAL_RCC_OscConfig+0x5ba>
 8003c3e:	2302      	movs	r3, #2
 8003c40:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c44:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003c48:	fa93 f3a3 	rbit	r3, r3
 8003c4c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003c50:	2302      	movs	r3, #2
 8003c52:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003c56:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003c5a:	fa93 f3a3 	rbit	r3, r3
 8003c5e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003c62:	4b26      	ldr	r3, [pc, #152]	; (8003cfc <HAL_RCC_OscConfig+0x650>)
 8003c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c66:	2202      	movs	r2, #2
 8003c68:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003c6c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003c70:	fa92 f2a2 	rbit	r2, r2
 8003c74:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003c78:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003c7c:	fab2 f282 	clz	r2, r2
 8003c80:	b2d2      	uxtb	r2, r2
 8003c82:	f042 0220 	orr.w	r2, r2, #32
 8003c86:	b2d2      	uxtb	r2, r2
 8003c88:	f002 021f 	and.w	r2, r2, #31
 8003c8c:	2101      	movs	r1, #1
 8003c8e:	fa01 f202 	lsl.w	r2, r1, r2
 8003c92:	4013      	ands	r3, r2
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d1af      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c98:	1d3b      	adds	r3, r7, #4
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0308 	and.w	r3, r3, #8
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	f000 80da 	beq.w	8003e5c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ca8:	1d3b      	adds	r3, r7, #4
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d069      	beq.n	8003d86 <HAL_RCC_OscConfig+0x6da>
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cb8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003cbc:	fa93 f3a3 	rbit	r3, r3
 8003cc0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003cc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cc8:	fab3 f383 	clz	r3, r3
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	461a      	mov	r2, r3
 8003cd0:	4b0b      	ldr	r3, [pc, #44]	; (8003d00 <HAL_RCC_OscConfig+0x654>)
 8003cd2:	4413      	add	r3, r2
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	2301      	movs	r3, #1
 8003cda:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cdc:	f7fd fbbe 	bl	800145c <HAL_GetTick>
 8003ce0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ce4:	e00e      	b.n	8003d04 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ce6:	f7fd fbb9 	bl	800145c <HAL_GetTick>
 8003cea:	4602      	mov	r2, r0
 8003cec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d906      	bls.n	8003d04 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e3d9      	b.n	80044ae <HAL_RCC_OscConfig+0xe02>
 8003cfa:	bf00      	nop
 8003cfc:	40021000 	.word	0x40021000
 8003d00:	10908120 	.word	0x10908120
 8003d04:	2302      	movs	r3, #2
 8003d06:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d0a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003d0e:	fa93 f3a3 	rbit	r3, r3
 8003d12:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003d16:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003d1a:	2202      	movs	r2, #2
 8003d1c:	601a      	str	r2, [r3, #0]
 8003d1e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	fa93 f2a3 	rbit	r2, r3
 8003d28:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003d2c:	601a      	str	r2, [r3, #0]
 8003d2e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003d32:	2202      	movs	r2, #2
 8003d34:	601a      	str	r2, [r3, #0]
 8003d36:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	fa93 f2a3 	rbit	r2, r3
 8003d40:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003d44:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d46:	4ba5      	ldr	r3, [pc, #660]	; (8003fdc <HAL_RCC_OscConfig+0x930>)
 8003d48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d4a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003d4e:	2102      	movs	r1, #2
 8003d50:	6019      	str	r1, [r3, #0]
 8003d52:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	fa93 f1a3 	rbit	r1, r3
 8003d5c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003d60:	6019      	str	r1, [r3, #0]
  return result;
 8003d62:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	fab3 f383 	clz	r3, r3
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	f003 031f 	and.w	r3, r3, #31
 8003d78:	2101      	movs	r1, #1
 8003d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d7e:	4013      	ands	r3, r2
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d0b0      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x63a>
 8003d84:	e06a      	b.n	8003e5c <HAL_RCC_OscConfig+0x7b0>
 8003d86:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d8e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	fa93 f2a3 	rbit	r2, r3
 8003d98:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003d9c:	601a      	str	r2, [r3, #0]
  return result;
 8003d9e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003da2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003da4:	fab3 f383 	clz	r3, r3
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	461a      	mov	r2, r3
 8003dac:	4b8c      	ldr	r3, [pc, #560]	; (8003fe0 <HAL_RCC_OscConfig+0x934>)
 8003dae:	4413      	add	r3, r2
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	461a      	mov	r2, r3
 8003db4:	2300      	movs	r3, #0
 8003db6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003db8:	f7fd fb50 	bl	800145c <HAL_GetTick>
 8003dbc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dc0:	e009      	b.n	8003dd6 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dc2:	f7fd fb4b 	bl	800145c <HAL_GetTick>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e36b      	b.n	80044ae <HAL_RCC_OscConfig+0xe02>
 8003dd6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003dda:	2202      	movs	r2, #2
 8003ddc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dde:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	fa93 f2a3 	rbit	r2, r3
 8003de8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003dec:	601a      	str	r2, [r3, #0]
 8003dee:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003df2:	2202      	movs	r2, #2
 8003df4:	601a      	str	r2, [r3, #0]
 8003df6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	fa93 f2a3 	rbit	r2, r3
 8003e00:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003e04:	601a      	str	r2, [r3, #0]
 8003e06:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003e0a:	2202      	movs	r2, #2
 8003e0c:	601a      	str	r2, [r3, #0]
 8003e0e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	fa93 f2a3 	rbit	r2, r3
 8003e18:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003e1c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e1e:	4b6f      	ldr	r3, [pc, #444]	; (8003fdc <HAL_RCC_OscConfig+0x930>)
 8003e20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e22:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003e26:	2102      	movs	r1, #2
 8003e28:	6019      	str	r1, [r3, #0]
 8003e2a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	fa93 f1a3 	rbit	r1, r3
 8003e34:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003e38:	6019      	str	r1, [r3, #0]
  return result;
 8003e3a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	fab3 f383 	clz	r3, r3
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	f003 031f 	and.w	r3, r3, #31
 8003e50:	2101      	movs	r1, #1
 8003e52:	fa01 f303 	lsl.w	r3, r1, r3
 8003e56:	4013      	ands	r3, r2
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d1b2      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e5c:	1d3b      	adds	r3, r7, #4
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0304 	and.w	r3, r3, #4
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	f000 8158 	beq.w	800411c <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e72:	4b5a      	ldr	r3, [pc, #360]	; (8003fdc <HAL_RCC_OscConfig+0x930>)
 8003e74:	69db      	ldr	r3, [r3, #28]
 8003e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d112      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e7e:	4b57      	ldr	r3, [pc, #348]	; (8003fdc <HAL_RCC_OscConfig+0x930>)
 8003e80:	69db      	ldr	r3, [r3, #28]
 8003e82:	4a56      	ldr	r2, [pc, #344]	; (8003fdc <HAL_RCC_OscConfig+0x930>)
 8003e84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e88:	61d3      	str	r3, [r2, #28]
 8003e8a:	4b54      	ldr	r3, [pc, #336]	; (8003fdc <HAL_RCC_OscConfig+0x930>)
 8003e8c:	69db      	ldr	r3, [r3, #28]
 8003e8e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003e92:	f107 0308 	add.w	r3, r7, #8
 8003e96:	601a      	str	r2, [r3, #0]
 8003e98:	f107 0308 	add.w	r3, r7, #8
 8003e9c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ea4:	4b4f      	ldr	r3, [pc, #316]	; (8003fe4 <HAL_RCC_OscConfig+0x938>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d11a      	bne.n	8003ee6 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003eb0:	4b4c      	ldr	r3, [pc, #304]	; (8003fe4 <HAL_RCC_OscConfig+0x938>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a4b      	ldr	r2, [pc, #300]	; (8003fe4 <HAL_RCC_OscConfig+0x938>)
 8003eb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eba:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ebc:	f7fd face 	bl	800145c <HAL_GetTick>
 8003ec0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ec4:	e009      	b.n	8003eda <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ec6:	f7fd fac9 	bl	800145c <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	2b64      	cmp	r3, #100	; 0x64
 8003ed4:	d901      	bls.n	8003eda <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e2e9      	b.n	80044ae <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eda:	4b42      	ldr	r3, [pc, #264]	; (8003fe4 <HAL_RCC_OscConfig+0x938>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d0ef      	beq.n	8003ec6 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ee6:	1d3b      	adds	r3, r7, #4
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d106      	bne.n	8003efe <HAL_RCC_OscConfig+0x852>
 8003ef0:	4b3a      	ldr	r3, [pc, #232]	; (8003fdc <HAL_RCC_OscConfig+0x930>)
 8003ef2:	6a1b      	ldr	r3, [r3, #32]
 8003ef4:	4a39      	ldr	r2, [pc, #228]	; (8003fdc <HAL_RCC_OscConfig+0x930>)
 8003ef6:	f043 0301 	orr.w	r3, r3, #1
 8003efa:	6213      	str	r3, [r2, #32]
 8003efc:	e02f      	b.n	8003f5e <HAL_RCC_OscConfig+0x8b2>
 8003efe:	1d3b      	adds	r3, r7, #4
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d10c      	bne.n	8003f22 <HAL_RCC_OscConfig+0x876>
 8003f08:	4b34      	ldr	r3, [pc, #208]	; (8003fdc <HAL_RCC_OscConfig+0x930>)
 8003f0a:	6a1b      	ldr	r3, [r3, #32]
 8003f0c:	4a33      	ldr	r2, [pc, #204]	; (8003fdc <HAL_RCC_OscConfig+0x930>)
 8003f0e:	f023 0301 	bic.w	r3, r3, #1
 8003f12:	6213      	str	r3, [r2, #32]
 8003f14:	4b31      	ldr	r3, [pc, #196]	; (8003fdc <HAL_RCC_OscConfig+0x930>)
 8003f16:	6a1b      	ldr	r3, [r3, #32]
 8003f18:	4a30      	ldr	r2, [pc, #192]	; (8003fdc <HAL_RCC_OscConfig+0x930>)
 8003f1a:	f023 0304 	bic.w	r3, r3, #4
 8003f1e:	6213      	str	r3, [r2, #32]
 8003f20:	e01d      	b.n	8003f5e <HAL_RCC_OscConfig+0x8b2>
 8003f22:	1d3b      	adds	r3, r7, #4
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	2b05      	cmp	r3, #5
 8003f2a:	d10c      	bne.n	8003f46 <HAL_RCC_OscConfig+0x89a>
 8003f2c:	4b2b      	ldr	r3, [pc, #172]	; (8003fdc <HAL_RCC_OscConfig+0x930>)
 8003f2e:	6a1b      	ldr	r3, [r3, #32]
 8003f30:	4a2a      	ldr	r2, [pc, #168]	; (8003fdc <HAL_RCC_OscConfig+0x930>)
 8003f32:	f043 0304 	orr.w	r3, r3, #4
 8003f36:	6213      	str	r3, [r2, #32]
 8003f38:	4b28      	ldr	r3, [pc, #160]	; (8003fdc <HAL_RCC_OscConfig+0x930>)
 8003f3a:	6a1b      	ldr	r3, [r3, #32]
 8003f3c:	4a27      	ldr	r2, [pc, #156]	; (8003fdc <HAL_RCC_OscConfig+0x930>)
 8003f3e:	f043 0301 	orr.w	r3, r3, #1
 8003f42:	6213      	str	r3, [r2, #32]
 8003f44:	e00b      	b.n	8003f5e <HAL_RCC_OscConfig+0x8b2>
 8003f46:	4b25      	ldr	r3, [pc, #148]	; (8003fdc <HAL_RCC_OscConfig+0x930>)
 8003f48:	6a1b      	ldr	r3, [r3, #32]
 8003f4a:	4a24      	ldr	r2, [pc, #144]	; (8003fdc <HAL_RCC_OscConfig+0x930>)
 8003f4c:	f023 0301 	bic.w	r3, r3, #1
 8003f50:	6213      	str	r3, [r2, #32]
 8003f52:	4b22      	ldr	r3, [pc, #136]	; (8003fdc <HAL_RCC_OscConfig+0x930>)
 8003f54:	6a1b      	ldr	r3, [r3, #32]
 8003f56:	4a21      	ldr	r2, [pc, #132]	; (8003fdc <HAL_RCC_OscConfig+0x930>)
 8003f58:	f023 0304 	bic.w	r3, r3, #4
 8003f5c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f5e:	1d3b      	adds	r3, r7, #4
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d06b      	beq.n	8004040 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f68:	f7fd fa78 	bl	800145c <HAL_GetTick>
 8003f6c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f70:	e00b      	b.n	8003f8a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f72:	f7fd fa73 	bl	800145c <HAL_GetTick>
 8003f76:	4602      	mov	r2, r0
 8003f78:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d901      	bls.n	8003f8a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e291      	b.n	80044ae <HAL_RCC_OscConfig+0xe02>
 8003f8a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003f8e:	2202      	movs	r2, #2
 8003f90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f92:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	fa93 f2a3 	rbit	r2, r3
 8003f9c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003fa0:	601a      	str	r2, [r3, #0]
 8003fa2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003fa6:	2202      	movs	r2, #2
 8003fa8:	601a      	str	r2, [r3, #0]
 8003faa:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	fa93 f2a3 	rbit	r2, r3
 8003fb4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003fb8:	601a      	str	r2, [r3, #0]
  return result;
 8003fba:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003fbe:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fc0:	fab3 f383 	clz	r3, r3
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	095b      	lsrs	r3, r3, #5
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	f043 0302 	orr.w	r3, r3, #2
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d109      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x93c>
 8003fd4:	4b01      	ldr	r3, [pc, #4]	; (8003fdc <HAL_RCC_OscConfig+0x930>)
 8003fd6:	6a1b      	ldr	r3, [r3, #32]
 8003fd8:	e014      	b.n	8004004 <HAL_RCC_OscConfig+0x958>
 8003fda:	bf00      	nop
 8003fdc:	40021000 	.word	0x40021000
 8003fe0:	10908120 	.word	0x10908120
 8003fe4:	40007000 	.word	0x40007000
 8003fe8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003fec:	2202      	movs	r2, #2
 8003fee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ff0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	fa93 f2a3 	rbit	r2, r3
 8003ffa:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003ffe:	601a      	str	r2, [r3, #0]
 8004000:	4bbb      	ldr	r3, [pc, #748]	; (80042f0 <HAL_RCC_OscConfig+0xc44>)
 8004002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004004:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004008:	2102      	movs	r1, #2
 800400a:	6011      	str	r1, [r2, #0]
 800400c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004010:	6812      	ldr	r2, [r2, #0]
 8004012:	fa92 f1a2 	rbit	r1, r2
 8004016:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800401a:	6011      	str	r1, [r2, #0]
  return result;
 800401c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8004020:	6812      	ldr	r2, [r2, #0]
 8004022:	fab2 f282 	clz	r2, r2
 8004026:	b2d2      	uxtb	r2, r2
 8004028:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800402c:	b2d2      	uxtb	r2, r2
 800402e:	f002 021f 	and.w	r2, r2, #31
 8004032:	2101      	movs	r1, #1
 8004034:	fa01 f202 	lsl.w	r2, r1, r2
 8004038:	4013      	ands	r3, r2
 800403a:	2b00      	cmp	r3, #0
 800403c:	d099      	beq.n	8003f72 <HAL_RCC_OscConfig+0x8c6>
 800403e:	e063      	b.n	8004108 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004040:	f7fd fa0c 	bl	800145c <HAL_GetTick>
 8004044:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004048:	e00b      	b.n	8004062 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800404a:	f7fd fa07 	bl	800145c <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	f241 3288 	movw	r2, #5000	; 0x1388
 800405a:	4293      	cmp	r3, r2
 800405c:	d901      	bls.n	8004062 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e225      	b.n	80044ae <HAL_RCC_OscConfig+0xe02>
 8004062:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004066:	2202      	movs	r2, #2
 8004068:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800406a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	fa93 f2a3 	rbit	r2, r3
 8004074:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004078:	601a      	str	r2, [r3, #0]
 800407a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800407e:	2202      	movs	r2, #2
 8004080:	601a      	str	r2, [r3, #0]
 8004082:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	fa93 f2a3 	rbit	r2, r3
 800408c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004090:	601a      	str	r2, [r3, #0]
  return result;
 8004092:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004096:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004098:	fab3 f383 	clz	r3, r3
 800409c:	b2db      	uxtb	r3, r3
 800409e:	095b      	lsrs	r3, r3, #5
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	f043 0302 	orr.w	r3, r3, #2
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d102      	bne.n	80040b2 <HAL_RCC_OscConfig+0xa06>
 80040ac:	4b90      	ldr	r3, [pc, #576]	; (80042f0 <HAL_RCC_OscConfig+0xc44>)
 80040ae:	6a1b      	ldr	r3, [r3, #32]
 80040b0:	e00d      	b.n	80040ce <HAL_RCC_OscConfig+0xa22>
 80040b2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80040b6:	2202      	movs	r2, #2
 80040b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ba:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	fa93 f2a3 	rbit	r2, r3
 80040c4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80040c8:	601a      	str	r2, [r3, #0]
 80040ca:	4b89      	ldr	r3, [pc, #548]	; (80042f0 <HAL_RCC_OscConfig+0xc44>)
 80040cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ce:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80040d2:	2102      	movs	r1, #2
 80040d4:	6011      	str	r1, [r2, #0]
 80040d6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80040da:	6812      	ldr	r2, [r2, #0]
 80040dc:	fa92 f1a2 	rbit	r1, r2
 80040e0:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80040e4:	6011      	str	r1, [r2, #0]
  return result;
 80040e6:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80040ea:	6812      	ldr	r2, [r2, #0]
 80040ec:	fab2 f282 	clz	r2, r2
 80040f0:	b2d2      	uxtb	r2, r2
 80040f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040f6:	b2d2      	uxtb	r2, r2
 80040f8:	f002 021f 	and.w	r2, r2, #31
 80040fc:	2101      	movs	r1, #1
 80040fe:	fa01 f202 	lsl.w	r2, r1, r2
 8004102:	4013      	ands	r3, r2
 8004104:	2b00      	cmp	r3, #0
 8004106:	d1a0      	bne.n	800404a <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004108:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800410c:	2b01      	cmp	r3, #1
 800410e:	d105      	bne.n	800411c <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004110:	4b77      	ldr	r3, [pc, #476]	; (80042f0 <HAL_RCC_OscConfig+0xc44>)
 8004112:	69db      	ldr	r3, [r3, #28]
 8004114:	4a76      	ldr	r2, [pc, #472]	; (80042f0 <HAL_RCC_OscConfig+0xc44>)
 8004116:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800411a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800411c:	1d3b      	adds	r3, r7, #4
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	69db      	ldr	r3, [r3, #28]
 8004122:	2b00      	cmp	r3, #0
 8004124:	f000 81c2 	beq.w	80044ac <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004128:	4b71      	ldr	r3, [pc, #452]	; (80042f0 <HAL_RCC_OscConfig+0xc44>)
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f003 030c 	and.w	r3, r3, #12
 8004130:	2b08      	cmp	r3, #8
 8004132:	f000 819c 	beq.w	800446e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004136:	1d3b      	adds	r3, r7, #4
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	69db      	ldr	r3, [r3, #28]
 800413c:	2b02      	cmp	r3, #2
 800413e:	f040 8114 	bne.w	800436a <HAL_RCC_OscConfig+0xcbe>
 8004142:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004146:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800414a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800414c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	fa93 f2a3 	rbit	r2, r3
 8004156:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800415a:	601a      	str	r2, [r3, #0]
  return result;
 800415c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004160:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004162:	fab3 f383 	clz	r3, r3
 8004166:	b2db      	uxtb	r3, r3
 8004168:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800416c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	461a      	mov	r2, r3
 8004174:	2300      	movs	r3, #0
 8004176:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004178:	f7fd f970 	bl	800145c <HAL_GetTick>
 800417c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004180:	e009      	b.n	8004196 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004182:	f7fd f96b 	bl	800145c <HAL_GetTick>
 8004186:	4602      	mov	r2, r0
 8004188:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	2b02      	cmp	r3, #2
 8004190:	d901      	bls.n	8004196 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e18b      	b.n	80044ae <HAL_RCC_OscConfig+0xe02>
 8004196:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800419a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800419e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	fa93 f2a3 	rbit	r2, r3
 80041aa:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80041ae:	601a      	str	r2, [r3, #0]
  return result;
 80041b0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80041b4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041b6:	fab3 f383 	clz	r3, r3
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	095b      	lsrs	r3, r3, #5
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	f043 0301 	orr.w	r3, r3, #1
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d102      	bne.n	80041d0 <HAL_RCC_OscConfig+0xb24>
 80041ca:	4b49      	ldr	r3, [pc, #292]	; (80042f0 <HAL_RCC_OscConfig+0xc44>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	e01b      	b.n	8004208 <HAL_RCC_OscConfig+0xb5c>
 80041d0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80041d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80041d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041da:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	fa93 f2a3 	rbit	r2, r3
 80041e4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80041e8:	601a      	str	r2, [r3, #0]
 80041ea:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80041ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80041f2:	601a      	str	r2, [r3, #0]
 80041f4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	fa93 f2a3 	rbit	r2, r3
 80041fe:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004202:	601a      	str	r2, [r3, #0]
 8004204:	4b3a      	ldr	r3, [pc, #232]	; (80042f0 <HAL_RCC_OscConfig+0xc44>)
 8004206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004208:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800420c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004210:	6011      	str	r1, [r2, #0]
 8004212:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004216:	6812      	ldr	r2, [r2, #0]
 8004218:	fa92 f1a2 	rbit	r1, r2
 800421c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8004220:	6011      	str	r1, [r2, #0]
  return result;
 8004222:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8004226:	6812      	ldr	r2, [r2, #0]
 8004228:	fab2 f282 	clz	r2, r2
 800422c:	b2d2      	uxtb	r2, r2
 800422e:	f042 0220 	orr.w	r2, r2, #32
 8004232:	b2d2      	uxtb	r2, r2
 8004234:	f002 021f 	and.w	r2, r2, #31
 8004238:	2101      	movs	r1, #1
 800423a:	fa01 f202 	lsl.w	r2, r1, r2
 800423e:	4013      	ands	r3, r2
 8004240:	2b00      	cmp	r3, #0
 8004242:	d19e      	bne.n	8004182 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004244:	4b2a      	ldr	r3, [pc, #168]	; (80042f0 <HAL_RCC_OscConfig+0xc44>)
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800424c:	1d3b      	adds	r3, r7, #4
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004252:	1d3b      	adds	r3, r7, #4
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	6a1b      	ldr	r3, [r3, #32]
 8004258:	430b      	orrs	r3, r1
 800425a:	4925      	ldr	r1, [pc, #148]	; (80042f0 <HAL_RCC_OscConfig+0xc44>)
 800425c:	4313      	orrs	r3, r2
 800425e:	604b      	str	r3, [r1, #4]
 8004260:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004264:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004268:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800426a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	fa93 f2a3 	rbit	r2, r3
 8004274:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004278:	601a      	str	r2, [r3, #0]
  return result;
 800427a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800427e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004280:	fab3 f383 	clz	r3, r3
 8004284:	b2db      	uxtb	r3, r3
 8004286:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800428a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	461a      	mov	r2, r3
 8004292:	2301      	movs	r3, #1
 8004294:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004296:	f7fd f8e1 	bl	800145c <HAL_GetTick>
 800429a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800429e:	e009      	b.n	80042b4 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042a0:	f7fd f8dc 	bl	800145c <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d901      	bls.n	80042b4 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	e0fc      	b.n	80044ae <HAL_RCC_OscConfig+0xe02>
 80042b4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80042b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80042bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042be:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	fa93 f2a3 	rbit	r2, r3
 80042c8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80042cc:	601a      	str	r2, [r3, #0]
  return result;
 80042ce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80042d2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80042d4:	fab3 f383 	clz	r3, r3
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	095b      	lsrs	r3, r3, #5
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	f043 0301 	orr.w	r3, r3, #1
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d105      	bne.n	80042f4 <HAL_RCC_OscConfig+0xc48>
 80042e8:	4b01      	ldr	r3, [pc, #4]	; (80042f0 <HAL_RCC_OscConfig+0xc44>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	e01e      	b.n	800432c <HAL_RCC_OscConfig+0xc80>
 80042ee:	bf00      	nop
 80042f0:	40021000 	.word	0x40021000
 80042f4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80042f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80042fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042fe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	fa93 f2a3 	rbit	r2, r3
 8004308:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800430c:	601a      	str	r2, [r3, #0]
 800430e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004312:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004316:	601a      	str	r2, [r3, #0]
 8004318:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	fa93 f2a3 	rbit	r2, r3
 8004322:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004326:	601a      	str	r2, [r3, #0]
 8004328:	4b63      	ldr	r3, [pc, #396]	; (80044b8 <HAL_RCC_OscConfig+0xe0c>)
 800432a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004330:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004334:	6011      	str	r1, [r2, #0]
 8004336:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800433a:	6812      	ldr	r2, [r2, #0]
 800433c:	fa92 f1a2 	rbit	r1, r2
 8004340:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004344:	6011      	str	r1, [r2, #0]
  return result;
 8004346:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800434a:	6812      	ldr	r2, [r2, #0]
 800434c:	fab2 f282 	clz	r2, r2
 8004350:	b2d2      	uxtb	r2, r2
 8004352:	f042 0220 	orr.w	r2, r2, #32
 8004356:	b2d2      	uxtb	r2, r2
 8004358:	f002 021f 	and.w	r2, r2, #31
 800435c:	2101      	movs	r1, #1
 800435e:	fa01 f202 	lsl.w	r2, r1, r2
 8004362:	4013      	ands	r3, r2
 8004364:	2b00      	cmp	r3, #0
 8004366:	d09b      	beq.n	80042a0 <HAL_RCC_OscConfig+0xbf4>
 8004368:	e0a0      	b.n	80044ac <HAL_RCC_OscConfig+0xe00>
 800436a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800436e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004372:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004374:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	fa93 f2a3 	rbit	r2, r3
 800437e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004382:	601a      	str	r2, [r3, #0]
  return result;
 8004384:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004388:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800438a:	fab3 f383 	clz	r3, r3
 800438e:	b2db      	uxtb	r3, r3
 8004390:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004394:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	461a      	mov	r2, r3
 800439c:	2300      	movs	r3, #0
 800439e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043a0:	f7fd f85c 	bl	800145c <HAL_GetTick>
 80043a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043a8:	e009      	b.n	80043be <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043aa:	f7fd f857 	bl	800145c <HAL_GetTick>
 80043ae:	4602      	mov	r2, r0
 80043b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d901      	bls.n	80043be <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e077      	b.n	80044ae <HAL_RCC_OscConfig+0xe02>
 80043be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80043c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80043c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	fa93 f2a3 	rbit	r2, r3
 80043d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043d6:	601a      	str	r2, [r3, #0]
  return result;
 80043d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043dc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043de:	fab3 f383 	clz	r3, r3
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	095b      	lsrs	r3, r3, #5
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	f043 0301 	orr.w	r3, r3, #1
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d102      	bne.n	80043f8 <HAL_RCC_OscConfig+0xd4c>
 80043f2:	4b31      	ldr	r3, [pc, #196]	; (80044b8 <HAL_RCC_OscConfig+0xe0c>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	e01b      	b.n	8004430 <HAL_RCC_OscConfig+0xd84>
 80043f8:	f107 0320 	add.w	r3, r7, #32
 80043fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004400:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004402:	f107 0320 	add.w	r3, r7, #32
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	fa93 f2a3 	rbit	r2, r3
 800440c:	f107 031c 	add.w	r3, r7, #28
 8004410:	601a      	str	r2, [r3, #0]
 8004412:	f107 0318 	add.w	r3, r7, #24
 8004416:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800441a:	601a      	str	r2, [r3, #0]
 800441c:	f107 0318 	add.w	r3, r7, #24
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	fa93 f2a3 	rbit	r2, r3
 8004426:	f107 0314 	add.w	r3, r7, #20
 800442a:	601a      	str	r2, [r3, #0]
 800442c:	4b22      	ldr	r3, [pc, #136]	; (80044b8 <HAL_RCC_OscConfig+0xe0c>)
 800442e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004430:	f107 0210 	add.w	r2, r7, #16
 8004434:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004438:	6011      	str	r1, [r2, #0]
 800443a:	f107 0210 	add.w	r2, r7, #16
 800443e:	6812      	ldr	r2, [r2, #0]
 8004440:	fa92 f1a2 	rbit	r1, r2
 8004444:	f107 020c 	add.w	r2, r7, #12
 8004448:	6011      	str	r1, [r2, #0]
  return result;
 800444a:	f107 020c 	add.w	r2, r7, #12
 800444e:	6812      	ldr	r2, [r2, #0]
 8004450:	fab2 f282 	clz	r2, r2
 8004454:	b2d2      	uxtb	r2, r2
 8004456:	f042 0220 	orr.w	r2, r2, #32
 800445a:	b2d2      	uxtb	r2, r2
 800445c:	f002 021f 	and.w	r2, r2, #31
 8004460:	2101      	movs	r1, #1
 8004462:	fa01 f202 	lsl.w	r2, r1, r2
 8004466:	4013      	ands	r3, r2
 8004468:	2b00      	cmp	r3, #0
 800446a:	d19e      	bne.n	80043aa <HAL_RCC_OscConfig+0xcfe>
 800446c:	e01e      	b.n	80044ac <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800446e:	1d3b      	adds	r3, r7, #4
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	69db      	ldr	r3, [r3, #28]
 8004474:	2b01      	cmp	r3, #1
 8004476:	d101      	bne.n	800447c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e018      	b.n	80044ae <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800447c:	4b0e      	ldr	r3, [pc, #56]	; (80044b8 <HAL_RCC_OscConfig+0xe0c>)
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004484:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004488:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800448c:	1d3b      	adds	r3, r7, #4
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	6a1b      	ldr	r3, [r3, #32]
 8004492:	429a      	cmp	r2, r3
 8004494:	d108      	bne.n	80044a8 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004496:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800449a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800449e:	1d3b      	adds	r3, r7, #4
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d001      	beq.n	80044ac <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e000      	b.n	80044ae <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	40021000 	.word	0x40021000

080044bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b09e      	sub	sp, #120	; 0x78
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80044c6:	2300      	movs	r3, #0
 80044c8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d101      	bne.n	80044d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e162      	b.n	800479a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044d4:	4b90      	ldr	r3, [pc, #576]	; (8004718 <HAL_RCC_ClockConfig+0x25c>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0307 	and.w	r3, r3, #7
 80044dc:	683a      	ldr	r2, [r7, #0]
 80044de:	429a      	cmp	r2, r3
 80044e0:	d910      	bls.n	8004504 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044e2:	4b8d      	ldr	r3, [pc, #564]	; (8004718 <HAL_RCC_ClockConfig+0x25c>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f023 0207 	bic.w	r2, r3, #7
 80044ea:	498b      	ldr	r1, [pc, #556]	; (8004718 <HAL_RCC_ClockConfig+0x25c>)
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044f2:	4b89      	ldr	r3, [pc, #548]	; (8004718 <HAL_RCC_ClockConfig+0x25c>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0307 	and.w	r3, r3, #7
 80044fa:	683a      	ldr	r2, [r7, #0]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d001      	beq.n	8004504 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e14a      	b.n	800479a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0302 	and.w	r3, r3, #2
 800450c:	2b00      	cmp	r3, #0
 800450e:	d008      	beq.n	8004522 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004510:	4b82      	ldr	r3, [pc, #520]	; (800471c <HAL_RCC_ClockConfig+0x260>)
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	497f      	ldr	r1, [pc, #508]	; (800471c <HAL_RCC_ClockConfig+0x260>)
 800451e:	4313      	orrs	r3, r2
 8004520:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0301 	and.w	r3, r3, #1
 800452a:	2b00      	cmp	r3, #0
 800452c:	f000 80dc 	beq.w	80046e8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	2b01      	cmp	r3, #1
 8004536:	d13c      	bne.n	80045b2 <HAL_RCC_ClockConfig+0xf6>
 8004538:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800453c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800453e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004540:	fa93 f3a3 	rbit	r3, r3
 8004544:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004546:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004548:	fab3 f383 	clz	r3, r3
 800454c:	b2db      	uxtb	r3, r3
 800454e:	095b      	lsrs	r3, r3, #5
 8004550:	b2db      	uxtb	r3, r3
 8004552:	f043 0301 	orr.w	r3, r3, #1
 8004556:	b2db      	uxtb	r3, r3
 8004558:	2b01      	cmp	r3, #1
 800455a:	d102      	bne.n	8004562 <HAL_RCC_ClockConfig+0xa6>
 800455c:	4b6f      	ldr	r3, [pc, #444]	; (800471c <HAL_RCC_ClockConfig+0x260>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	e00f      	b.n	8004582 <HAL_RCC_ClockConfig+0xc6>
 8004562:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004566:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004568:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800456a:	fa93 f3a3 	rbit	r3, r3
 800456e:	667b      	str	r3, [r7, #100]	; 0x64
 8004570:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004574:	663b      	str	r3, [r7, #96]	; 0x60
 8004576:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004578:	fa93 f3a3 	rbit	r3, r3
 800457c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800457e:	4b67      	ldr	r3, [pc, #412]	; (800471c <HAL_RCC_ClockConfig+0x260>)
 8004580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004582:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004586:	65ba      	str	r2, [r7, #88]	; 0x58
 8004588:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800458a:	fa92 f2a2 	rbit	r2, r2
 800458e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004590:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004592:	fab2 f282 	clz	r2, r2
 8004596:	b2d2      	uxtb	r2, r2
 8004598:	f042 0220 	orr.w	r2, r2, #32
 800459c:	b2d2      	uxtb	r2, r2
 800459e:	f002 021f 	and.w	r2, r2, #31
 80045a2:	2101      	movs	r1, #1
 80045a4:	fa01 f202 	lsl.w	r2, r1, r2
 80045a8:	4013      	ands	r3, r2
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d17b      	bne.n	80046a6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e0f3      	b.n	800479a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d13c      	bne.n	8004634 <HAL_RCC_ClockConfig+0x178>
 80045ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045be:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045c2:	fa93 f3a3 	rbit	r3, r3
 80045c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80045c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045ca:	fab3 f383 	clz	r3, r3
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	095b      	lsrs	r3, r3, #5
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	f043 0301 	orr.w	r3, r3, #1
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d102      	bne.n	80045e4 <HAL_RCC_ClockConfig+0x128>
 80045de:	4b4f      	ldr	r3, [pc, #316]	; (800471c <HAL_RCC_ClockConfig+0x260>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	e00f      	b.n	8004604 <HAL_RCC_ClockConfig+0x148>
 80045e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045e8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045ec:	fa93 f3a3 	rbit	r3, r3
 80045f0:	647b      	str	r3, [r7, #68]	; 0x44
 80045f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045f6:	643b      	str	r3, [r7, #64]	; 0x40
 80045f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045fa:	fa93 f3a3 	rbit	r3, r3
 80045fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004600:	4b46      	ldr	r3, [pc, #280]	; (800471c <HAL_RCC_ClockConfig+0x260>)
 8004602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004604:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004608:	63ba      	str	r2, [r7, #56]	; 0x38
 800460a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800460c:	fa92 f2a2 	rbit	r2, r2
 8004610:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004612:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004614:	fab2 f282 	clz	r2, r2
 8004618:	b2d2      	uxtb	r2, r2
 800461a:	f042 0220 	orr.w	r2, r2, #32
 800461e:	b2d2      	uxtb	r2, r2
 8004620:	f002 021f 	and.w	r2, r2, #31
 8004624:	2101      	movs	r1, #1
 8004626:	fa01 f202 	lsl.w	r2, r1, r2
 800462a:	4013      	ands	r3, r2
 800462c:	2b00      	cmp	r3, #0
 800462e:	d13a      	bne.n	80046a6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e0b2      	b.n	800479a <HAL_RCC_ClockConfig+0x2de>
 8004634:	2302      	movs	r3, #2
 8004636:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800463a:	fa93 f3a3 	rbit	r3, r3
 800463e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004642:	fab3 f383 	clz	r3, r3
 8004646:	b2db      	uxtb	r3, r3
 8004648:	095b      	lsrs	r3, r3, #5
 800464a:	b2db      	uxtb	r3, r3
 800464c:	f043 0301 	orr.w	r3, r3, #1
 8004650:	b2db      	uxtb	r3, r3
 8004652:	2b01      	cmp	r3, #1
 8004654:	d102      	bne.n	800465c <HAL_RCC_ClockConfig+0x1a0>
 8004656:	4b31      	ldr	r3, [pc, #196]	; (800471c <HAL_RCC_ClockConfig+0x260>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	e00d      	b.n	8004678 <HAL_RCC_ClockConfig+0x1bc>
 800465c:	2302      	movs	r3, #2
 800465e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004662:	fa93 f3a3 	rbit	r3, r3
 8004666:	627b      	str	r3, [r7, #36]	; 0x24
 8004668:	2302      	movs	r3, #2
 800466a:	623b      	str	r3, [r7, #32]
 800466c:	6a3b      	ldr	r3, [r7, #32]
 800466e:	fa93 f3a3 	rbit	r3, r3
 8004672:	61fb      	str	r3, [r7, #28]
 8004674:	4b29      	ldr	r3, [pc, #164]	; (800471c <HAL_RCC_ClockConfig+0x260>)
 8004676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004678:	2202      	movs	r2, #2
 800467a:	61ba      	str	r2, [r7, #24]
 800467c:	69ba      	ldr	r2, [r7, #24]
 800467e:	fa92 f2a2 	rbit	r2, r2
 8004682:	617a      	str	r2, [r7, #20]
  return result;
 8004684:	697a      	ldr	r2, [r7, #20]
 8004686:	fab2 f282 	clz	r2, r2
 800468a:	b2d2      	uxtb	r2, r2
 800468c:	f042 0220 	orr.w	r2, r2, #32
 8004690:	b2d2      	uxtb	r2, r2
 8004692:	f002 021f 	and.w	r2, r2, #31
 8004696:	2101      	movs	r1, #1
 8004698:	fa01 f202 	lsl.w	r2, r1, r2
 800469c:	4013      	ands	r3, r2
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d101      	bne.n	80046a6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e079      	b.n	800479a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046a6:	4b1d      	ldr	r3, [pc, #116]	; (800471c <HAL_RCC_ClockConfig+0x260>)
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	f023 0203 	bic.w	r2, r3, #3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	491a      	ldr	r1, [pc, #104]	; (800471c <HAL_RCC_ClockConfig+0x260>)
 80046b4:	4313      	orrs	r3, r2
 80046b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046b8:	f7fc fed0 	bl	800145c <HAL_GetTick>
 80046bc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046be:	e00a      	b.n	80046d6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046c0:	f7fc fecc 	bl	800145c <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d901      	bls.n	80046d6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e061      	b.n	800479a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046d6:	4b11      	ldr	r3, [pc, #68]	; (800471c <HAL_RCC_ClockConfig+0x260>)
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	f003 020c 	and.w	r2, r3, #12
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d1eb      	bne.n	80046c0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046e8:	4b0b      	ldr	r3, [pc, #44]	; (8004718 <HAL_RCC_ClockConfig+0x25c>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0307 	and.w	r3, r3, #7
 80046f0:	683a      	ldr	r2, [r7, #0]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d214      	bcs.n	8004720 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046f6:	4b08      	ldr	r3, [pc, #32]	; (8004718 <HAL_RCC_ClockConfig+0x25c>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f023 0207 	bic.w	r2, r3, #7
 80046fe:	4906      	ldr	r1, [pc, #24]	; (8004718 <HAL_RCC_ClockConfig+0x25c>)
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	4313      	orrs	r3, r2
 8004704:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004706:	4b04      	ldr	r3, [pc, #16]	; (8004718 <HAL_RCC_ClockConfig+0x25c>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0307 	and.w	r3, r3, #7
 800470e:	683a      	ldr	r2, [r7, #0]
 8004710:	429a      	cmp	r2, r3
 8004712:	d005      	beq.n	8004720 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e040      	b.n	800479a <HAL_RCC_ClockConfig+0x2de>
 8004718:	40022000 	.word	0x40022000
 800471c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 0304 	and.w	r3, r3, #4
 8004728:	2b00      	cmp	r3, #0
 800472a:	d008      	beq.n	800473e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800472c:	4b1d      	ldr	r3, [pc, #116]	; (80047a4 <HAL_RCC_ClockConfig+0x2e8>)
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	491a      	ldr	r1, [pc, #104]	; (80047a4 <HAL_RCC_ClockConfig+0x2e8>)
 800473a:	4313      	orrs	r3, r2
 800473c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0308 	and.w	r3, r3, #8
 8004746:	2b00      	cmp	r3, #0
 8004748:	d009      	beq.n	800475e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800474a:	4b16      	ldr	r3, [pc, #88]	; (80047a4 <HAL_RCC_ClockConfig+0x2e8>)
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	00db      	lsls	r3, r3, #3
 8004758:	4912      	ldr	r1, [pc, #72]	; (80047a4 <HAL_RCC_ClockConfig+0x2e8>)
 800475a:	4313      	orrs	r3, r2
 800475c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800475e:	f000 f829 	bl	80047b4 <HAL_RCC_GetSysClockFreq>
 8004762:	4601      	mov	r1, r0
 8004764:	4b0f      	ldr	r3, [pc, #60]	; (80047a4 <HAL_RCC_ClockConfig+0x2e8>)
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800476c:	22f0      	movs	r2, #240	; 0xf0
 800476e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004770:	693a      	ldr	r2, [r7, #16]
 8004772:	fa92 f2a2 	rbit	r2, r2
 8004776:	60fa      	str	r2, [r7, #12]
  return result;
 8004778:	68fa      	ldr	r2, [r7, #12]
 800477a:	fab2 f282 	clz	r2, r2
 800477e:	b2d2      	uxtb	r2, r2
 8004780:	40d3      	lsrs	r3, r2
 8004782:	4a09      	ldr	r2, [pc, #36]	; (80047a8 <HAL_RCC_ClockConfig+0x2ec>)
 8004784:	5cd3      	ldrb	r3, [r2, r3]
 8004786:	fa21 f303 	lsr.w	r3, r1, r3
 800478a:	4a08      	ldr	r2, [pc, #32]	; (80047ac <HAL_RCC_ClockConfig+0x2f0>)
 800478c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800478e:	4b08      	ldr	r3, [pc, #32]	; (80047b0 <HAL_RCC_ClockConfig+0x2f4>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4618      	mov	r0, r3
 8004794:	f7fc fe1e 	bl	80013d4 <HAL_InitTick>
  
  return HAL_OK;
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	3778      	adds	r7, #120	; 0x78
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	40021000 	.word	0x40021000
 80047a8:	0800a084 	.word	0x0800a084
 80047ac:	20000000 	.word	0x20000000
 80047b0:	20000004 	.word	0x20000004

080047b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b08b      	sub	sp, #44	; 0x2c
 80047b8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80047ba:	2300      	movs	r3, #0
 80047bc:	61fb      	str	r3, [r7, #28]
 80047be:	2300      	movs	r3, #0
 80047c0:	61bb      	str	r3, [r7, #24]
 80047c2:	2300      	movs	r3, #0
 80047c4:	627b      	str	r3, [r7, #36]	; 0x24
 80047c6:	2300      	movs	r3, #0
 80047c8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80047ca:	2300      	movs	r3, #0
 80047cc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80047ce:	4b29      	ldr	r3, [pc, #164]	; (8004874 <HAL_RCC_GetSysClockFreq+0xc0>)
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	f003 030c 	and.w	r3, r3, #12
 80047da:	2b04      	cmp	r3, #4
 80047dc:	d002      	beq.n	80047e4 <HAL_RCC_GetSysClockFreq+0x30>
 80047de:	2b08      	cmp	r3, #8
 80047e0:	d003      	beq.n	80047ea <HAL_RCC_GetSysClockFreq+0x36>
 80047e2:	e03c      	b.n	800485e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80047e4:	4b24      	ldr	r3, [pc, #144]	; (8004878 <HAL_RCC_GetSysClockFreq+0xc4>)
 80047e6:	623b      	str	r3, [r7, #32]
      break;
 80047e8:	e03c      	b.n	8004864 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80047f0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80047f4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047f6:	68ba      	ldr	r2, [r7, #8]
 80047f8:	fa92 f2a2 	rbit	r2, r2
 80047fc:	607a      	str	r2, [r7, #4]
  return result;
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	fab2 f282 	clz	r2, r2
 8004804:	b2d2      	uxtb	r2, r2
 8004806:	40d3      	lsrs	r3, r2
 8004808:	4a1c      	ldr	r2, [pc, #112]	; (800487c <HAL_RCC_GetSysClockFreq+0xc8>)
 800480a:	5cd3      	ldrb	r3, [r2, r3]
 800480c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800480e:	4b19      	ldr	r3, [pc, #100]	; (8004874 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004812:	f003 030f 	and.w	r3, r3, #15
 8004816:	220f      	movs	r2, #15
 8004818:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800481a:	693a      	ldr	r2, [r7, #16]
 800481c:	fa92 f2a2 	rbit	r2, r2
 8004820:	60fa      	str	r2, [r7, #12]
  return result;
 8004822:	68fa      	ldr	r2, [r7, #12]
 8004824:	fab2 f282 	clz	r2, r2
 8004828:	b2d2      	uxtb	r2, r2
 800482a:	40d3      	lsrs	r3, r2
 800482c:	4a14      	ldr	r2, [pc, #80]	; (8004880 <HAL_RCC_GetSysClockFreq+0xcc>)
 800482e:	5cd3      	ldrb	r3, [r2, r3]
 8004830:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004838:	2b00      	cmp	r3, #0
 800483a:	d008      	beq.n	800484e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800483c:	4a0e      	ldr	r2, [pc, #56]	; (8004878 <HAL_RCC_GetSysClockFreq+0xc4>)
 800483e:	69bb      	ldr	r3, [r7, #24]
 8004840:	fbb2 f2f3 	udiv	r2, r2, r3
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	fb02 f303 	mul.w	r3, r2, r3
 800484a:	627b      	str	r3, [r7, #36]	; 0x24
 800484c:	e004      	b.n	8004858 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	4a0c      	ldr	r2, [pc, #48]	; (8004884 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004852:	fb02 f303 	mul.w	r3, r2, r3
 8004856:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485a:	623b      	str	r3, [r7, #32]
      break;
 800485c:	e002      	b.n	8004864 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800485e:	4b06      	ldr	r3, [pc, #24]	; (8004878 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004860:	623b      	str	r3, [r7, #32]
      break;
 8004862:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004864:	6a3b      	ldr	r3, [r7, #32]
}
 8004866:	4618      	mov	r0, r3
 8004868:	372c      	adds	r7, #44	; 0x2c
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr
 8004872:	bf00      	nop
 8004874:	40021000 	.word	0x40021000
 8004878:	007a1200 	.word	0x007a1200
 800487c:	0800a09c 	.word	0x0800a09c
 8004880:	0800a0ac 	.word	0x0800a0ac
 8004884:	003d0900 	.word	0x003d0900

08004888 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004888:	b480      	push	{r7}
 800488a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800488c:	4b03      	ldr	r3, [pc, #12]	; (800489c <HAL_RCC_GetHCLKFreq+0x14>)
 800488e:	681b      	ldr	r3, [r3, #0]
}
 8004890:	4618      	mov	r0, r3
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr
 800489a:	bf00      	nop
 800489c:	20000000 	.word	0x20000000

080048a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80048a6:	f7ff ffef 	bl	8004888 <HAL_RCC_GetHCLKFreq>
 80048aa:	4601      	mov	r1, r0
 80048ac:	4b0b      	ldr	r3, [pc, #44]	; (80048dc <HAL_RCC_GetPCLK1Freq+0x3c>)
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80048b4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80048b8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	fa92 f2a2 	rbit	r2, r2
 80048c0:	603a      	str	r2, [r7, #0]
  return result;
 80048c2:	683a      	ldr	r2, [r7, #0]
 80048c4:	fab2 f282 	clz	r2, r2
 80048c8:	b2d2      	uxtb	r2, r2
 80048ca:	40d3      	lsrs	r3, r2
 80048cc:	4a04      	ldr	r2, [pc, #16]	; (80048e0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80048ce:	5cd3      	ldrb	r3, [r2, r3]
 80048d0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80048d4:	4618      	mov	r0, r3
 80048d6:	3708      	adds	r7, #8
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	40021000 	.word	0x40021000
 80048e0:	0800a094 	.word	0x0800a094

080048e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b082      	sub	sp, #8
 80048e8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80048ea:	f7ff ffcd 	bl	8004888 <HAL_RCC_GetHCLKFreq>
 80048ee:	4601      	mov	r1, r0
 80048f0:	4b0b      	ldr	r3, [pc, #44]	; (8004920 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80048f8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80048fc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	fa92 f2a2 	rbit	r2, r2
 8004904:	603a      	str	r2, [r7, #0]
  return result;
 8004906:	683a      	ldr	r2, [r7, #0]
 8004908:	fab2 f282 	clz	r2, r2
 800490c:	b2d2      	uxtb	r2, r2
 800490e:	40d3      	lsrs	r3, r2
 8004910:	4a04      	ldr	r2, [pc, #16]	; (8004924 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004912:	5cd3      	ldrb	r3, [r2, r3]
 8004914:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004918:	4618      	mov	r0, r3
 800491a:	3708      	adds	r7, #8
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}
 8004920:	40021000 	.word	0x40021000
 8004924:	0800a094 	.word	0x0800a094

08004928 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b092      	sub	sp, #72	; 0x48
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004930:	2300      	movs	r3, #0
 8004932:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004934:	2300      	movs	r3, #0
 8004936:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004940:	2b00      	cmp	r3, #0
 8004942:	f000 80d7 	beq.w	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004946:	2300      	movs	r3, #0
 8004948:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800494c:	4b4e      	ldr	r3, [pc, #312]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800494e:	69db      	ldr	r3, [r3, #28]
 8004950:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004954:	2b00      	cmp	r3, #0
 8004956:	d10e      	bne.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004958:	4b4b      	ldr	r3, [pc, #300]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800495a:	69db      	ldr	r3, [r3, #28]
 800495c:	4a4a      	ldr	r2, [pc, #296]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800495e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004962:	61d3      	str	r3, [r2, #28]
 8004964:	4b48      	ldr	r3, [pc, #288]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004966:	69db      	ldr	r3, [r3, #28]
 8004968:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800496c:	60bb      	str	r3, [r7, #8]
 800496e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004970:	2301      	movs	r3, #1
 8004972:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004976:	4b45      	ldr	r3, [pc, #276]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800497e:	2b00      	cmp	r3, #0
 8004980:	d118      	bne.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004982:	4b42      	ldr	r3, [pc, #264]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a41      	ldr	r2, [pc, #260]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004988:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800498c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800498e:	f7fc fd65 	bl	800145c <HAL_GetTick>
 8004992:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004994:	e008      	b.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004996:	f7fc fd61 	bl	800145c <HAL_GetTick>
 800499a:	4602      	mov	r2, r0
 800499c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800499e:	1ad3      	subs	r3, r2, r3
 80049a0:	2b64      	cmp	r3, #100	; 0x64
 80049a2:	d901      	bls.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80049a4:	2303      	movs	r3, #3
 80049a6:	e14b      	b.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049a8:	4b38      	ldr	r3, [pc, #224]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d0f0      	beq.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80049b4:	4b34      	ldr	r3, [pc, #208]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049b6:	6a1b      	ldr	r3, [r3, #32]
 80049b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80049be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	f000 8084 	beq.w	8004ace <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d07c      	beq.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80049d4:	4b2c      	ldr	r3, [pc, #176]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049d6:	6a1b      	ldr	r3, [r3, #32]
 80049d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80049e2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e6:	fa93 f3a3 	rbit	r3, r3
 80049ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80049ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80049ee:	fab3 f383 	clz	r3, r3
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	461a      	mov	r2, r3
 80049f6:	4b26      	ldr	r3, [pc, #152]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80049f8:	4413      	add	r3, r2
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	461a      	mov	r2, r3
 80049fe:	2301      	movs	r3, #1
 8004a00:	6013      	str	r3, [r2, #0]
 8004a02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004a06:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a0a:	fa93 f3a3 	rbit	r3, r3
 8004a0e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a12:	fab3 f383 	clz	r3, r3
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	461a      	mov	r2, r3
 8004a1a:	4b1d      	ldr	r3, [pc, #116]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004a1c:	4413      	add	r3, r2
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	461a      	mov	r2, r3
 8004a22:	2300      	movs	r3, #0
 8004a24:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004a26:	4a18      	ldr	r2, [pc, #96]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a2a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004a2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a2e:	f003 0301 	and.w	r3, r3, #1
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d04b      	beq.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a36:	f7fc fd11 	bl	800145c <HAL_GetTick>
 8004a3a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a3c:	e00a      	b.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a3e:	f7fc fd0d 	bl	800145c <HAL_GetTick>
 8004a42:	4602      	mov	r2, r0
 8004a44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a46:	1ad3      	subs	r3, r2, r3
 8004a48:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d901      	bls.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004a50:	2303      	movs	r3, #3
 8004a52:	e0f5      	b.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8004a54:	2302      	movs	r3, #2
 8004a56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a5a:	fa93 f3a3 	rbit	r3, r3
 8004a5e:	627b      	str	r3, [r7, #36]	; 0x24
 8004a60:	2302      	movs	r3, #2
 8004a62:	623b      	str	r3, [r7, #32]
 8004a64:	6a3b      	ldr	r3, [r7, #32]
 8004a66:	fa93 f3a3 	rbit	r3, r3
 8004a6a:	61fb      	str	r3, [r7, #28]
  return result;
 8004a6c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a6e:	fab3 f383 	clz	r3, r3
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	095b      	lsrs	r3, r3, #5
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	f043 0302 	orr.w	r3, r3, #2
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	d108      	bne.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004a82:	4b01      	ldr	r3, [pc, #4]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a84:	6a1b      	ldr	r3, [r3, #32]
 8004a86:	e00d      	b.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004a88:	40021000 	.word	0x40021000
 8004a8c:	40007000 	.word	0x40007000
 8004a90:	10908100 	.word	0x10908100
 8004a94:	2302      	movs	r3, #2
 8004a96:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a98:	69bb      	ldr	r3, [r7, #24]
 8004a9a:	fa93 f3a3 	rbit	r3, r3
 8004a9e:	617b      	str	r3, [r7, #20]
 8004aa0:	4b69      	ldr	r3, [pc, #420]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa4:	2202      	movs	r2, #2
 8004aa6:	613a      	str	r2, [r7, #16]
 8004aa8:	693a      	ldr	r2, [r7, #16]
 8004aaa:	fa92 f2a2 	rbit	r2, r2
 8004aae:	60fa      	str	r2, [r7, #12]
  return result;
 8004ab0:	68fa      	ldr	r2, [r7, #12]
 8004ab2:	fab2 f282 	clz	r2, r2
 8004ab6:	b2d2      	uxtb	r2, r2
 8004ab8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004abc:	b2d2      	uxtb	r2, r2
 8004abe:	f002 021f 	and.w	r2, r2, #31
 8004ac2:	2101      	movs	r1, #1
 8004ac4:	fa01 f202 	lsl.w	r2, r1, r2
 8004ac8:	4013      	ands	r3, r2
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d0b7      	beq.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004ace:	4b5e      	ldr	r3, [pc, #376]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004ad0:	6a1b      	ldr	r3, [r3, #32]
 8004ad2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	495b      	ldr	r1, [pc, #364]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004adc:	4313      	orrs	r3, r2
 8004ade:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004ae0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d105      	bne.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ae8:	4b57      	ldr	r3, [pc, #348]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004aea:	69db      	ldr	r3, [r3, #28]
 8004aec:	4a56      	ldr	r2, [pc, #344]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004aee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004af2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 0301 	and.w	r3, r3, #1
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d008      	beq.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b00:	4b51      	ldr	r3, [pc, #324]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b04:	f023 0203 	bic.w	r2, r3, #3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	494e      	ldr	r1, [pc, #312]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0302 	and.w	r3, r3, #2
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d008      	beq.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b1e:	4b4a      	ldr	r3, [pc, #296]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b22:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	4947      	ldr	r1, [pc, #284]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 0304 	and.w	r3, r3, #4
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d008      	beq.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004b3c:	4b42      	ldr	r3, [pc, #264]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b40:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	691b      	ldr	r3, [r3, #16]
 8004b48:	493f      	ldr	r1, [pc, #252]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0320 	and.w	r3, r3, #32
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d008      	beq.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b5a:	4b3b      	ldr	r3, [pc, #236]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b5e:	f023 0210 	bic.w	r2, r3, #16
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	69db      	ldr	r3, [r3, #28]
 8004b66:	4938      	ldr	r1, [pc, #224]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d008      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004b78:	4b33      	ldr	r3, [pc, #204]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b84:	4930      	ldr	r1, [pc, #192]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d008      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b96:	4b2c      	ldr	r3, [pc, #176]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b9a:	f023 0220 	bic.w	r2, r3, #32
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a1b      	ldr	r3, [r3, #32]
 8004ba2:	4929      	ldr	r1, [pc, #164]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0308 	and.w	r3, r3, #8
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d008      	beq.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004bb4:	4b24      	ldr	r3, [pc, #144]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	695b      	ldr	r3, [r3, #20]
 8004bc0:	4921      	ldr	r1, [pc, #132]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 0310 	and.w	r3, r3, #16
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d008      	beq.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004bd2:	4b1d      	ldr	r3, [pc, #116]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	699b      	ldr	r3, [r3, #24]
 8004bde:	491a      	ldr	r1, [pc, #104]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004be0:	4313      	orrs	r3, r2
 8004be2:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d008      	beq.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004bf0:	4b15      	ldr	r3, [pc, #84]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bfc:	4912      	ldr	r1, [pc, #72]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d008      	beq.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004c0e:	4b0e      	ldr	r3, [pc, #56]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c12:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1a:	490b      	ldr	r1, [pc, #44]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d008      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004c2c:	4b06      	ldr	r3, [pc, #24]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c30:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c38:	4903      	ldr	r1, [pc, #12]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004c3e:	2300      	movs	r3, #0
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3748      	adds	r7, #72	; 0x48
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}
 8004c48:	40021000 	.word	0x40021000

08004c4c <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b082      	sub	sp, #8
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d101      	bne.n	8004c5e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e083      	b.n	8004d66 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	7f5b      	ldrb	r3, [r3, #29]
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d105      	bne.n	8004c74 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f7fc f952 	bl	8000f18 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2202      	movs	r2, #2
 8004c78:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	22ca      	movs	r2, #202	; 0xca
 8004c80:	625a      	str	r2, [r3, #36]	; 0x24
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	2253      	movs	r2, #83	; 0x53
 8004c88:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f000 f897 	bl	8004dbe <RTC_EnterInitMode>
 8004c90:	4603      	mov	r3, r0
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d008      	beq.n	8004ca8 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	22ff      	movs	r2, #255	; 0xff
 8004c9c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2204      	movs	r2, #4
 8004ca2:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e05e      	b.n	8004d66 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	6812      	ldr	r2, [r2, #0]
 8004cb2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004cb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cba:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	6899      	ldr	r1, [r3, #8]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685a      	ldr	r2, [r3, #4]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	691b      	ldr	r3, [r3, #16]
 8004cca:	431a      	orrs	r2, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	695b      	ldr	r3, [r3, #20]
 8004cd0:	431a      	orrs	r2, r3
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	430a      	orrs	r2, r1
 8004cd8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	68d2      	ldr	r2, [r2, #12]
 8004ce2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	6919      	ldr	r1, [r3, #16]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	041a      	lsls	r2, r3, #16
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	430a      	orrs	r2, r1
 8004cf6:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	68da      	ldr	r2, [r3, #12]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d06:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	f003 0320 	and.w	r3, r3, #32
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d10e      	bne.n	8004d34 <HAL_RTC_Init+0xe8>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 f829 	bl	8004d6e <HAL_RTC_WaitForSynchro>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d008      	beq.n	8004d34 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	22ff      	movs	r2, #255	; 0xff
 8004d28:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2204      	movs	r2, #4
 8004d2e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	e018      	b.n	8004d66 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004d42:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	699a      	ldr	r2, [r3, #24]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	430a      	orrs	r2, r1
 8004d54:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	22ff      	movs	r2, #255	; 0xff
 8004d5c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2201      	movs	r2, #1
 8004d62:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8004d64:	2300      	movs	r3, #0
  }
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3708      	adds	r7, #8
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}

08004d6e <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004d6e:	b580      	push	{r7, lr}
 8004d70:	b084      	sub	sp, #16
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d76:	2300      	movs	r3, #0
 8004d78:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	68da      	ldr	r2, [r3, #12]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004d88:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004d8a:	f7fc fb67 	bl	800145c <HAL_GetTick>
 8004d8e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004d90:	e009      	b.n	8004da6 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004d92:	f7fc fb63 	bl	800145c <HAL_GetTick>
 8004d96:	4602      	mov	r2, r0
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	1ad3      	subs	r3, r2, r3
 8004d9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004da0:	d901      	bls.n	8004da6 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e007      	b.n	8004db6 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	f003 0320 	and.w	r3, r3, #32
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d0ee      	beq.n	8004d92 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3710      	adds	r7, #16
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}

08004dbe <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004dbe:	b580      	push	{r7, lr}
 8004dc0:	b084      	sub	sp, #16
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d119      	bne.n	8004e0c <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8004de0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004de2:	f7fc fb3b 	bl	800145c <HAL_GetTick>
 8004de6:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004de8:	e009      	b.n	8004dfe <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004dea:	f7fc fb37 	bl	800145c <HAL_GetTick>
 8004dee:	4602      	mov	r2, r0
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	1ad3      	subs	r3, r2, r3
 8004df4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004df8:	d901      	bls.n	8004dfe <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e007      	b.n	8004e0e <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	68db      	ldr	r3, [r3, #12]
 8004e04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d0ee      	beq.n	8004dea <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8004e0c:	2300      	movs	r3, #0
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3710      	adds	r7, #16
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}

08004e16 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e16:	b580      	push	{r7, lr}
 8004e18:	b084      	sub	sp, #16
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d101      	bne.n	8004e28 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	e084      	b.n	8004f32 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d106      	bne.n	8004e48 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f7fc f90a 	bl	800105c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2202      	movs	r2, #2
 8004e4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e5e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e68:	d902      	bls.n	8004e70 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	60fb      	str	r3, [r7, #12]
 8004e6e:	e002      	b.n	8004e76 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004e70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e74:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004e7e:	d007      	beq.n	8004e90 <HAL_SPI_Init+0x7a>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e88:	d002      	beq.n	8004e90 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d10b      	bne.n	8004eb0 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ea0:	d903      	bls.n	8004eaa <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2202      	movs	r2, #2
 8004ea6:	631a      	str	r2, [r3, #48]	; 0x30
 8004ea8:	e002      	b.n	8004eb0 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2201      	movs	r2, #1
 8004eae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	685a      	ldr	r2, [r3, #4]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	431a      	orrs	r2, r3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	431a      	orrs	r2, r3
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	695b      	ldr	r3, [r3, #20]
 8004ec4:	431a      	orrs	r2, r3
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	699b      	ldr	r3, [r3, #24]
 8004eca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ece:	431a      	orrs	r2, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	69db      	ldr	r3, [r3, #28]
 8004ed4:	431a      	orrs	r2, r3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a1b      	ldr	r3, [r3, #32]
 8004eda:	ea42 0103 	orr.w	r1, r2, r3
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	430a      	orrs	r2, r1
 8004ee8:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	699b      	ldr	r3, [r3, #24]
 8004eee:	0c1b      	lsrs	r3, r3, #16
 8004ef0:	f003 0204 	and.w	r2, r3, #4
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef8:	431a      	orrs	r2, r3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004efe:	431a      	orrs	r2, r3
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	ea42 0103 	orr.w	r1, r2, r3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68fa      	ldr	r2, [r7, #12]
 8004f0e:	430a      	orrs	r2, r1
 8004f10:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	69da      	ldr	r2, [r3, #28]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f20:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004f30:	2300      	movs	r3, #0
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3710      	adds	r7, #16
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}

08004f3a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004f3a:	b580      	push	{r7, lr}
 8004f3c:	b08a      	sub	sp, #40	; 0x28
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	60f8      	str	r0, [r7, #12]
 8004f42:	60b9      	str	r1, [r7, #8]
 8004f44:	607a      	str	r2, [r7, #4]
 8004f46:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d101      	bne.n	8004f60 <HAL_SPI_TransmitReceive+0x26>
 8004f5c:	2302      	movs	r3, #2
 8004f5e:	e1fb      	b.n	8005358 <HAL_SPI_TransmitReceive+0x41e>
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f68:	f7fc fa78 	bl	800145c <HAL_GetTick>
 8004f6c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004f74:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004f7c:	887b      	ldrh	r3, [r7, #2]
 8004f7e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004f80:	887b      	ldrh	r3, [r7, #2]
 8004f82:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004f84:	7efb      	ldrb	r3, [r7, #27]
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d00e      	beq.n	8004fa8 <HAL_SPI_TransmitReceive+0x6e>
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f90:	d106      	bne.n	8004fa0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d102      	bne.n	8004fa0 <HAL_SPI_TransmitReceive+0x66>
 8004f9a:	7efb      	ldrb	r3, [r7, #27]
 8004f9c:	2b04      	cmp	r3, #4
 8004f9e:	d003      	beq.n	8004fa8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004fa0:	2302      	movs	r3, #2
 8004fa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004fa6:	e1cd      	b.n	8005344 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d005      	beq.n	8004fba <HAL_SPI_TransmitReceive+0x80>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d002      	beq.n	8004fba <HAL_SPI_TransmitReceive+0x80>
 8004fb4:	887b      	ldrh	r3, [r7, #2]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d103      	bne.n	8004fc2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004fc0:	e1c0      	b.n	8005344 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	2b04      	cmp	r3, #4
 8004fcc:	d003      	beq.n	8004fd6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2205      	movs	r2, #5
 8004fd2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	887a      	ldrh	r2, [r7, #2]
 8004fe6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	887a      	ldrh	r2, [r7, #2]
 8004fee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	68ba      	ldr	r2, [r7, #8]
 8004ff6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	887a      	ldrh	r2, [r7, #2]
 8004ffc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	887a      	ldrh	r2, [r7, #2]
 8005002:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2200      	movs	r2, #0
 8005008:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2200      	movs	r2, #0
 800500e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005018:	d802      	bhi.n	8005020 <HAL_SPI_TransmitReceive+0xe6>
 800501a:	8a3b      	ldrh	r3, [r7, #16]
 800501c:	2b01      	cmp	r3, #1
 800501e:	d908      	bls.n	8005032 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	685a      	ldr	r2, [r3, #4]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800502e:	605a      	str	r2, [r3, #4]
 8005030:	e007      	b.n	8005042 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	685a      	ldr	r2, [r3, #4]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005040:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800504c:	2b40      	cmp	r3, #64	; 0x40
 800504e:	d007      	beq.n	8005060 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800505e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005068:	d97c      	bls.n	8005164 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d002      	beq.n	8005078 <HAL_SPI_TransmitReceive+0x13e>
 8005072:	8a7b      	ldrh	r3, [r7, #18]
 8005074:	2b01      	cmp	r3, #1
 8005076:	d169      	bne.n	800514c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800507c:	881a      	ldrh	r2, [r3, #0]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005088:	1c9a      	adds	r2, r3, #2
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005092:	b29b      	uxth	r3, r3
 8005094:	3b01      	subs	r3, #1
 8005096:	b29a      	uxth	r2, r3
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800509c:	e056      	b.n	800514c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	f003 0302 	and.w	r3, r3, #2
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	d11b      	bne.n	80050e4 <HAL_SPI_TransmitReceive+0x1aa>
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d016      	beq.n	80050e4 <HAL_SPI_TransmitReceive+0x1aa>
 80050b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d113      	bne.n	80050e4 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c0:	881a      	ldrh	r2, [r3, #0]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050cc:	1c9a      	adds	r2, r3, #2
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	3b01      	subs	r3, #1
 80050da:	b29a      	uxth	r2, r3
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80050e0:	2300      	movs	r3, #0
 80050e2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	f003 0301 	and.w	r3, r3, #1
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d11c      	bne.n	800512c <HAL_SPI_TransmitReceive+0x1f2>
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d016      	beq.n	800512c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	68da      	ldr	r2, [r3, #12]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005108:	b292      	uxth	r2, r2
 800510a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005110:	1c9a      	adds	r2, r3, #2
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800511c:	b29b      	uxth	r3, r3
 800511e:	3b01      	subs	r3, #1
 8005120:	b29a      	uxth	r2, r3
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005128:	2301      	movs	r3, #1
 800512a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800512c:	f7fc f996 	bl	800145c <HAL_GetTick>
 8005130:	4602      	mov	r2, r0
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005138:	429a      	cmp	r2, r3
 800513a:	d807      	bhi.n	800514c <HAL_SPI_TransmitReceive+0x212>
 800513c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800513e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005142:	d003      	beq.n	800514c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005144:	2303      	movs	r3, #3
 8005146:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800514a:	e0fb      	b.n	8005344 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005150:	b29b      	uxth	r3, r3
 8005152:	2b00      	cmp	r3, #0
 8005154:	d1a3      	bne.n	800509e <HAL_SPI_TransmitReceive+0x164>
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800515c:	b29b      	uxth	r3, r3
 800515e:	2b00      	cmp	r3, #0
 8005160:	d19d      	bne.n	800509e <HAL_SPI_TransmitReceive+0x164>
 8005162:	e0df      	b.n	8005324 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d003      	beq.n	8005174 <HAL_SPI_TransmitReceive+0x23a>
 800516c:	8a7b      	ldrh	r3, [r7, #18]
 800516e:	2b01      	cmp	r3, #1
 8005170:	f040 80cb 	bne.w	800530a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005178:	b29b      	uxth	r3, r3
 800517a:	2b01      	cmp	r3, #1
 800517c:	d912      	bls.n	80051a4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005182:	881a      	ldrh	r2, [r3, #0]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800518e:	1c9a      	adds	r2, r3, #2
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005198:	b29b      	uxth	r3, r3
 800519a:	3b02      	subs	r3, #2
 800519c:	b29a      	uxth	r2, r3
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80051a2:	e0b2      	b.n	800530a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	330c      	adds	r3, #12
 80051ae:	7812      	ldrb	r2, [r2, #0]
 80051b0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b6:	1c5a      	adds	r2, r3, #1
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	3b01      	subs	r3, #1
 80051c4:	b29a      	uxth	r2, r3
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051ca:	e09e      	b.n	800530a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	f003 0302 	and.w	r3, r3, #2
 80051d6:	2b02      	cmp	r3, #2
 80051d8:	d134      	bne.n	8005244 <HAL_SPI_TransmitReceive+0x30a>
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051de:	b29b      	uxth	r3, r3
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d02f      	beq.n	8005244 <HAL_SPI_TransmitReceive+0x30a>
 80051e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d12c      	bne.n	8005244 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d912      	bls.n	800521a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f8:	881a      	ldrh	r2, [r3, #0]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005204:	1c9a      	adds	r2, r3, #2
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800520e:	b29b      	uxth	r3, r3
 8005210:	3b02      	subs	r3, #2
 8005212:	b29a      	uxth	r2, r3
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005218:	e012      	b.n	8005240 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	330c      	adds	r3, #12
 8005224:	7812      	ldrb	r2, [r2, #0]
 8005226:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800522c:	1c5a      	adds	r2, r3, #1
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005236:	b29b      	uxth	r3, r3
 8005238:	3b01      	subs	r3, #1
 800523a:	b29a      	uxth	r2, r3
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005240:	2300      	movs	r3, #0
 8005242:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	f003 0301 	and.w	r3, r3, #1
 800524e:	2b01      	cmp	r3, #1
 8005250:	d148      	bne.n	80052e4 <HAL_SPI_TransmitReceive+0x3aa>
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005258:	b29b      	uxth	r3, r3
 800525a:	2b00      	cmp	r3, #0
 800525c:	d042      	beq.n	80052e4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005264:	b29b      	uxth	r3, r3
 8005266:	2b01      	cmp	r3, #1
 8005268:	d923      	bls.n	80052b2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	68da      	ldr	r2, [r3, #12]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005274:	b292      	uxth	r2, r2
 8005276:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527c:	1c9a      	adds	r2, r3, #2
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005288:	b29b      	uxth	r3, r3
 800528a:	3b02      	subs	r3, #2
 800528c:	b29a      	uxth	r2, r3
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800529a:	b29b      	uxth	r3, r3
 800529c:	2b01      	cmp	r3, #1
 800529e:	d81f      	bhi.n	80052e0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	685a      	ldr	r2, [r3, #4]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80052ae:	605a      	str	r2, [r3, #4]
 80052b0:	e016      	b.n	80052e0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f103 020c 	add.w	r2, r3, #12
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052be:	7812      	ldrb	r2, [r2, #0]
 80052c0:	b2d2      	uxtb	r2, r2
 80052c2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c8:	1c5a      	adds	r2, r3, #1
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	3b01      	subs	r3, #1
 80052d8:	b29a      	uxth	r2, r3
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80052e0:	2301      	movs	r3, #1
 80052e2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80052e4:	f7fc f8ba 	bl	800145c <HAL_GetTick>
 80052e8:	4602      	mov	r2, r0
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	1ad3      	subs	r3, r2, r3
 80052ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d803      	bhi.n	80052fc <HAL_SPI_TransmitReceive+0x3c2>
 80052f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052fa:	d102      	bne.n	8005302 <HAL_SPI_TransmitReceive+0x3c8>
 80052fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d103      	bne.n	800530a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005302:	2303      	movs	r3, #3
 8005304:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005308:	e01c      	b.n	8005344 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800530e:	b29b      	uxth	r3, r3
 8005310:	2b00      	cmp	r3, #0
 8005312:	f47f af5b 	bne.w	80051cc <HAL_SPI_TransmitReceive+0x292>
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800531c:	b29b      	uxth	r3, r3
 800531e:	2b00      	cmp	r3, #0
 8005320:	f47f af54 	bne.w	80051cc <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005324:	69fa      	ldr	r2, [r7, #28]
 8005326:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005328:	68f8      	ldr	r0, [r7, #12]
 800532a:	f000 f8f0 	bl	800550e <SPI_EndRxTxTransaction>
 800532e:	4603      	mov	r3, r0
 8005330:	2b00      	cmp	r3, #0
 8005332:	d006      	beq.n	8005342 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2220      	movs	r2, #32
 800533e:	661a      	str	r2, [r3, #96]	; 0x60
 8005340:	e000      	b.n	8005344 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005342:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2200      	movs	r2, #0
 8005350:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005354:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005358:	4618      	mov	r0, r3
 800535a:	3728      	adds	r7, #40	; 0x28
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}

08005360 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0
 8005366:	60f8      	str	r0, [r7, #12]
 8005368:	60b9      	str	r1, [r7, #8]
 800536a:	603b      	str	r3, [r7, #0]
 800536c:	4613      	mov	r3, r2
 800536e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005370:	e04c      	b.n	800540c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005378:	d048      	beq.n	800540c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800537a:	f7fc f86f 	bl	800145c <HAL_GetTick>
 800537e:	4602      	mov	r2, r0
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	1ad3      	subs	r3, r2, r3
 8005384:	683a      	ldr	r2, [r7, #0]
 8005386:	429a      	cmp	r2, r3
 8005388:	d902      	bls.n	8005390 <SPI_WaitFlagStateUntilTimeout+0x30>
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d13d      	bne.n	800540c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	685a      	ldr	r2, [r3, #4]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800539e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053a8:	d111      	bne.n	80053ce <SPI_WaitFlagStateUntilTimeout+0x6e>
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053b2:	d004      	beq.n	80053be <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053bc:	d107      	bne.n	80053ce <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053cc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053d6:	d10f      	bne.n	80053f8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053e6:	601a      	str	r2, [r3, #0]
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053f6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2200      	movs	r2, #0
 8005404:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005408:	2303      	movs	r3, #3
 800540a:	e00f      	b.n	800542c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	689a      	ldr	r2, [r3, #8]
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	4013      	ands	r3, r2
 8005416:	68ba      	ldr	r2, [r7, #8]
 8005418:	429a      	cmp	r2, r3
 800541a:	bf0c      	ite	eq
 800541c:	2301      	moveq	r3, #1
 800541e:	2300      	movne	r3, #0
 8005420:	b2db      	uxtb	r3, r3
 8005422:	461a      	mov	r2, r3
 8005424:	79fb      	ldrb	r3, [r7, #7]
 8005426:	429a      	cmp	r2, r3
 8005428:	d1a3      	bne.n	8005372 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800542a:	2300      	movs	r3, #0
}
 800542c:	4618      	mov	r0, r3
 800542e:	3710      	adds	r7, #16
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	607a      	str	r2, [r7, #4]
 8005440:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8005442:	e057      	b.n	80054f4 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800544a:	d106      	bne.n	800545a <SPI_WaitFifoStateUntilTimeout+0x26>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d103      	bne.n	800545a <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	330c      	adds	r3, #12
 8005458:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005460:	d048      	beq.n	80054f4 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005462:	f7fb fffb 	bl	800145c <HAL_GetTick>
 8005466:	4602      	mov	r2, r0
 8005468:	69bb      	ldr	r3, [r7, #24]
 800546a:	1ad3      	subs	r3, r2, r3
 800546c:	683a      	ldr	r2, [r7, #0]
 800546e:	429a      	cmp	r2, r3
 8005470:	d902      	bls.n	8005478 <SPI_WaitFifoStateUntilTimeout+0x44>
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d13d      	bne.n	80054f4 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	685a      	ldr	r2, [r3, #4]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005486:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005490:	d111      	bne.n	80054b6 <SPI_WaitFifoStateUntilTimeout+0x82>
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800549a:	d004      	beq.n	80054a6 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054a4:	d107      	bne.n	80054b6 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054b4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054be:	d10f      	bne.n	80054e0 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054ce:	601a      	str	r2, [r3, #0]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054de:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2200      	movs	r2, #0
 80054ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80054f0:	2303      	movs	r3, #3
 80054f2:	e008      	b.n	8005506 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	689a      	ldr	r2, [r3, #8]
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	4013      	ands	r3, r2
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	429a      	cmp	r2, r3
 8005502:	d19f      	bne.n	8005444 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8005504:	2300      	movs	r3, #0
}
 8005506:	4618      	mov	r0, r3
 8005508:	3710      	adds	r7, #16
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}

0800550e <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800550e:	b580      	push	{r7, lr}
 8005510:	b086      	sub	sp, #24
 8005512:	af02      	add	r7, sp, #8
 8005514:	60f8      	str	r0, [r7, #12]
 8005516:	60b9      	str	r1, [r7, #8]
 8005518:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	9300      	str	r3, [sp, #0]
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	2200      	movs	r2, #0
 8005522:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005526:	68f8      	ldr	r0, [r7, #12]
 8005528:	f7ff ff84 	bl	8005434 <SPI_WaitFifoStateUntilTimeout>
 800552c:	4603      	mov	r3, r0
 800552e:	2b00      	cmp	r3, #0
 8005530:	d007      	beq.n	8005542 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005536:	f043 0220 	orr.w	r2, r3, #32
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800553e:	2303      	movs	r3, #3
 8005540:	e027      	b.n	8005592 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	9300      	str	r3, [sp, #0]
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	2200      	movs	r2, #0
 800554a:	2180      	movs	r1, #128	; 0x80
 800554c:	68f8      	ldr	r0, [r7, #12]
 800554e:	f7ff ff07 	bl	8005360 <SPI_WaitFlagStateUntilTimeout>
 8005552:	4603      	mov	r3, r0
 8005554:	2b00      	cmp	r3, #0
 8005556:	d007      	beq.n	8005568 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800555c:	f043 0220 	orr.w	r2, r3, #32
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005564:	2303      	movs	r3, #3
 8005566:	e014      	b.n	8005592 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	9300      	str	r3, [sp, #0]
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	2200      	movs	r2, #0
 8005570:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005574:	68f8      	ldr	r0, [r7, #12]
 8005576:	f7ff ff5d 	bl	8005434 <SPI_WaitFifoStateUntilTimeout>
 800557a:	4603      	mov	r3, r0
 800557c:	2b00      	cmp	r3, #0
 800557e:	d007      	beq.n	8005590 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005584:	f043 0220 	orr.w	r2, r3, #32
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800558c:	2303      	movs	r3, #3
 800558e:	e000      	b.n	8005592 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005590:	2300      	movs	r3, #0
}
 8005592:	4618      	mov	r0, r3
 8005594:	3710      	adds	r7, #16
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}

0800559a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800559a:	b580      	push	{r7, lr}
 800559c:	b082      	sub	sp, #8
 800559e:	af00      	add	r7, sp, #0
 80055a0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d101      	bne.n	80055ac <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	e040      	b.n	800562e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d106      	bne.n	80055c2 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f7fb fe85 	bl	80012cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2224      	movs	r2, #36	; 0x24
 80055c6:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f022 0201 	bic.w	r2, r2, #1
 80055d6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f000 f82d 	bl	8005638 <UART_SetConfig>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d101      	bne.n	80055e8 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e022      	b.n	800562e <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d002      	beq.n	80055f6 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f000 fa3b 	bl	8005a6c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	685a      	ldr	r2, [r3, #4]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005604:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	689a      	ldr	r2, [r3, #8]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005614:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f042 0201 	orr.w	r2, r2, #1
 8005624:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 fac2 	bl	8005bb0 <UART_CheckIdleState>
 800562c:	4603      	mov	r3, r0
}
 800562e:	4618      	mov	r0, r3
 8005630:	3708      	adds	r7, #8
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
	...

08005638 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b088      	sub	sp, #32
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8005640:	2300      	movs	r3, #0
 8005642:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005644:	2300      	movs	r3, #0
 8005646:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	689a      	ldr	r2, [r3, #8]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	691b      	ldr	r3, [r3, #16]
 8005650:	431a      	orrs	r2, r3
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	695b      	ldr	r3, [r3, #20]
 8005656:	431a      	orrs	r2, r3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	69db      	ldr	r3, [r3, #28]
 800565c:	4313      	orrs	r3, r2
 800565e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800566a:	f023 030c 	bic.w	r3, r3, #12
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	6812      	ldr	r2, [r2, #0]
 8005672:	6939      	ldr	r1, [r7, #16]
 8005674:	430b      	orrs	r3, r1
 8005676:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	68da      	ldr	r2, [r3, #12]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	430a      	orrs	r2, r1
 800568c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	699b      	ldr	r3, [r3, #24]
 8005692:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6a1b      	ldr	r3, [r3, #32]
 8005698:	693a      	ldr	r2, [r7, #16]
 800569a:	4313      	orrs	r3, r2
 800569c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	693a      	ldr	r2, [r7, #16]
 80056ae:	430a      	orrs	r2, r1
 80056b0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4aa9      	ldr	r2, [pc, #676]	; (800595c <UART_SetConfig+0x324>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d121      	bne.n	8005700 <UART_SetConfig+0xc8>
 80056bc:	4ba8      	ldr	r3, [pc, #672]	; (8005960 <UART_SetConfig+0x328>)
 80056be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056c0:	f003 0303 	and.w	r3, r3, #3
 80056c4:	2b03      	cmp	r3, #3
 80056c6:	d817      	bhi.n	80056f8 <UART_SetConfig+0xc0>
 80056c8:	a201      	add	r2, pc, #4	; (adr r2, 80056d0 <UART_SetConfig+0x98>)
 80056ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ce:	bf00      	nop
 80056d0:	080056e1 	.word	0x080056e1
 80056d4:	080056ed 	.word	0x080056ed
 80056d8:	080056f3 	.word	0x080056f3
 80056dc:	080056e7 	.word	0x080056e7
 80056e0:	2301      	movs	r3, #1
 80056e2:	77fb      	strb	r3, [r7, #31]
 80056e4:	e0b2      	b.n	800584c <UART_SetConfig+0x214>
 80056e6:	2302      	movs	r3, #2
 80056e8:	77fb      	strb	r3, [r7, #31]
 80056ea:	e0af      	b.n	800584c <UART_SetConfig+0x214>
 80056ec:	2304      	movs	r3, #4
 80056ee:	77fb      	strb	r3, [r7, #31]
 80056f0:	e0ac      	b.n	800584c <UART_SetConfig+0x214>
 80056f2:	2308      	movs	r3, #8
 80056f4:	77fb      	strb	r3, [r7, #31]
 80056f6:	e0a9      	b.n	800584c <UART_SetConfig+0x214>
 80056f8:	2310      	movs	r3, #16
 80056fa:	77fb      	strb	r3, [r7, #31]
 80056fc:	bf00      	nop
 80056fe:	e0a5      	b.n	800584c <UART_SetConfig+0x214>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a97      	ldr	r2, [pc, #604]	; (8005964 <UART_SetConfig+0x32c>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d123      	bne.n	8005752 <UART_SetConfig+0x11a>
 800570a:	4b95      	ldr	r3, [pc, #596]	; (8005960 <UART_SetConfig+0x328>)
 800570c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800570e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005712:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005716:	d012      	beq.n	800573e <UART_SetConfig+0x106>
 8005718:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800571c:	d802      	bhi.n	8005724 <UART_SetConfig+0xec>
 800571e:	2b00      	cmp	r3, #0
 8005720:	d007      	beq.n	8005732 <UART_SetConfig+0xfa>
 8005722:	e012      	b.n	800574a <UART_SetConfig+0x112>
 8005724:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005728:	d00c      	beq.n	8005744 <UART_SetConfig+0x10c>
 800572a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800572e:	d003      	beq.n	8005738 <UART_SetConfig+0x100>
 8005730:	e00b      	b.n	800574a <UART_SetConfig+0x112>
 8005732:	2300      	movs	r3, #0
 8005734:	77fb      	strb	r3, [r7, #31]
 8005736:	e089      	b.n	800584c <UART_SetConfig+0x214>
 8005738:	2302      	movs	r3, #2
 800573a:	77fb      	strb	r3, [r7, #31]
 800573c:	e086      	b.n	800584c <UART_SetConfig+0x214>
 800573e:	2304      	movs	r3, #4
 8005740:	77fb      	strb	r3, [r7, #31]
 8005742:	e083      	b.n	800584c <UART_SetConfig+0x214>
 8005744:	2308      	movs	r3, #8
 8005746:	77fb      	strb	r3, [r7, #31]
 8005748:	e080      	b.n	800584c <UART_SetConfig+0x214>
 800574a:	2310      	movs	r3, #16
 800574c:	77fb      	strb	r3, [r7, #31]
 800574e:	bf00      	nop
 8005750:	e07c      	b.n	800584c <UART_SetConfig+0x214>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a84      	ldr	r2, [pc, #528]	; (8005968 <UART_SetConfig+0x330>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d123      	bne.n	80057a4 <UART_SetConfig+0x16c>
 800575c:	4b80      	ldr	r3, [pc, #512]	; (8005960 <UART_SetConfig+0x328>)
 800575e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005760:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005764:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005768:	d012      	beq.n	8005790 <UART_SetConfig+0x158>
 800576a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800576e:	d802      	bhi.n	8005776 <UART_SetConfig+0x13e>
 8005770:	2b00      	cmp	r3, #0
 8005772:	d007      	beq.n	8005784 <UART_SetConfig+0x14c>
 8005774:	e012      	b.n	800579c <UART_SetConfig+0x164>
 8005776:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800577a:	d00c      	beq.n	8005796 <UART_SetConfig+0x15e>
 800577c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005780:	d003      	beq.n	800578a <UART_SetConfig+0x152>
 8005782:	e00b      	b.n	800579c <UART_SetConfig+0x164>
 8005784:	2300      	movs	r3, #0
 8005786:	77fb      	strb	r3, [r7, #31]
 8005788:	e060      	b.n	800584c <UART_SetConfig+0x214>
 800578a:	2302      	movs	r3, #2
 800578c:	77fb      	strb	r3, [r7, #31]
 800578e:	e05d      	b.n	800584c <UART_SetConfig+0x214>
 8005790:	2304      	movs	r3, #4
 8005792:	77fb      	strb	r3, [r7, #31]
 8005794:	e05a      	b.n	800584c <UART_SetConfig+0x214>
 8005796:	2308      	movs	r3, #8
 8005798:	77fb      	strb	r3, [r7, #31]
 800579a:	e057      	b.n	800584c <UART_SetConfig+0x214>
 800579c:	2310      	movs	r3, #16
 800579e:	77fb      	strb	r3, [r7, #31]
 80057a0:	bf00      	nop
 80057a2:	e053      	b.n	800584c <UART_SetConfig+0x214>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a70      	ldr	r2, [pc, #448]	; (800596c <UART_SetConfig+0x334>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d123      	bne.n	80057f6 <UART_SetConfig+0x1be>
 80057ae:	4b6c      	ldr	r3, [pc, #432]	; (8005960 <UART_SetConfig+0x328>)
 80057b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057b2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80057b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057ba:	d012      	beq.n	80057e2 <UART_SetConfig+0x1aa>
 80057bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057c0:	d802      	bhi.n	80057c8 <UART_SetConfig+0x190>
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d007      	beq.n	80057d6 <UART_SetConfig+0x19e>
 80057c6:	e012      	b.n	80057ee <UART_SetConfig+0x1b6>
 80057c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80057cc:	d00c      	beq.n	80057e8 <UART_SetConfig+0x1b0>
 80057ce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80057d2:	d003      	beq.n	80057dc <UART_SetConfig+0x1a4>
 80057d4:	e00b      	b.n	80057ee <UART_SetConfig+0x1b6>
 80057d6:	2300      	movs	r3, #0
 80057d8:	77fb      	strb	r3, [r7, #31]
 80057da:	e037      	b.n	800584c <UART_SetConfig+0x214>
 80057dc:	2302      	movs	r3, #2
 80057de:	77fb      	strb	r3, [r7, #31]
 80057e0:	e034      	b.n	800584c <UART_SetConfig+0x214>
 80057e2:	2304      	movs	r3, #4
 80057e4:	77fb      	strb	r3, [r7, #31]
 80057e6:	e031      	b.n	800584c <UART_SetConfig+0x214>
 80057e8:	2308      	movs	r3, #8
 80057ea:	77fb      	strb	r3, [r7, #31]
 80057ec:	e02e      	b.n	800584c <UART_SetConfig+0x214>
 80057ee:	2310      	movs	r3, #16
 80057f0:	77fb      	strb	r3, [r7, #31]
 80057f2:	bf00      	nop
 80057f4:	e02a      	b.n	800584c <UART_SetConfig+0x214>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a5d      	ldr	r2, [pc, #372]	; (8005970 <UART_SetConfig+0x338>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d123      	bne.n	8005848 <UART_SetConfig+0x210>
 8005800:	4b57      	ldr	r3, [pc, #348]	; (8005960 <UART_SetConfig+0x328>)
 8005802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005804:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005808:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800580c:	d012      	beq.n	8005834 <UART_SetConfig+0x1fc>
 800580e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005812:	d802      	bhi.n	800581a <UART_SetConfig+0x1e2>
 8005814:	2b00      	cmp	r3, #0
 8005816:	d007      	beq.n	8005828 <UART_SetConfig+0x1f0>
 8005818:	e012      	b.n	8005840 <UART_SetConfig+0x208>
 800581a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800581e:	d00c      	beq.n	800583a <UART_SetConfig+0x202>
 8005820:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005824:	d003      	beq.n	800582e <UART_SetConfig+0x1f6>
 8005826:	e00b      	b.n	8005840 <UART_SetConfig+0x208>
 8005828:	2300      	movs	r3, #0
 800582a:	77fb      	strb	r3, [r7, #31]
 800582c:	e00e      	b.n	800584c <UART_SetConfig+0x214>
 800582e:	2302      	movs	r3, #2
 8005830:	77fb      	strb	r3, [r7, #31]
 8005832:	e00b      	b.n	800584c <UART_SetConfig+0x214>
 8005834:	2304      	movs	r3, #4
 8005836:	77fb      	strb	r3, [r7, #31]
 8005838:	e008      	b.n	800584c <UART_SetConfig+0x214>
 800583a:	2308      	movs	r3, #8
 800583c:	77fb      	strb	r3, [r7, #31]
 800583e:	e005      	b.n	800584c <UART_SetConfig+0x214>
 8005840:	2310      	movs	r3, #16
 8005842:	77fb      	strb	r3, [r7, #31]
 8005844:	bf00      	nop
 8005846:	e001      	b.n	800584c <UART_SetConfig+0x214>
 8005848:	2310      	movs	r3, #16
 800584a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	69db      	ldr	r3, [r3, #28]
 8005850:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005854:	f040 808e 	bne.w	8005974 <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 8005858:	7ffb      	ldrb	r3, [r7, #31]
 800585a:	2b08      	cmp	r3, #8
 800585c:	d85e      	bhi.n	800591c <UART_SetConfig+0x2e4>
 800585e:	a201      	add	r2, pc, #4	; (adr r2, 8005864 <UART_SetConfig+0x22c>)
 8005860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005864:	08005889 	.word	0x08005889
 8005868:	080058a9 	.word	0x080058a9
 800586c:	080058c9 	.word	0x080058c9
 8005870:	0800591d 	.word	0x0800591d
 8005874:	080058e5 	.word	0x080058e5
 8005878:	0800591d 	.word	0x0800591d
 800587c:	0800591d 	.word	0x0800591d
 8005880:	0800591d 	.word	0x0800591d
 8005884:	08005905 	.word	0x08005905
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005888:	f7ff f80a 	bl	80048a0 <HAL_RCC_GetPCLK1Freq>
 800588c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	005a      	lsls	r2, r3, #1
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	085b      	lsrs	r3, r3, #1
 8005898:	441a      	add	r2, r3
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	fbb2 f3f3 	udiv	r3, r2, r3
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	61bb      	str	r3, [r7, #24]
        break;
 80058a6:	e03c      	b.n	8005922 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058a8:	f7ff f81c 	bl	80048e4 <HAL_RCC_GetPCLK2Freq>
 80058ac:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	005a      	lsls	r2, r3, #1
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	085b      	lsrs	r3, r3, #1
 80058b8:	441a      	add	r2, r3
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	fbb2 f3f3 	udiv	r3, r2, r3
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	61bb      	str	r3, [r7, #24]
        break;
 80058c6:	e02c      	b.n	8005922 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	085b      	lsrs	r3, r3, #1
 80058ce:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80058d2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	6852      	ldr	r2, [r2, #4]
 80058da:	fbb3 f3f2 	udiv	r3, r3, r2
 80058de:	b29b      	uxth	r3, r3
 80058e0:	61bb      	str	r3, [r7, #24]
        break;
 80058e2:	e01e      	b.n	8005922 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058e4:	f7fe ff66 	bl	80047b4 <HAL_RCC_GetSysClockFreq>
 80058e8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	005a      	lsls	r2, r3, #1
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	085b      	lsrs	r3, r3, #1
 80058f4:	441a      	add	r2, r3
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80058fe:	b29b      	uxth	r3, r3
 8005900:	61bb      	str	r3, [r7, #24]
        break;
 8005902:	e00e      	b.n	8005922 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	085b      	lsrs	r3, r3, #1
 800590a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	fbb2 f3f3 	udiv	r3, r2, r3
 8005916:	b29b      	uxth	r3, r3
 8005918:	61bb      	str	r3, [r7, #24]
        break;
 800591a:	e002      	b.n	8005922 <UART_SetConfig+0x2ea>
      default:
        ret = HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	75fb      	strb	r3, [r7, #23]
        break;
 8005920:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005922:	69bb      	ldr	r3, [r7, #24]
 8005924:	2b0f      	cmp	r3, #15
 8005926:	d916      	bls.n	8005956 <UART_SetConfig+0x31e>
 8005928:	69bb      	ldr	r3, [r7, #24]
 800592a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800592e:	d212      	bcs.n	8005956 <UART_SetConfig+0x31e>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005930:	69bb      	ldr	r3, [r7, #24]
 8005932:	b29b      	uxth	r3, r3
 8005934:	f023 030f 	bic.w	r3, r3, #15
 8005938:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800593a:	69bb      	ldr	r3, [r7, #24]
 800593c:	085b      	lsrs	r3, r3, #1
 800593e:	b29b      	uxth	r3, r3
 8005940:	f003 0307 	and.w	r3, r3, #7
 8005944:	b29a      	uxth	r2, r3
 8005946:	897b      	ldrh	r3, [r7, #10]
 8005948:	4313      	orrs	r3, r2
 800594a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	897a      	ldrh	r2, [r7, #10]
 8005952:	60da      	str	r2, [r3, #12]
 8005954:	e07e      	b.n	8005a54 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	75fb      	strb	r3, [r7, #23]
 800595a:	e07b      	b.n	8005a54 <UART_SetConfig+0x41c>
 800595c:	40013800 	.word	0x40013800
 8005960:	40021000 	.word	0x40021000
 8005964:	40004400 	.word	0x40004400
 8005968:	40004800 	.word	0x40004800
 800596c:	40004c00 	.word	0x40004c00
 8005970:	40005000 	.word	0x40005000
    }
  }
  else
  {
    switch (clocksource)
 8005974:	7ffb      	ldrb	r3, [r7, #31]
 8005976:	2b08      	cmp	r3, #8
 8005978:	d85b      	bhi.n	8005a32 <UART_SetConfig+0x3fa>
 800597a:	a201      	add	r2, pc, #4	; (adr r2, 8005980 <UART_SetConfig+0x348>)
 800597c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005980:	080059a5 	.word	0x080059a5
 8005984:	080059c3 	.word	0x080059c3
 8005988:	080059e1 	.word	0x080059e1
 800598c:	08005a33 	.word	0x08005a33
 8005990:	080059fd 	.word	0x080059fd
 8005994:	08005a33 	.word	0x08005a33
 8005998:	08005a33 	.word	0x08005a33
 800599c:	08005a33 	.word	0x08005a33
 80059a0:	08005a1b 	.word	0x08005a1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059a4:	f7fe ff7c 	bl	80048a0 <HAL_RCC_GetPCLK1Freq>
 80059a8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	085a      	lsrs	r2, r3, #1
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	441a      	add	r2, r3
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80059bc:	b29b      	uxth	r3, r3
 80059be:	61bb      	str	r3, [r7, #24]
        break;
 80059c0:	e03a      	b.n	8005a38 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059c2:	f7fe ff8f 	bl	80048e4 <HAL_RCC_GetPCLK2Freq>
 80059c6:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	085a      	lsrs	r2, r3, #1
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	441a      	add	r2, r3
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80059da:	b29b      	uxth	r3, r3
 80059dc:	61bb      	str	r3, [r7, #24]
        break;
 80059de:	e02b      	b.n	8005a38 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	085b      	lsrs	r3, r3, #1
 80059e6:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 80059ea:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	6852      	ldr	r2, [r2, #4]
 80059f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	61bb      	str	r3, [r7, #24]
        break;
 80059fa:	e01d      	b.n	8005a38 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059fc:	f7fe feda 	bl	80047b4 <HAL_RCC_GetSysClockFreq>
 8005a00:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	085a      	lsrs	r2, r3, #1
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	441a      	add	r2, r3
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	61bb      	str	r3, [r7, #24]
        break;
 8005a18:	e00e      	b.n	8005a38 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	085b      	lsrs	r3, r3, #1
 8005a20:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	61bb      	str	r3, [r7, #24]
        break;
 8005a30:	e002      	b.n	8005a38 <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	75fb      	strb	r3, [r7, #23]
        break;
 8005a36:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a38:	69bb      	ldr	r3, [r7, #24]
 8005a3a:	2b0f      	cmp	r3, #15
 8005a3c:	d908      	bls.n	8005a50 <UART_SetConfig+0x418>
 8005a3e:	69bb      	ldr	r3, [r7, #24]
 8005a40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a44:	d204      	bcs.n	8005a50 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	69ba      	ldr	r2, [r7, #24]
 8005a4c:	60da      	str	r2, [r3, #12]
 8005a4e:	e001      	b.n	8005a54 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005a60:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3720      	adds	r7, #32
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}
 8005a6a:	bf00      	nop

08005a6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b083      	sub	sp, #12
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a78:	f003 0301 	and.w	r3, r3, #1
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d00a      	beq.n	8005a96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	430a      	orrs	r2, r1
 8005a94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9a:	f003 0302 	and.w	r3, r3, #2
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d00a      	beq.n	8005ab8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	430a      	orrs	r2, r1
 8005ab6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005abc:	f003 0304 	and.w	r3, r3, #4
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d00a      	beq.n	8005ada <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	430a      	orrs	r2, r1
 8005ad8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ade:	f003 0308 	and.w	r3, r3, #8
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d00a      	beq.n	8005afc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	430a      	orrs	r2, r1
 8005afa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b00:	f003 0310 	and.w	r3, r3, #16
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d00a      	beq.n	8005b1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	430a      	orrs	r2, r1
 8005b1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b22:	f003 0320 	and.w	r3, r3, #32
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d00a      	beq.n	8005b40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	430a      	orrs	r2, r1
 8005b3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d01a      	beq.n	8005b82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	430a      	orrs	r2, r1
 8005b60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b6a:	d10a      	bne.n	8005b82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	430a      	orrs	r2, r1
 8005b80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d00a      	beq.n	8005ba4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	430a      	orrs	r2, r1
 8005ba2:	605a      	str	r2, [r3, #4]
  }
}
 8005ba4:	bf00      	nop
 8005ba6:	370c      	adds	r7, #12
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr

08005bb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b086      	sub	sp, #24
 8005bb4:	af02      	add	r7, sp, #8
 8005bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005bbe:	f7fb fc4d 	bl	800145c <HAL_GetTick>
 8005bc2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f003 0308 	and.w	r3, r3, #8
 8005bce:	2b08      	cmp	r3, #8
 8005bd0:	d10e      	bne.n	8005bf0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bd2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005bd6:	9300      	str	r3, [sp, #0]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f000 f82a 	bl	8005c3a <UART_WaitOnFlagUntilTimeout>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d001      	beq.n	8005bf0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bec:	2303      	movs	r3, #3
 8005bee:	e020      	b.n	8005c32 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f003 0304 	and.w	r3, r3, #4
 8005bfa:	2b04      	cmp	r3, #4
 8005bfc:	d10e      	bne.n	8005c1c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bfe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c02:	9300      	str	r3, [sp, #0]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f000 f814 	bl	8005c3a <UART_WaitOnFlagUntilTimeout>
 8005c12:	4603      	mov	r3, r0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d001      	beq.n	8005c1c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c18:	2303      	movs	r3, #3
 8005c1a:	e00a      	b.n	8005c32 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2220      	movs	r2, #32
 8005c20:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2220      	movs	r2, #32
 8005c26:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005c30:	2300      	movs	r3, #0
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3710      	adds	r7, #16
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}

08005c3a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c3a:	b580      	push	{r7, lr}
 8005c3c:	b084      	sub	sp, #16
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	60f8      	str	r0, [r7, #12]
 8005c42:	60b9      	str	r1, [r7, #8]
 8005c44:	603b      	str	r3, [r7, #0]
 8005c46:	4613      	mov	r3, r2
 8005c48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c4a:	e05d      	b.n	8005d08 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c4c:	69bb      	ldr	r3, [r7, #24]
 8005c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c52:	d059      	beq.n	8005d08 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c54:	f7fb fc02 	bl	800145c <HAL_GetTick>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	1ad3      	subs	r3, r2, r3
 8005c5e:	69ba      	ldr	r2, [r7, #24]
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d302      	bcc.n	8005c6a <UART_WaitOnFlagUntilTimeout+0x30>
 8005c64:	69bb      	ldr	r3, [r7, #24]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d11b      	bne.n	8005ca2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005c78:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	689a      	ldr	r2, [r3, #8]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f022 0201 	bic.w	r2, r2, #1
 8005c88:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2220      	movs	r2, #32
 8005c8e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2220      	movs	r2, #32
 8005c94:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005c9e:	2303      	movs	r3, #3
 8005ca0:	e042      	b.n	8005d28 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f003 0304 	and.w	r3, r3, #4
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d02b      	beq.n	8005d08 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	69db      	ldr	r3, [r3, #28]
 8005cb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cbe:	d123      	bne.n	8005d08 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005cc8:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005cd8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	689a      	ldr	r2, [r3, #8]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f022 0201 	bic.w	r2, r2, #1
 8005ce8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2220      	movs	r2, #32
 8005cee:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2220      	movs	r2, #32
 8005cf4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2220      	movs	r2, #32
 8005cfa:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8005d04:	2303      	movs	r3, #3
 8005d06:	e00f      	b.n	8005d28 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	69da      	ldr	r2, [r3, #28]
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	4013      	ands	r3, r2
 8005d12:	68ba      	ldr	r2, [r7, #8]
 8005d14:	429a      	cmp	r2, r3
 8005d16:	bf0c      	ite	eq
 8005d18:	2301      	moveq	r3, #1
 8005d1a:	2300      	movne	r3, #0
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	461a      	mov	r2, r3
 8005d20:	79fb      	ldrb	r3, [r7, #7]
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d092      	beq.n	8005c4c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d26:	2300      	movs	r3, #0
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3710      	adds	r7, #16
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}

08005d30 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b085      	sub	sp, #20
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005d38:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005d3c:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005d44:	b29a      	uxth	r2, r3
 8005d46:	89fb      	ldrh	r3, [r7, #14]
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	b29a      	uxth	r2, r3
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005d52:	2300      	movs	r3, #0
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3714      	adds	r7, #20
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr

08005d60 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b085      	sub	sp, #20
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005d68:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005d6c:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	b21a      	sxth	r2, r3
 8005d78:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005d7c:	43db      	mvns	r3, r3
 8005d7e:	b21b      	sxth	r3, r3
 8005d80:	4013      	ands	r3, r2
 8005d82:	b21b      	sxth	r3, r3
 8005d84:	b29a      	uxth	r2, r3
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005d8c:	2300      	movs	r3, #0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3714      	adds	r7, #20
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr

08005d9a <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005d9a:	b084      	sub	sp, #16
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b082      	sub	sp, #8
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	f107 0014 	add.w	r0, r7, #20
 8005da8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f7ff ffaf 	bl	8005d30 <USB_EnableGlobalInt>

  return HAL_OK;
 8005dd2:	2300      	movs	r3, #0
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3708      	adds	r7, #8
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005dde:	b004      	add	sp, #16
 8005de0:	4770      	bx	lr
	...

08005de4 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005de4:	b490      	push	{r4, r7}
 8005de6:	b086      	sub	sp, #24
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005dee:	2300      	movs	r3, #0
 8005df0:	75fb      	strb	r3, [r7, #23]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	4413      	add	r3, r2
 8005dfc:	881b      	ldrh	r3, [r3, #0]
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005e04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e08:	82bb      	strh	r3, [r7, #20]

  /* initialize Endpoint */
  switch (ep->type)
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	78db      	ldrb	r3, [r3, #3]
 8005e0e:	2b03      	cmp	r3, #3
 8005e10:	d819      	bhi.n	8005e46 <USB_ActivateEndpoint+0x62>
 8005e12:	a201      	add	r2, pc, #4	; (adr r2, 8005e18 <USB_ActivateEndpoint+0x34>)
 8005e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e18:	08005e29 	.word	0x08005e29
 8005e1c:	08005e3d 	.word	0x08005e3d
 8005e20:	08005e4d 	.word	0x08005e4d
 8005e24:	08005e33 	.word	0x08005e33
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005e28:	8abb      	ldrh	r3, [r7, #20]
 8005e2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005e2e:	82bb      	strh	r3, [r7, #20]
      break;
 8005e30:	e00d      	b.n	8005e4e <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005e32:	8abb      	ldrh	r3, [r7, #20]
 8005e34:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005e38:	82bb      	strh	r3, [r7, #20]
      break;
 8005e3a:	e008      	b.n	8005e4e <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005e3c:	8abb      	ldrh	r3, [r7, #20]
 8005e3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005e42:	82bb      	strh	r3, [r7, #20]
      break;
 8005e44:	e003      	b.n	8005e4e <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	75fb      	strb	r3, [r7, #23]
      break;
 8005e4a:	e000      	b.n	8005e4e <USB_ActivateEndpoint+0x6a>
      break;
 8005e4c:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	009b      	lsls	r3, r3, #2
 8005e56:	441a      	add	r2, r3
 8005e58:	8abb      	ldrh	r3, [r7, #20]
 8005e5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	4413      	add	r3, r2
 8005e78:	881b      	ldrh	r3, [r3, #0]
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	b21b      	sxth	r3, r3
 8005e7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e86:	b21a      	sxth	r2, r3
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	b21b      	sxth	r3, r3
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	b21b      	sxth	r3, r3
 8005e92:	b29c      	uxth	r4, r3
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	441a      	add	r2, r3
 8005e9e:	4b8c      	ldr	r3, [pc, #560]	; (80060d0 <USB_ActivateEndpoint+0x2ec>)
 8005ea0:	4323      	orrs	r3, r4
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	7b1b      	ldrb	r3, [r3, #12]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	f040 8116 	bne.w	80060dc <USB_ActivateEndpoint+0x2f8>
  {
    if (ep->is_in != 0U)
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	785b      	ldrb	r3, [r3, #1]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d067      	beq.n	8005f88 <USB_ActivateEndpoint+0x1a4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005eb8:	687c      	ldr	r4, [r7, #4]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	441c      	add	r4, r3
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	011b      	lsls	r3, r3, #4
 8005eca:	4423      	add	r3, r4
 8005ecc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ed0:	461c      	mov	r4, r3
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	88db      	ldrh	r3, [r3, #6]
 8005ed6:	085b      	lsrs	r3, r3, #1
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	005b      	lsls	r3, r3, #1
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ee0:	687a      	ldr	r2, [r7, #4]
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	781b      	ldrb	r3, [r3, #0]
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	4413      	add	r3, r2
 8005eea:	881b      	ldrh	r3, [r3, #0]
 8005eec:	b29c      	uxth	r4, r3
 8005eee:	4623      	mov	r3, r4
 8005ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d014      	beq.n	8005f22 <USB_ActivateEndpoint+0x13e>
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	009b      	lsls	r3, r3, #2
 8005f00:	4413      	add	r3, r2
 8005f02:	881b      	ldrh	r3, [r3, #0]
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f0e:	b29c      	uxth	r4, r3
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	009b      	lsls	r3, r3, #2
 8005f18:	441a      	add	r2, r3
 8005f1a:	4b6e      	ldr	r3, [pc, #440]	; (80060d4 <USB_ActivateEndpoint+0x2f0>)
 8005f1c:	4323      	orrs	r3, r4
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	78db      	ldrb	r3, [r3, #3]
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d018      	beq.n	8005f5c <USB_ActivateEndpoint+0x178>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005f2a:	687a      	ldr	r2, [r7, #4]
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	009b      	lsls	r3, r3, #2
 8005f32:	4413      	add	r3, r2
 8005f34:	881b      	ldrh	r3, [r3, #0]
 8005f36:	b29b      	uxth	r3, r3
 8005f38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f40:	b29c      	uxth	r4, r3
 8005f42:	f084 0320 	eor.w	r3, r4, #32
 8005f46:	b29c      	uxth	r4, r3
 8005f48:	687a      	ldr	r2, [r7, #4]
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	441a      	add	r2, r3
 8005f52:	4b5f      	ldr	r3, [pc, #380]	; (80060d0 <USB_ActivateEndpoint+0x2ec>)
 8005f54:	4323      	orrs	r3, r4
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	8013      	strh	r3, [r2, #0]
 8005f5a:	e22f      	b.n	80063bc <USB_ActivateEndpoint+0x5d8>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	781b      	ldrb	r3, [r3, #0]
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	4413      	add	r3, r2
 8005f66:	881b      	ldrh	r3, [r3, #0]
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f72:	b29c      	uxth	r4, r3
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	009b      	lsls	r3, r3, #2
 8005f7c:	441a      	add	r2, r3
 8005f7e:	4b54      	ldr	r3, [pc, #336]	; (80060d0 <USB_ActivateEndpoint+0x2ec>)
 8005f80:	4323      	orrs	r3, r4
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	8013      	strh	r3, [r2, #0]
 8005f86:	e219      	b.n	80063bc <USB_ActivateEndpoint+0x5d8>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005f88:	687c      	ldr	r4, [r7, #4]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	441c      	add	r4, r3
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	011b      	lsls	r3, r3, #4
 8005f9a:	4423      	add	r3, r4
 8005f9c:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005fa0:	461c      	mov	r4, r3
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	88db      	ldrh	r3, [r3, #6]
 8005fa6:	085b      	lsrs	r3, r3, #1
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	005b      	lsls	r3, r3, #1
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005fb0:	687c      	ldr	r4, [r7, #4]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	441c      	add	r4, r3
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	011b      	lsls	r3, r3, #4
 8005fc2:	4423      	add	r3, r4
 8005fc4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005fc8:	60fb      	str	r3, [r7, #12]
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	691b      	ldr	r3, [r3, #16]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d110      	bne.n	8005ff4 <USB_ActivateEndpoint+0x210>
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	881b      	ldrh	r3, [r3, #0]
 8005fd6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005fda:	b29a      	uxth	r2, r3
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	801a      	strh	r2, [r3, #0]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	881b      	ldrh	r3, [r3, #0]
 8005fe4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fe8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fec:	b29a      	uxth	r2, r3
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	801a      	strh	r2, [r3, #0]
 8005ff2:	e02f      	b.n	8006054 <USB_ActivateEndpoint+0x270>
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	691b      	ldr	r3, [r3, #16]
 8005ff8:	2b3e      	cmp	r3, #62	; 0x3e
 8005ffa:	d813      	bhi.n	8006024 <USB_ActivateEndpoint+0x240>
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	691b      	ldr	r3, [r3, #16]
 8006000:	085b      	lsrs	r3, r3, #1
 8006002:	613b      	str	r3, [r7, #16]
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	691b      	ldr	r3, [r3, #16]
 8006008:	f003 0301 	and.w	r3, r3, #1
 800600c:	2b00      	cmp	r3, #0
 800600e:	d002      	beq.n	8006016 <USB_ActivateEndpoint+0x232>
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	3301      	adds	r3, #1
 8006014:	613b      	str	r3, [r7, #16]
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	b29b      	uxth	r3, r3
 800601a:	029b      	lsls	r3, r3, #10
 800601c:	b29a      	uxth	r2, r3
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	801a      	strh	r2, [r3, #0]
 8006022:	e017      	b.n	8006054 <USB_ActivateEndpoint+0x270>
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	691b      	ldr	r3, [r3, #16]
 8006028:	095b      	lsrs	r3, r3, #5
 800602a:	613b      	str	r3, [r7, #16]
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	691b      	ldr	r3, [r3, #16]
 8006030:	f003 031f 	and.w	r3, r3, #31
 8006034:	2b00      	cmp	r3, #0
 8006036:	d102      	bne.n	800603e <USB_ActivateEndpoint+0x25a>
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	3b01      	subs	r3, #1
 800603c:	613b      	str	r3, [r7, #16]
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	b29b      	uxth	r3, r3
 8006042:	029b      	lsls	r3, r3, #10
 8006044:	b29b      	uxth	r3, r3
 8006046:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800604a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800604e:	b29a      	uxth	r2, r3
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006054:	687a      	ldr	r2, [r7, #4]
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	781b      	ldrb	r3, [r3, #0]
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	4413      	add	r3, r2
 800605e:	881b      	ldrh	r3, [r3, #0]
 8006060:	b29c      	uxth	r4, r3
 8006062:	4623      	mov	r3, r4
 8006064:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006068:	2b00      	cmp	r3, #0
 800606a:	d014      	beq.n	8006096 <USB_ActivateEndpoint+0x2b2>
 800606c:	687a      	ldr	r2, [r7, #4]
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	009b      	lsls	r3, r3, #2
 8006074:	4413      	add	r3, r2
 8006076:	881b      	ldrh	r3, [r3, #0]
 8006078:	b29b      	uxth	r3, r3
 800607a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800607e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006082:	b29c      	uxth	r4, r3
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	009b      	lsls	r3, r3, #2
 800608c:	441a      	add	r2, r3
 800608e:	4b12      	ldr	r3, [pc, #72]	; (80060d8 <USB_ActivateEndpoint+0x2f4>)
 8006090:	4323      	orrs	r3, r4
 8006092:	b29b      	uxth	r3, r3
 8006094:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006096:	687a      	ldr	r2, [r7, #4]
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	4413      	add	r3, r2
 80060a0:	881b      	ldrh	r3, [r3, #0]
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060ac:	b29c      	uxth	r4, r3
 80060ae:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80060b2:	b29c      	uxth	r4, r3
 80060b4:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80060b8:	b29c      	uxth	r4, r3
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	781b      	ldrb	r3, [r3, #0]
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	441a      	add	r2, r3
 80060c4:	4b02      	ldr	r3, [pc, #8]	; (80060d0 <USB_ActivateEndpoint+0x2ec>)
 80060c6:	4323      	orrs	r3, r4
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	8013      	strh	r3, [r2, #0]
 80060cc:	e176      	b.n	80063bc <USB_ActivateEndpoint+0x5d8>
 80060ce:	bf00      	nop
 80060d0:	ffff8080 	.word	0xffff8080
 80060d4:	ffff80c0 	.word	0xffff80c0
 80060d8:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80060dc:	687a      	ldr	r2, [r7, #4]
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	781b      	ldrb	r3, [r3, #0]
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	4413      	add	r3, r2
 80060e6:	881b      	ldrh	r3, [r3, #0]
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060f2:	b29c      	uxth	r4, r3
 80060f4:	687a      	ldr	r2, [r7, #4]
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	009b      	lsls	r3, r3, #2
 80060fc:	441a      	add	r2, r3
 80060fe:	4b96      	ldr	r3, [pc, #600]	; (8006358 <USB_ActivateEndpoint+0x574>)
 8006100:	4323      	orrs	r3, r4
 8006102:	b29b      	uxth	r3, r3
 8006104:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006106:	687c      	ldr	r4, [r7, #4]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800610e:	b29b      	uxth	r3, r3
 8006110:	441c      	add	r4, r3
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	781b      	ldrb	r3, [r3, #0]
 8006116:	011b      	lsls	r3, r3, #4
 8006118:	4423      	add	r3, r4
 800611a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800611e:	461c      	mov	r4, r3
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	891b      	ldrh	r3, [r3, #8]
 8006124:	085b      	lsrs	r3, r3, #1
 8006126:	b29b      	uxth	r3, r3
 8006128:	005b      	lsls	r3, r3, #1
 800612a:	b29b      	uxth	r3, r3
 800612c:	8023      	strh	r3, [r4, #0]
 800612e:	687c      	ldr	r4, [r7, #4]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006136:	b29b      	uxth	r3, r3
 8006138:	441c      	add	r4, r3
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	781b      	ldrb	r3, [r3, #0]
 800613e:	011b      	lsls	r3, r3, #4
 8006140:	4423      	add	r3, r4
 8006142:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006146:	461c      	mov	r4, r3
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	895b      	ldrh	r3, [r3, #10]
 800614c:	085b      	lsrs	r3, r3, #1
 800614e:	b29b      	uxth	r3, r3
 8006150:	005b      	lsls	r3, r3, #1
 8006152:	b29b      	uxth	r3, r3
 8006154:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	785b      	ldrb	r3, [r3, #1]
 800615a:	2b00      	cmp	r3, #0
 800615c:	f040 8088 	bne.w	8006270 <USB_ActivateEndpoint+0x48c>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	009b      	lsls	r3, r3, #2
 8006168:	4413      	add	r3, r2
 800616a:	881b      	ldrh	r3, [r3, #0]
 800616c:	b29c      	uxth	r4, r3
 800616e:	4623      	mov	r3, r4
 8006170:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006174:	2b00      	cmp	r3, #0
 8006176:	d014      	beq.n	80061a2 <USB_ActivateEndpoint+0x3be>
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	4413      	add	r3, r2
 8006182:	881b      	ldrh	r3, [r3, #0]
 8006184:	b29b      	uxth	r3, r3
 8006186:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800618a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800618e:	b29c      	uxth	r4, r3
 8006190:	687a      	ldr	r2, [r7, #4]
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	441a      	add	r2, r3
 800619a:	4b70      	ldr	r3, [pc, #448]	; (800635c <USB_ActivateEndpoint+0x578>)
 800619c:	4323      	orrs	r3, r4
 800619e:	b29b      	uxth	r3, r3
 80061a0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80061a2:	687a      	ldr	r2, [r7, #4]
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	781b      	ldrb	r3, [r3, #0]
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	4413      	add	r3, r2
 80061ac:	881b      	ldrh	r3, [r3, #0]
 80061ae:	b29c      	uxth	r4, r3
 80061b0:	4623      	mov	r3, r4
 80061b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d014      	beq.n	80061e4 <USB_ActivateEndpoint+0x400>
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	009b      	lsls	r3, r3, #2
 80061c2:	4413      	add	r3, r2
 80061c4:	881b      	ldrh	r3, [r3, #0]
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061d0:	b29c      	uxth	r4, r3
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	781b      	ldrb	r3, [r3, #0]
 80061d8:	009b      	lsls	r3, r3, #2
 80061da:	441a      	add	r2, r3
 80061dc:	4b60      	ldr	r3, [pc, #384]	; (8006360 <USB_ActivateEndpoint+0x57c>)
 80061de:	4323      	orrs	r3, r4
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	781b      	ldrb	r3, [r3, #0]
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	4413      	add	r3, r2
 80061ee:	881b      	ldrh	r3, [r3, #0]
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061fa:	b29c      	uxth	r4, r3
 80061fc:	687a      	ldr	r2, [r7, #4]
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	441a      	add	r2, r3
 8006206:	4b56      	ldr	r3, [pc, #344]	; (8006360 <USB_ActivateEndpoint+0x57c>)
 8006208:	4323      	orrs	r3, r4
 800620a:	b29b      	uxth	r3, r3
 800620c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	009b      	lsls	r3, r3, #2
 8006216:	4413      	add	r3, r2
 8006218:	881b      	ldrh	r3, [r3, #0]
 800621a:	b29b      	uxth	r3, r3
 800621c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006220:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006224:	b29c      	uxth	r4, r3
 8006226:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800622a:	b29c      	uxth	r4, r3
 800622c:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8006230:	b29c      	uxth	r4, r3
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	781b      	ldrb	r3, [r3, #0]
 8006238:	009b      	lsls	r3, r3, #2
 800623a:	441a      	add	r2, r3
 800623c:	4b49      	ldr	r3, [pc, #292]	; (8006364 <USB_ActivateEndpoint+0x580>)
 800623e:	4323      	orrs	r3, r4
 8006240:	b29b      	uxth	r3, r3
 8006242:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	781b      	ldrb	r3, [r3, #0]
 800624a:	009b      	lsls	r3, r3, #2
 800624c:	4413      	add	r3, r2
 800624e:	881b      	ldrh	r3, [r3, #0]
 8006250:	b29b      	uxth	r3, r3
 8006252:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006256:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800625a:	b29c      	uxth	r4, r3
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	441a      	add	r2, r3
 8006266:	4b3f      	ldr	r3, [pc, #252]	; (8006364 <USB_ActivateEndpoint+0x580>)
 8006268:	4323      	orrs	r3, r4
 800626a:	b29b      	uxth	r3, r3
 800626c:	8013      	strh	r3, [r2, #0]
 800626e:	e0a5      	b.n	80063bc <USB_ActivateEndpoint+0x5d8>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	781b      	ldrb	r3, [r3, #0]
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	4413      	add	r3, r2
 800627a:	881b      	ldrh	r3, [r3, #0]
 800627c:	b29c      	uxth	r4, r3
 800627e:	4623      	mov	r3, r4
 8006280:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006284:	2b00      	cmp	r3, #0
 8006286:	d014      	beq.n	80062b2 <USB_ActivateEndpoint+0x4ce>
 8006288:	687a      	ldr	r2, [r7, #4]
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	781b      	ldrb	r3, [r3, #0]
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	4413      	add	r3, r2
 8006292:	881b      	ldrh	r3, [r3, #0]
 8006294:	b29b      	uxth	r3, r3
 8006296:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800629a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800629e:	b29c      	uxth	r4, r3
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	781b      	ldrb	r3, [r3, #0]
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	441a      	add	r2, r3
 80062aa:	4b2c      	ldr	r3, [pc, #176]	; (800635c <USB_ActivateEndpoint+0x578>)
 80062ac:	4323      	orrs	r3, r4
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	781b      	ldrb	r3, [r3, #0]
 80062b8:	009b      	lsls	r3, r3, #2
 80062ba:	4413      	add	r3, r2
 80062bc:	881b      	ldrh	r3, [r3, #0]
 80062be:	b29c      	uxth	r4, r3
 80062c0:	4623      	mov	r3, r4
 80062c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d014      	beq.n	80062f4 <USB_ActivateEndpoint+0x510>
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	009b      	lsls	r3, r3, #2
 80062d2:	4413      	add	r3, r2
 80062d4:	881b      	ldrh	r3, [r3, #0]
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062e0:	b29c      	uxth	r4, r3
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	441a      	add	r2, r3
 80062ec:	4b1c      	ldr	r3, [pc, #112]	; (8006360 <USB_ActivateEndpoint+0x57c>)
 80062ee:	4323      	orrs	r3, r4
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	009b      	lsls	r3, r3, #2
 80062fc:	4413      	add	r3, r2
 80062fe:	881b      	ldrh	r3, [r3, #0]
 8006300:	b29b      	uxth	r3, r3
 8006302:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800630a:	b29c      	uxth	r4, r3
 800630c:	687a      	ldr	r2, [r7, #4]
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	781b      	ldrb	r3, [r3, #0]
 8006312:	009b      	lsls	r3, r3, #2
 8006314:	441a      	add	r2, r3
 8006316:	4b11      	ldr	r3, [pc, #68]	; (800635c <USB_ActivateEndpoint+0x578>)
 8006318:	4323      	orrs	r3, r4
 800631a:	b29b      	uxth	r3, r3
 800631c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	78db      	ldrb	r3, [r3, #3]
 8006322:	2b01      	cmp	r3, #1
 8006324:	d020      	beq.n	8006368 <USB_ActivateEndpoint+0x584>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006326:	687a      	ldr	r2, [r7, #4]
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	781b      	ldrb	r3, [r3, #0]
 800632c:	009b      	lsls	r3, r3, #2
 800632e:	4413      	add	r3, r2
 8006330:	881b      	ldrh	r3, [r3, #0]
 8006332:	b29b      	uxth	r3, r3
 8006334:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006338:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800633c:	b29c      	uxth	r4, r3
 800633e:	f084 0320 	eor.w	r3, r4, #32
 8006342:	b29c      	uxth	r4, r3
 8006344:	687a      	ldr	r2, [r7, #4]
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	009b      	lsls	r3, r3, #2
 800634c:	441a      	add	r2, r3
 800634e:	4b05      	ldr	r3, [pc, #20]	; (8006364 <USB_ActivateEndpoint+0x580>)
 8006350:	4323      	orrs	r3, r4
 8006352:	b29b      	uxth	r3, r3
 8006354:	8013      	strh	r3, [r2, #0]
 8006356:	e01c      	b.n	8006392 <USB_ActivateEndpoint+0x5ae>
 8006358:	ffff8180 	.word	0xffff8180
 800635c:	ffffc080 	.word	0xffffc080
 8006360:	ffff80c0 	.word	0xffff80c0
 8006364:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	781b      	ldrb	r3, [r3, #0]
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	4413      	add	r3, r2
 8006372:	881b      	ldrh	r3, [r3, #0]
 8006374:	b29b      	uxth	r3, r3
 8006376:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800637a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800637e:	b29c      	uxth	r4, r3
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	781b      	ldrb	r3, [r3, #0]
 8006386:	009b      	lsls	r3, r3, #2
 8006388:	441a      	add	r2, r3
 800638a:	4b0f      	ldr	r3, [pc, #60]	; (80063c8 <USB_ActivateEndpoint+0x5e4>)
 800638c:	4323      	orrs	r3, r4
 800638e:	b29b      	uxth	r3, r3
 8006390:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	4413      	add	r3, r2
 800639c:	881b      	ldrh	r3, [r3, #0]
 800639e:	b29b      	uxth	r3, r3
 80063a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063a8:	b29c      	uxth	r4, r3
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	781b      	ldrb	r3, [r3, #0]
 80063b0:	009b      	lsls	r3, r3, #2
 80063b2:	441a      	add	r2, r3
 80063b4:	4b04      	ldr	r3, [pc, #16]	; (80063c8 <USB_ActivateEndpoint+0x5e4>)
 80063b6:	4323      	orrs	r3, r4
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80063bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3718      	adds	r7, #24
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bc90      	pop	{r4, r7}
 80063c6:	4770      	bx	lr
 80063c8:	ffff8080 	.word	0xffff8080

080063cc <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80063cc:	b490      	push	{r4, r7}
 80063ce:	b082      	sub	sp, #8
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	7b1b      	ldrb	r3, [r3, #12]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d171      	bne.n	80064c2 <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	785b      	ldrb	r3, [r3, #1]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d036      	beq.n	8006454 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	781b      	ldrb	r3, [r3, #0]
 80063ec:	009b      	lsls	r3, r3, #2
 80063ee:	4413      	add	r3, r2
 80063f0:	881b      	ldrh	r3, [r3, #0]
 80063f2:	b29c      	uxth	r4, r3
 80063f4:	4623      	mov	r3, r4
 80063f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d014      	beq.n	8006428 <USB_DeactivateEndpoint+0x5c>
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	781b      	ldrb	r3, [r3, #0]
 8006404:	009b      	lsls	r3, r3, #2
 8006406:	4413      	add	r3, r2
 8006408:	881b      	ldrh	r3, [r3, #0]
 800640a:	b29b      	uxth	r3, r3
 800640c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006410:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006414:	b29c      	uxth	r4, r3
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	781b      	ldrb	r3, [r3, #0]
 800641c:	009b      	lsls	r3, r3, #2
 800641e:	441a      	add	r2, r3
 8006420:	4b6b      	ldr	r3, [pc, #428]	; (80065d0 <USB_DeactivateEndpoint+0x204>)
 8006422:	4323      	orrs	r3, r4
 8006424:	b29b      	uxth	r3, r3
 8006426:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	781b      	ldrb	r3, [r3, #0]
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	4413      	add	r3, r2
 8006432:	881b      	ldrh	r3, [r3, #0]
 8006434:	b29b      	uxth	r3, r3
 8006436:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800643a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800643e:	b29c      	uxth	r4, r3
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	781b      	ldrb	r3, [r3, #0]
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	441a      	add	r2, r3
 800644a:	4b62      	ldr	r3, [pc, #392]	; (80065d4 <USB_DeactivateEndpoint+0x208>)
 800644c:	4323      	orrs	r3, r4
 800644e:	b29b      	uxth	r3, r3
 8006450:	8013      	strh	r3, [r2, #0]
 8006452:	e144      	b.n	80066de <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	781b      	ldrb	r3, [r3, #0]
 800645a:	009b      	lsls	r3, r3, #2
 800645c:	4413      	add	r3, r2
 800645e:	881b      	ldrh	r3, [r3, #0]
 8006460:	b29c      	uxth	r4, r3
 8006462:	4623      	mov	r3, r4
 8006464:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006468:	2b00      	cmp	r3, #0
 800646a:	d014      	beq.n	8006496 <USB_DeactivateEndpoint+0xca>
 800646c:	687a      	ldr	r2, [r7, #4]
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	781b      	ldrb	r3, [r3, #0]
 8006472:	009b      	lsls	r3, r3, #2
 8006474:	4413      	add	r3, r2
 8006476:	881b      	ldrh	r3, [r3, #0]
 8006478:	b29b      	uxth	r3, r3
 800647a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800647e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006482:	b29c      	uxth	r4, r3
 8006484:	687a      	ldr	r2, [r7, #4]
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	781b      	ldrb	r3, [r3, #0]
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	441a      	add	r2, r3
 800648e:	4b52      	ldr	r3, [pc, #328]	; (80065d8 <USB_DeactivateEndpoint+0x20c>)
 8006490:	4323      	orrs	r3, r4
 8006492:	b29b      	uxth	r3, r3
 8006494:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006496:	687a      	ldr	r2, [r7, #4]
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	009b      	lsls	r3, r3, #2
 800649e:	4413      	add	r3, r2
 80064a0:	881b      	ldrh	r3, [r3, #0]
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064ac:	b29c      	uxth	r4, r3
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	009b      	lsls	r3, r3, #2
 80064b6:	441a      	add	r2, r3
 80064b8:	4b46      	ldr	r3, [pc, #280]	; (80065d4 <USB_DeactivateEndpoint+0x208>)
 80064ba:	4323      	orrs	r3, r4
 80064bc:	b29b      	uxth	r3, r3
 80064be:	8013      	strh	r3, [r2, #0]
 80064c0:	e10d      	b.n	80066de <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	785b      	ldrb	r3, [r3, #1]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	f040 8088 	bne.w	80065dc <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80064cc:	687a      	ldr	r2, [r7, #4]
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	781b      	ldrb	r3, [r3, #0]
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	4413      	add	r3, r2
 80064d6:	881b      	ldrh	r3, [r3, #0]
 80064d8:	b29c      	uxth	r4, r3
 80064da:	4623      	mov	r3, r4
 80064dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d014      	beq.n	800650e <USB_DeactivateEndpoint+0x142>
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	4413      	add	r3, r2
 80064ee:	881b      	ldrh	r3, [r3, #0]
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064fa:	b29c      	uxth	r4, r3
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	781b      	ldrb	r3, [r3, #0]
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	441a      	add	r2, r3
 8006506:	4b34      	ldr	r3, [pc, #208]	; (80065d8 <USB_DeactivateEndpoint+0x20c>)
 8006508:	4323      	orrs	r3, r4
 800650a:	b29b      	uxth	r3, r3
 800650c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	009b      	lsls	r3, r3, #2
 8006516:	4413      	add	r3, r2
 8006518:	881b      	ldrh	r3, [r3, #0]
 800651a:	b29c      	uxth	r4, r3
 800651c:	4623      	mov	r3, r4
 800651e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006522:	2b00      	cmp	r3, #0
 8006524:	d014      	beq.n	8006550 <USB_DeactivateEndpoint+0x184>
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	009b      	lsls	r3, r3, #2
 800652e:	4413      	add	r3, r2
 8006530:	881b      	ldrh	r3, [r3, #0]
 8006532:	b29b      	uxth	r3, r3
 8006534:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006538:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800653c:	b29c      	uxth	r4, r3
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	441a      	add	r2, r3
 8006548:	4b21      	ldr	r3, [pc, #132]	; (80065d0 <USB_DeactivateEndpoint+0x204>)
 800654a:	4323      	orrs	r3, r4
 800654c:	b29b      	uxth	r3, r3
 800654e:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	4413      	add	r3, r2
 800655a:	881b      	ldrh	r3, [r3, #0]
 800655c:	b29b      	uxth	r3, r3
 800655e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006566:	b29c      	uxth	r4, r3
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	009b      	lsls	r3, r3, #2
 8006570:	441a      	add	r2, r3
 8006572:	4b17      	ldr	r3, [pc, #92]	; (80065d0 <USB_DeactivateEndpoint+0x204>)
 8006574:	4323      	orrs	r3, r4
 8006576:	b29b      	uxth	r3, r3
 8006578:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	781b      	ldrb	r3, [r3, #0]
 8006580:	009b      	lsls	r3, r3, #2
 8006582:	4413      	add	r3, r2
 8006584:	881b      	ldrh	r3, [r3, #0]
 8006586:	b29b      	uxth	r3, r3
 8006588:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800658c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006590:	b29c      	uxth	r4, r3
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	781b      	ldrb	r3, [r3, #0]
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	441a      	add	r2, r3
 800659c:	4b0d      	ldr	r3, [pc, #52]	; (80065d4 <USB_DeactivateEndpoint+0x208>)
 800659e:	4323      	orrs	r3, r4
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	781b      	ldrb	r3, [r3, #0]
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	4413      	add	r3, r2
 80065ae:	881b      	ldrh	r3, [r3, #0]
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065ba:	b29c      	uxth	r4, r3
 80065bc:	687a      	ldr	r2, [r7, #4]
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	441a      	add	r2, r3
 80065c6:	4b03      	ldr	r3, [pc, #12]	; (80065d4 <USB_DeactivateEndpoint+0x208>)
 80065c8:	4323      	orrs	r3, r4
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	8013      	strh	r3, [r2, #0]
 80065ce:	e086      	b.n	80066de <USB_DeactivateEndpoint+0x312>
 80065d0:	ffff80c0 	.word	0xffff80c0
 80065d4:	ffff8080 	.word	0xffff8080
 80065d8:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	4413      	add	r3, r2
 80065e6:	881b      	ldrh	r3, [r3, #0]
 80065e8:	b29c      	uxth	r4, r3
 80065ea:	4623      	mov	r3, r4
 80065ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d014      	beq.n	800661e <USB_DeactivateEndpoint+0x252>
 80065f4:	687a      	ldr	r2, [r7, #4]
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	781b      	ldrb	r3, [r3, #0]
 80065fa:	009b      	lsls	r3, r3, #2
 80065fc:	4413      	add	r3, r2
 80065fe:	881b      	ldrh	r3, [r3, #0]
 8006600:	b29b      	uxth	r3, r3
 8006602:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800660a:	b29c      	uxth	r4, r3
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	009b      	lsls	r3, r3, #2
 8006614:	441a      	add	r2, r3
 8006616:	4b35      	ldr	r3, [pc, #212]	; (80066ec <USB_DeactivateEndpoint+0x320>)
 8006618:	4323      	orrs	r3, r4
 800661a:	b29b      	uxth	r3, r3
 800661c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	009b      	lsls	r3, r3, #2
 8006626:	4413      	add	r3, r2
 8006628:	881b      	ldrh	r3, [r3, #0]
 800662a:	b29c      	uxth	r4, r3
 800662c:	4623      	mov	r3, r4
 800662e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006632:	2b00      	cmp	r3, #0
 8006634:	d014      	beq.n	8006660 <USB_DeactivateEndpoint+0x294>
 8006636:	687a      	ldr	r2, [r7, #4]
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	009b      	lsls	r3, r3, #2
 800663e:	4413      	add	r3, r2
 8006640:	881b      	ldrh	r3, [r3, #0]
 8006642:	b29b      	uxth	r3, r3
 8006644:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006648:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800664c:	b29c      	uxth	r4, r3
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	441a      	add	r2, r3
 8006658:	4b25      	ldr	r3, [pc, #148]	; (80066f0 <USB_DeactivateEndpoint+0x324>)
 800665a:	4323      	orrs	r3, r4
 800665c:	b29b      	uxth	r3, r3
 800665e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	009b      	lsls	r3, r3, #2
 8006668:	4413      	add	r3, r2
 800666a:	881b      	ldrh	r3, [r3, #0]
 800666c:	b29b      	uxth	r3, r3
 800666e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006676:	b29c      	uxth	r4, r3
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	009b      	lsls	r3, r3, #2
 8006680:	441a      	add	r2, r3
 8006682:	4b1a      	ldr	r3, [pc, #104]	; (80066ec <USB_DeactivateEndpoint+0x320>)
 8006684:	4323      	orrs	r3, r4
 8006686:	b29b      	uxth	r3, r3
 8006688:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	009b      	lsls	r3, r3, #2
 8006692:	4413      	add	r3, r2
 8006694:	881b      	ldrh	r3, [r3, #0]
 8006696:	b29b      	uxth	r3, r3
 8006698:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800669c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066a0:	b29c      	uxth	r4, r3
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	009b      	lsls	r3, r3, #2
 80066aa:	441a      	add	r2, r3
 80066ac:	4b11      	ldr	r3, [pc, #68]	; (80066f4 <USB_DeactivateEndpoint+0x328>)
 80066ae:	4323      	orrs	r3, r4
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80066b4:	687a      	ldr	r2, [r7, #4]
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	781b      	ldrb	r3, [r3, #0]
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	4413      	add	r3, r2
 80066be:	881b      	ldrh	r3, [r3, #0]
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066ca:	b29c      	uxth	r4, r3
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	781b      	ldrb	r3, [r3, #0]
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	441a      	add	r2, r3
 80066d6:	4b07      	ldr	r3, [pc, #28]	; (80066f4 <USB_DeactivateEndpoint+0x328>)
 80066d8:	4323      	orrs	r3, r4
 80066da:	b29b      	uxth	r3, r3
 80066dc:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80066de:	2300      	movs	r3, #0
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3708      	adds	r7, #8
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bc90      	pop	{r4, r7}
 80066e8:	4770      	bx	lr
 80066ea:	bf00      	nop
 80066ec:	ffffc080 	.word	0xffffc080
 80066f0:	ffff80c0 	.word	0xffff80c0
 80066f4:	ffff8080 	.word	0xffff8080

080066f8 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80066f8:	b590      	push	{r4, r7, lr}
 80066fa:	b095      	sub	sp, #84	; 0x54
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	785b      	ldrb	r3, [r3, #1]
 8006706:	2b01      	cmp	r3, #1
 8006708:	f040 816d 	bne.w	80069e6 <USB_EPStartXfer+0x2ee>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	699a      	ldr	r2, [r3, #24]
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	691b      	ldr	r3, [r3, #16]
 8006714:	429a      	cmp	r2, r3
 8006716:	d909      	bls.n	800672c <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	691b      	ldr	r3, [r3, #16]
 800671c:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	699a      	ldr	r2, [r3, #24]
 8006722:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006724:	1ad2      	subs	r2, r2, r3
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	619a      	str	r2, [r3, #24]
 800672a:	e005      	b.n	8006738 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	699b      	ldr	r3, [r3, #24]
 8006730:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	2200      	movs	r2, #0
 8006736:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	7b1b      	ldrb	r3, [r3, #12]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d11a      	bne.n	8006776 <USB_EPStartXfer+0x7e>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	6959      	ldr	r1, [r3, #20]
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	88da      	ldrh	r2, [r3, #6]
 8006748:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800674a:	b29b      	uxth	r3, r3
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f000 fbb6 	bl	8006ebe <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006752:	687c      	ldr	r4, [r7, #4]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800675a:	b29b      	uxth	r3, r3
 800675c:	441c      	add	r4, r3
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	781b      	ldrb	r3, [r3, #0]
 8006762:	011b      	lsls	r3, r3, #4
 8006764:	4423      	add	r3, r4
 8006766:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800676a:	60fb      	str	r3, [r7, #12]
 800676c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800676e:	b29a      	uxth	r2, r3
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	801a      	strh	r2, [r3, #0]
 8006774:	e11b      	b.n	80069ae <USB_EPStartXfer+0x2b6>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	009b      	lsls	r3, r3, #2
 800677e:	4413      	add	r3, r2
 8006780:	881b      	ldrh	r3, [r3, #0]
 8006782:	b29b      	uxth	r3, r3
 8006784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006788:	2b00      	cmp	r3, #0
 800678a:	d06a      	beq.n	8006862 <USB_EPStartXfer+0x16a>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800678c:	687c      	ldr	r4, [r7, #4]
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	785b      	ldrb	r3, [r3, #1]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d14c      	bne.n	8006830 <USB_EPStartXfer+0x138>
 8006796:	687c      	ldr	r4, [r7, #4]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800679e:	b29b      	uxth	r3, r3
 80067a0:	441c      	add	r4, r3
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	781b      	ldrb	r3, [r3, #0]
 80067a6:	011b      	lsls	r3, r3, #4
 80067a8:	4423      	add	r3, r4
 80067aa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80067ae:	613b      	str	r3, [r7, #16]
 80067b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d110      	bne.n	80067d8 <USB_EPStartXfer+0xe0>
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	881b      	ldrh	r3, [r3, #0]
 80067ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80067be:	b29a      	uxth	r2, r3
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	801a      	strh	r2, [r3, #0]
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	881b      	ldrh	r3, [r3, #0]
 80067c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067d0:	b29a      	uxth	r2, r3
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	801a      	strh	r2, [r3, #0]
 80067d6:	e03f      	b.n	8006858 <USB_EPStartXfer+0x160>
 80067d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067da:	2b3e      	cmp	r3, #62	; 0x3e
 80067dc:	d811      	bhi.n	8006802 <USB_EPStartXfer+0x10a>
 80067de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067e0:	085b      	lsrs	r3, r3, #1
 80067e2:	647b      	str	r3, [r7, #68]	; 0x44
 80067e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067e6:	f003 0301 	and.w	r3, r3, #1
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d002      	beq.n	80067f4 <USB_EPStartXfer+0xfc>
 80067ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067f0:	3301      	adds	r3, #1
 80067f2:	647b      	str	r3, [r7, #68]	; 0x44
 80067f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	029b      	lsls	r3, r3, #10
 80067fa:	b29a      	uxth	r2, r3
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	801a      	strh	r2, [r3, #0]
 8006800:	e02a      	b.n	8006858 <USB_EPStartXfer+0x160>
 8006802:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006804:	095b      	lsrs	r3, r3, #5
 8006806:	647b      	str	r3, [r7, #68]	; 0x44
 8006808:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800680a:	f003 031f 	and.w	r3, r3, #31
 800680e:	2b00      	cmp	r3, #0
 8006810:	d102      	bne.n	8006818 <USB_EPStartXfer+0x120>
 8006812:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006814:	3b01      	subs	r3, #1
 8006816:	647b      	str	r3, [r7, #68]	; 0x44
 8006818:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800681a:	b29b      	uxth	r3, r3
 800681c:	029b      	lsls	r3, r3, #10
 800681e:	b29b      	uxth	r3, r3
 8006820:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006824:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006828:	b29a      	uxth	r2, r3
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	801a      	strh	r2, [r3, #0]
 800682e:	e013      	b.n	8006858 <USB_EPStartXfer+0x160>
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	785b      	ldrb	r3, [r3, #1]
 8006834:	2b01      	cmp	r3, #1
 8006836:	d10f      	bne.n	8006858 <USB_EPStartXfer+0x160>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800683e:	b29b      	uxth	r3, r3
 8006840:	441c      	add	r4, r3
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	011b      	lsls	r3, r3, #4
 8006848:	4423      	add	r3, r4
 800684a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800684e:	617b      	str	r3, [r7, #20]
 8006850:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006852:	b29a      	uxth	r2, r3
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	895b      	ldrh	r3, [r3, #10]
 800685c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006860:	e069      	b.n	8006936 <USB_EPStartXfer+0x23e>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	785b      	ldrb	r3, [r3, #1]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d14c      	bne.n	8006904 <USB_EPStartXfer+0x20c>
 800686a:	687c      	ldr	r4, [r7, #4]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006872:	b29b      	uxth	r3, r3
 8006874:	441c      	add	r4, r3
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	011b      	lsls	r3, r3, #4
 800687c:	4423      	add	r3, r4
 800687e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006882:	61bb      	str	r3, [r7, #24]
 8006884:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006886:	2b00      	cmp	r3, #0
 8006888:	d110      	bne.n	80068ac <USB_EPStartXfer+0x1b4>
 800688a:	69bb      	ldr	r3, [r7, #24]
 800688c:	881b      	ldrh	r3, [r3, #0]
 800688e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006892:	b29a      	uxth	r2, r3
 8006894:	69bb      	ldr	r3, [r7, #24]
 8006896:	801a      	strh	r2, [r3, #0]
 8006898:	69bb      	ldr	r3, [r7, #24]
 800689a:	881b      	ldrh	r3, [r3, #0]
 800689c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068a4:	b29a      	uxth	r2, r3
 80068a6:	69bb      	ldr	r3, [r7, #24]
 80068a8:	801a      	strh	r2, [r3, #0]
 80068aa:	e040      	b.n	800692e <USB_EPStartXfer+0x236>
 80068ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068ae:	2b3e      	cmp	r3, #62	; 0x3e
 80068b0:	d811      	bhi.n	80068d6 <USB_EPStartXfer+0x1de>
 80068b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068b4:	085b      	lsrs	r3, r3, #1
 80068b6:	643b      	str	r3, [r7, #64]	; 0x40
 80068b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068ba:	f003 0301 	and.w	r3, r3, #1
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d002      	beq.n	80068c8 <USB_EPStartXfer+0x1d0>
 80068c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068c4:	3301      	adds	r3, #1
 80068c6:	643b      	str	r3, [r7, #64]	; 0x40
 80068c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	029b      	lsls	r3, r3, #10
 80068ce:	b29a      	uxth	r2, r3
 80068d0:	69bb      	ldr	r3, [r7, #24]
 80068d2:	801a      	strh	r2, [r3, #0]
 80068d4:	e02b      	b.n	800692e <USB_EPStartXfer+0x236>
 80068d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068d8:	095b      	lsrs	r3, r3, #5
 80068da:	643b      	str	r3, [r7, #64]	; 0x40
 80068dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068de:	f003 031f 	and.w	r3, r3, #31
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d102      	bne.n	80068ec <USB_EPStartXfer+0x1f4>
 80068e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068e8:	3b01      	subs	r3, #1
 80068ea:	643b      	str	r3, [r7, #64]	; 0x40
 80068ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	029b      	lsls	r3, r3, #10
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068fc:	b29a      	uxth	r2, r3
 80068fe:	69bb      	ldr	r3, [r7, #24]
 8006900:	801a      	strh	r2, [r3, #0]
 8006902:	e014      	b.n	800692e <USB_EPStartXfer+0x236>
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	785b      	ldrb	r3, [r3, #1]
 8006908:	2b01      	cmp	r3, #1
 800690a:	d110      	bne.n	800692e <USB_EPStartXfer+0x236>
 800690c:	687c      	ldr	r4, [r7, #4]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006914:	b29b      	uxth	r3, r3
 8006916:	441c      	add	r4, r3
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	781b      	ldrb	r3, [r3, #0]
 800691c:	011b      	lsls	r3, r3, #4
 800691e:	4423      	add	r3, r4
 8006920:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006924:	61fb      	str	r3, [r7, #28]
 8006926:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006928:	b29a      	uxth	r2, r3
 800692a:	69fb      	ldr	r3, [r7, #28]
 800692c:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr0;
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	891b      	ldrh	r3, [r3, #8]
 8006932:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	6959      	ldr	r1, [r3, #20]
 800693a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800693c:	b29b      	uxth	r3, r3
 800693e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f000 fabb 	bl	8006ebe <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	785b      	ldrb	r3, [r3, #1]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d115      	bne.n	800697c <USB_EPStartXfer+0x284>
 8006950:	687a      	ldr	r2, [r7, #4]
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	781b      	ldrb	r3, [r3, #0]
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	4413      	add	r3, r2
 800695a:	881b      	ldrh	r3, [r3, #0]
 800695c:	b29b      	uxth	r3, r3
 800695e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006966:	b29c      	uxth	r4, r3
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	009b      	lsls	r3, r3, #2
 8006970:	441a      	add	r2, r3
 8006972:	4b96      	ldr	r3, [pc, #600]	; (8006bcc <USB_EPStartXfer+0x4d4>)
 8006974:	4323      	orrs	r3, r4
 8006976:	b29b      	uxth	r3, r3
 8006978:	8013      	strh	r3, [r2, #0]
 800697a:	e018      	b.n	80069ae <USB_EPStartXfer+0x2b6>
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	785b      	ldrb	r3, [r3, #1]
 8006980:	2b01      	cmp	r3, #1
 8006982:	d114      	bne.n	80069ae <USB_EPStartXfer+0x2b6>
 8006984:	687a      	ldr	r2, [r7, #4]
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	781b      	ldrb	r3, [r3, #0]
 800698a:	009b      	lsls	r3, r3, #2
 800698c:	4413      	add	r3, r2
 800698e:	881b      	ldrh	r3, [r3, #0]
 8006990:	b29b      	uxth	r3, r3
 8006992:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006996:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800699a:	b29c      	uxth	r4, r3
 800699c:	687a      	ldr	r2, [r7, #4]
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	009b      	lsls	r3, r3, #2
 80069a4:	441a      	add	r2, r3
 80069a6:	4b8a      	ldr	r3, [pc, #552]	; (8006bd0 <USB_EPStartXfer+0x4d8>)
 80069a8:	4323      	orrs	r3, r4
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	009b      	lsls	r3, r3, #2
 80069b6:	4413      	add	r3, r2
 80069b8:	881b      	ldrh	r3, [r3, #0]
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069c4:	b29c      	uxth	r4, r3
 80069c6:	f084 0310 	eor.w	r3, r4, #16
 80069ca:	b29c      	uxth	r4, r3
 80069cc:	f084 0320 	eor.w	r3, r4, #32
 80069d0:	b29c      	uxth	r4, r3
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	441a      	add	r2, r3
 80069dc:	4b7d      	ldr	r3, [pc, #500]	; (8006bd4 <USB_EPStartXfer+0x4dc>)
 80069de:	4323      	orrs	r3, r4
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	8013      	strh	r3, [r2, #0]
 80069e4:	e153      	b.n	8006c8e <USB_EPStartXfer+0x596>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	699a      	ldr	r2, [r3, #24]
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	691b      	ldr	r3, [r3, #16]
 80069ee:	429a      	cmp	r2, r3
 80069f0:	d909      	bls.n	8006a06 <USB_EPStartXfer+0x30e>
    {
      len = ep->maxpacket;
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	691b      	ldr	r3, [r3, #16]
 80069f6:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	699a      	ldr	r2, [r3, #24]
 80069fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069fe:	1ad2      	subs	r2, r2, r3
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	619a      	str	r2, [r3, #24]
 8006a04:	e005      	b.n	8006a12 <USB_EPStartXfer+0x31a>
    }
    else
    {
      len = ep->xfer_len;
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	699b      	ldr	r3, [r3, #24]
 8006a0a:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	7b1b      	ldrb	r3, [r3, #12]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d14c      	bne.n	8006ab4 <USB_EPStartXfer+0x3bc>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006a1a:	687c      	ldr	r4, [r7, #4]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	441c      	add	r4, r3
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	781b      	ldrb	r3, [r3, #0]
 8006a2a:	011b      	lsls	r3, r3, #4
 8006a2c:	4423      	add	r3, r4
 8006a2e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006a32:	623b      	str	r3, [r7, #32]
 8006a34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d110      	bne.n	8006a5c <USB_EPStartXfer+0x364>
 8006a3a:	6a3b      	ldr	r3, [r7, #32]
 8006a3c:	881b      	ldrh	r3, [r3, #0]
 8006a3e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a42:	b29a      	uxth	r2, r3
 8006a44:	6a3b      	ldr	r3, [r7, #32]
 8006a46:	801a      	strh	r2, [r3, #0]
 8006a48:	6a3b      	ldr	r3, [r7, #32]
 8006a4a:	881b      	ldrh	r3, [r3, #0]
 8006a4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a54:	b29a      	uxth	r2, r3
 8006a56:	6a3b      	ldr	r3, [r7, #32]
 8006a58:	801a      	strh	r2, [r3, #0]
 8006a5a:	e0fd      	b.n	8006c58 <USB_EPStartXfer+0x560>
 8006a5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a5e:	2b3e      	cmp	r3, #62	; 0x3e
 8006a60:	d811      	bhi.n	8006a86 <USB_EPStartXfer+0x38e>
 8006a62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a64:	085b      	lsrs	r3, r3, #1
 8006a66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a6a:	f003 0301 	and.w	r3, r3, #1
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d002      	beq.n	8006a78 <USB_EPStartXfer+0x380>
 8006a72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a74:	3301      	adds	r3, #1
 8006a76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	029b      	lsls	r3, r3, #10
 8006a7e:	b29a      	uxth	r2, r3
 8006a80:	6a3b      	ldr	r3, [r7, #32]
 8006a82:	801a      	strh	r2, [r3, #0]
 8006a84:	e0e8      	b.n	8006c58 <USB_EPStartXfer+0x560>
 8006a86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a88:	095b      	lsrs	r3, r3, #5
 8006a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a8e:	f003 031f 	and.w	r3, r3, #31
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d102      	bne.n	8006a9c <USB_EPStartXfer+0x3a4>
 8006a96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a98:	3b01      	subs	r3, #1
 8006a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	029b      	lsls	r3, r3, #10
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006aa8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006aac:	b29a      	uxth	r2, r3
 8006aae:	6a3b      	ldr	r3, [r7, #32]
 8006ab0:	801a      	strh	r2, [r3, #0]
 8006ab2:	e0d1      	b.n	8006c58 <USB_EPStartXfer+0x560>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	785b      	ldrb	r3, [r3, #1]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d14c      	bne.n	8006b56 <USB_EPStartXfer+0x45e>
 8006abc:	687c      	ldr	r4, [r7, #4]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	441c      	add	r4, r3
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	781b      	ldrb	r3, [r3, #0]
 8006acc:	011b      	lsls	r3, r3, #4
 8006ace:	4423      	add	r3, r4
 8006ad0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ad6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d110      	bne.n	8006afe <USB_EPStartXfer+0x406>
 8006adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ade:	881b      	ldrh	r3, [r3, #0]
 8006ae0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006ae4:	b29a      	uxth	r2, r3
 8006ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ae8:	801a      	strh	r2, [r3, #0]
 8006aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aec:	881b      	ldrh	r3, [r3, #0]
 8006aee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006af2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006af6:	b29a      	uxth	r2, r3
 8006af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006afa:	801a      	strh	r2, [r3, #0]
 8006afc:	e040      	b.n	8006b80 <USB_EPStartXfer+0x488>
 8006afe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b00:	2b3e      	cmp	r3, #62	; 0x3e
 8006b02:	d811      	bhi.n	8006b28 <USB_EPStartXfer+0x430>
 8006b04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b06:	085b      	lsrs	r3, r3, #1
 8006b08:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b0c:	f003 0301 	and.w	r3, r3, #1
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d002      	beq.n	8006b1a <USB_EPStartXfer+0x422>
 8006b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b16:	3301      	adds	r3, #1
 8006b18:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	029b      	lsls	r3, r3, #10
 8006b20:	b29a      	uxth	r2, r3
 8006b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b24:	801a      	strh	r2, [r3, #0]
 8006b26:	e02b      	b.n	8006b80 <USB_EPStartXfer+0x488>
 8006b28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b2a:	095b      	lsrs	r3, r3, #5
 8006b2c:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b30:	f003 031f 	and.w	r3, r3, #31
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d102      	bne.n	8006b3e <USB_EPStartXfer+0x446>
 8006b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b3a:	3b01      	subs	r3, #1
 8006b3c:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	029b      	lsls	r3, r3, #10
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b4e:	b29a      	uxth	r2, r3
 8006b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b52:	801a      	strh	r2, [r3, #0]
 8006b54:	e014      	b.n	8006b80 <USB_EPStartXfer+0x488>
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	785b      	ldrb	r3, [r3, #1]
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d110      	bne.n	8006b80 <USB_EPStartXfer+0x488>
 8006b5e:	687c      	ldr	r4, [r7, #4]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	441c      	add	r4, r3
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	011b      	lsls	r3, r3, #4
 8006b70:	4423      	add	r3, r4
 8006b72:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006b76:	633b      	str	r3, [r7, #48]	; 0x30
 8006b78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b7a:	b29a      	uxth	r2, r3
 8006b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b7e:	801a      	strh	r2, [r3, #0]
 8006b80:	687c      	ldr	r4, [r7, #4]
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	785b      	ldrb	r3, [r3, #1]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d152      	bne.n	8006c30 <USB_EPStartXfer+0x538>
 8006b8a:	687c      	ldr	r4, [r7, #4]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b92:	b29b      	uxth	r3, r3
 8006b94:	441c      	add	r4, r3
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	781b      	ldrb	r3, [r3, #0]
 8006b9a:	011b      	lsls	r3, r3, #4
 8006b9c:	4423      	add	r3, r4
 8006b9e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006ba2:	627b      	str	r3, [r7, #36]	; 0x24
 8006ba4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d116      	bne.n	8006bd8 <USB_EPStartXfer+0x4e0>
 8006baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bac:	881b      	ldrh	r3, [r3, #0]
 8006bae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006bb2:	b29a      	uxth	r2, r3
 8006bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb6:	801a      	strh	r2, [r3, #0]
 8006bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bba:	881b      	ldrh	r3, [r3, #0]
 8006bbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bc4:	b29a      	uxth	r2, r3
 8006bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc8:	801a      	strh	r2, [r3, #0]
 8006bca:	e045      	b.n	8006c58 <USB_EPStartXfer+0x560>
 8006bcc:	ffff80c0 	.word	0xffff80c0
 8006bd0:	ffffc080 	.word	0xffffc080
 8006bd4:	ffff8080 	.word	0xffff8080
 8006bd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bda:	2b3e      	cmp	r3, #62	; 0x3e
 8006bdc:	d811      	bhi.n	8006c02 <USB_EPStartXfer+0x50a>
 8006bde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006be0:	085b      	lsrs	r3, r3, #1
 8006be2:	637b      	str	r3, [r7, #52]	; 0x34
 8006be4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006be6:	f003 0301 	and.w	r3, r3, #1
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d002      	beq.n	8006bf4 <USB_EPStartXfer+0x4fc>
 8006bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bf0:	3301      	adds	r3, #1
 8006bf2:	637b      	str	r3, [r7, #52]	; 0x34
 8006bf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	029b      	lsls	r3, r3, #10
 8006bfa:	b29a      	uxth	r2, r3
 8006bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfe:	801a      	strh	r2, [r3, #0]
 8006c00:	e02a      	b.n	8006c58 <USB_EPStartXfer+0x560>
 8006c02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c04:	095b      	lsrs	r3, r3, #5
 8006c06:	637b      	str	r3, [r7, #52]	; 0x34
 8006c08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c0a:	f003 031f 	and.w	r3, r3, #31
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d102      	bne.n	8006c18 <USB_EPStartXfer+0x520>
 8006c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c14:	3b01      	subs	r3, #1
 8006c16:	637b      	str	r3, [r7, #52]	; 0x34
 8006c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	029b      	lsls	r3, r3, #10
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c28:	b29a      	uxth	r2, r3
 8006c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2c:	801a      	strh	r2, [r3, #0]
 8006c2e:	e013      	b.n	8006c58 <USB_EPStartXfer+0x560>
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	785b      	ldrb	r3, [r3, #1]
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d10f      	bne.n	8006c58 <USB_EPStartXfer+0x560>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c3e:	b29b      	uxth	r3, r3
 8006c40:	441c      	add	r4, r3
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	011b      	lsls	r3, r3, #4
 8006c48:	4423      	add	r3, r4
 8006c4a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006c4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c52:	b29a      	uxth	r2, r3
 8006c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c56:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006c58:	687a      	ldr	r2, [r7, #4]
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	781b      	ldrb	r3, [r3, #0]
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	4413      	add	r3, r2
 8006c62:	881b      	ldrh	r3, [r3, #0]
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c6e:	b29c      	uxth	r4, r3
 8006c70:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8006c74:	b29c      	uxth	r4, r3
 8006c76:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8006c7a:	b29c      	uxth	r4, r3
 8006c7c:	687a      	ldr	r2, [r7, #4]
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	781b      	ldrb	r3, [r3, #0]
 8006c82:	009b      	lsls	r3, r3, #2
 8006c84:	441a      	add	r2, r3
 8006c86:	4b04      	ldr	r3, [pc, #16]	; (8006c98 <USB_EPStartXfer+0x5a0>)
 8006c88:	4323      	orrs	r3, r4
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006c8e:	2300      	movs	r3, #0
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	3754      	adds	r7, #84	; 0x54
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd90      	pop	{r4, r7, pc}
 8006c98:	ffff8080 	.word	0xffff8080

08006c9c <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006c9c:	b490      	push	{r4, r7}
 8006c9e:	b082      	sub	sp, #8
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	785b      	ldrb	r3, [r3, #1]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d018      	beq.n	8006ce0 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006cae:	687a      	ldr	r2, [r7, #4]
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	4413      	add	r3, r2
 8006cb8:	881b      	ldrh	r3, [r3, #0]
 8006cba:	b29b      	uxth	r3, r3
 8006cbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cc4:	b29c      	uxth	r4, r3
 8006cc6:	f084 0310 	eor.w	r3, r4, #16
 8006cca:	b29c      	uxth	r4, r3
 8006ccc:	687a      	ldr	r2, [r7, #4]
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	009b      	lsls	r3, r3, #2
 8006cd4:	441a      	add	r2, r3
 8006cd6:	4b11      	ldr	r3, [pc, #68]	; (8006d1c <USB_EPSetStall+0x80>)
 8006cd8:	4323      	orrs	r3, r4
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	8013      	strh	r3, [r2, #0]
 8006cde:	e017      	b.n	8006d10 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006ce0:	687a      	ldr	r2, [r7, #4]
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	781b      	ldrb	r3, [r3, #0]
 8006ce6:	009b      	lsls	r3, r3, #2
 8006ce8:	4413      	add	r3, r2
 8006cea:	881b      	ldrh	r3, [r3, #0]
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cf6:	b29c      	uxth	r4, r3
 8006cf8:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8006cfc:	b29c      	uxth	r4, r3
 8006cfe:	687a      	ldr	r2, [r7, #4]
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	441a      	add	r2, r3
 8006d08:	4b04      	ldr	r3, [pc, #16]	; (8006d1c <USB_EPSetStall+0x80>)
 8006d0a:	4323      	orrs	r3, r4
 8006d0c:	b29b      	uxth	r3, r3
 8006d0e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006d10:	2300      	movs	r3, #0
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3708      	adds	r7, #8
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bc90      	pop	{r4, r7}
 8006d1a:	4770      	bx	lr
 8006d1c:	ffff8080 	.word	0xffff8080

08006d20 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006d20:	b490      	push	{r4, r7}
 8006d22:	b082      	sub	sp, #8
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	7b1b      	ldrb	r3, [r3, #12]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d17d      	bne.n	8006e2e <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	785b      	ldrb	r3, [r3, #1]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d03d      	beq.n	8006db6 <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d3a:	687a      	ldr	r2, [r7, #4]
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	009b      	lsls	r3, r3, #2
 8006d42:	4413      	add	r3, r2
 8006d44:	881b      	ldrh	r3, [r3, #0]
 8006d46:	b29c      	uxth	r4, r3
 8006d48:	4623      	mov	r3, r4
 8006d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d014      	beq.n	8006d7c <USB_EPClearStall+0x5c>
 8006d52:	687a      	ldr	r2, [r7, #4]
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	009b      	lsls	r3, r3, #2
 8006d5a:	4413      	add	r3, r2
 8006d5c:	881b      	ldrh	r3, [r3, #0]
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d68:	b29c      	uxth	r4, r3
 8006d6a:	687a      	ldr	r2, [r7, #4]
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	781b      	ldrb	r3, [r3, #0]
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	441a      	add	r2, r3
 8006d74:	4b31      	ldr	r3, [pc, #196]	; (8006e3c <USB_EPClearStall+0x11c>)
 8006d76:	4323      	orrs	r3, r4
 8006d78:	b29b      	uxth	r3, r3
 8006d7a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	78db      	ldrb	r3, [r3, #3]
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d054      	beq.n	8006e2e <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006d84:	687a      	ldr	r2, [r7, #4]
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	781b      	ldrb	r3, [r3, #0]
 8006d8a:	009b      	lsls	r3, r3, #2
 8006d8c:	4413      	add	r3, r2
 8006d8e:	881b      	ldrh	r3, [r3, #0]
 8006d90:	b29b      	uxth	r3, r3
 8006d92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d9a:	b29c      	uxth	r4, r3
 8006d9c:	f084 0320 	eor.w	r3, r4, #32
 8006da0:	b29c      	uxth	r4, r3
 8006da2:	687a      	ldr	r2, [r7, #4]
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	781b      	ldrb	r3, [r3, #0]
 8006da8:	009b      	lsls	r3, r3, #2
 8006daa:	441a      	add	r2, r3
 8006dac:	4b24      	ldr	r3, [pc, #144]	; (8006e40 <USB_EPClearStall+0x120>)
 8006dae:	4323      	orrs	r3, r4
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	8013      	strh	r3, [r2, #0]
 8006db4:	e03b      	b.n	8006e2e <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006db6:	687a      	ldr	r2, [r7, #4]
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	781b      	ldrb	r3, [r3, #0]
 8006dbc:	009b      	lsls	r3, r3, #2
 8006dbe:	4413      	add	r3, r2
 8006dc0:	881b      	ldrh	r3, [r3, #0]
 8006dc2:	b29c      	uxth	r4, r3
 8006dc4:	4623      	mov	r3, r4
 8006dc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d014      	beq.n	8006df8 <USB_EPClearStall+0xd8>
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	781b      	ldrb	r3, [r3, #0]
 8006dd4:	009b      	lsls	r3, r3, #2
 8006dd6:	4413      	add	r3, r2
 8006dd8:	881b      	ldrh	r3, [r3, #0]
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006de0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006de4:	b29c      	uxth	r4, r3
 8006de6:	687a      	ldr	r2, [r7, #4]
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	781b      	ldrb	r3, [r3, #0]
 8006dec:	009b      	lsls	r3, r3, #2
 8006dee:	441a      	add	r2, r3
 8006df0:	4b14      	ldr	r3, [pc, #80]	; (8006e44 <USB_EPClearStall+0x124>)
 8006df2:	4323      	orrs	r3, r4
 8006df4:	b29b      	uxth	r3, r3
 8006df6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006df8:	687a      	ldr	r2, [r7, #4]
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	781b      	ldrb	r3, [r3, #0]
 8006dfe:	009b      	lsls	r3, r3, #2
 8006e00:	4413      	add	r3, r2
 8006e02:	881b      	ldrh	r3, [r3, #0]
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e0e:	b29c      	uxth	r4, r3
 8006e10:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8006e14:	b29c      	uxth	r4, r3
 8006e16:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8006e1a:	b29c      	uxth	r4, r3
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	781b      	ldrb	r3, [r3, #0]
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	441a      	add	r2, r3
 8006e26:	4b06      	ldr	r3, [pc, #24]	; (8006e40 <USB_EPClearStall+0x120>)
 8006e28:	4323      	orrs	r3, r4
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006e2e:	2300      	movs	r3, #0
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3708      	adds	r7, #8
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bc90      	pop	{r4, r7}
 8006e38:	4770      	bx	lr
 8006e3a:	bf00      	nop
 8006e3c:	ffff80c0 	.word	0xffff80c0
 8006e40:	ffff8080 	.word	0xffff8080
 8006e44:	ffffc080 	.word	0xffffc080

08006e48 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b083      	sub	sp, #12
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	460b      	mov	r3, r1
 8006e52:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006e54:	78fb      	ldrb	r3, [r7, #3]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d103      	bne.n	8006e62 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2280      	movs	r2, #128	; 0x80
 8006e5e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006e62:	2300      	movs	r3, #0
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	370c      	adds	r7, #12
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr

08006e70 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b083      	sub	sp, #12
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006e78:	2300      	movs	r3, #0
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	370c      	adds	r7, #12
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e84:	4770      	bx	lr

08006e86 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006e86:	b480      	push	{r7}
 8006e88:	b085      	sub	sp, #20
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006e98:	68fb      	ldr	r3, [r7, #12]
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3714      	adds	r7, #20
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr

08006ea6 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006ea6:	b480      	push	{r7}
 8006ea8:	b083      	sub	sp, #12
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	6078      	str	r0, [r7, #4]
 8006eae:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006eb0:	2300      	movs	r3, #0
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	370c      	adds	r7, #12
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebc:	4770      	bx	lr

08006ebe <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006ebe:	b480      	push	{r7}
 8006ec0:	b08d      	sub	sp, #52	; 0x34
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	60f8      	str	r0, [r7, #12]
 8006ec6:	60b9      	str	r1, [r7, #8]
 8006ec8:	4611      	mov	r1, r2
 8006eca:	461a      	mov	r2, r3
 8006ecc:	460b      	mov	r3, r1
 8006ece:	80fb      	strh	r3, [r7, #6]
 8006ed0:	4613      	mov	r3, r2
 8006ed2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006ed4:	88bb      	ldrh	r3, [r7, #4]
 8006ed6:	3301      	adds	r3, #1
 8006ed8:	085b      	lsrs	r3, r3, #1
 8006eda:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006ee4:	88fb      	ldrh	r3, [r7, #6]
 8006ee6:	005a      	lsls	r2, r3, #1
 8006ee8:	69fb      	ldr	r3, [r7, #28]
 8006eea:	4413      	add	r3, r2
 8006eec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ef0:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006ef2:	6a3b      	ldr	r3, [r7, #32]
 8006ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ef6:	e01e      	b.n	8006f36 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efa:	781b      	ldrb	r3, [r3, #0]
 8006efc:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f00:	3301      	adds	r3, #1
 8006f02:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f06:	781b      	ldrb	r3, [r3, #0]
 8006f08:	b29b      	uxth	r3, r3
 8006f0a:	021b      	lsls	r3, r3, #8
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	461a      	mov	r2, r3
 8006f10:	69bb      	ldr	r3, [r7, #24]
 8006f12:	4313      	orrs	r3, r2
 8006f14:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	b29a      	uxth	r2, r3
 8006f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f1c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f20:	3302      	adds	r3, #2
 8006f22:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f26:	3302      	adds	r3, #2
 8006f28:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f2c:	3301      	adds	r3, #1
 8006f2e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f32:	3b01      	subs	r3, #1
 8006f34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d1dd      	bne.n	8006ef8 <USB_WritePMA+0x3a>
  }
}
 8006f3c:	bf00      	nop
 8006f3e:	3734      	adds	r7, #52	; 0x34
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr

08006f48 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b08b      	sub	sp, #44	; 0x2c
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	60f8      	str	r0, [r7, #12]
 8006f50:	60b9      	str	r1, [r7, #8]
 8006f52:	4611      	mov	r1, r2
 8006f54:	461a      	mov	r2, r3
 8006f56:	460b      	mov	r3, r1
 8006f58:	80fb      	strh	r3, [r7, #6]
 8006f5a:	4613      	mov	r3, r2
 8006f5c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006f5e:	88bb      	ldrh	r3, [r7, #4]
 8006f60:	085b      	lsrs	r3, r3, #1
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006f6e:	88fb      	ldrh	r3, [r7, #6]
 8006f70:	005a      	lsls	r2, r3, #1
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	4413      	add	r3, r2
 8006f76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f7a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006f7c:	69bb      	ldr	r3, [r7, #24]
 8006f7e:	627b      	str	r3, [r7, #36]	; 0x24
 8006f80:	e01b      	b.n	8006fba <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006f82:	6a3b      	ldr	r3, [r7, #32]
 8006f84:	881b      	ldrh	r3, [r3, #0]
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006f8a:	6a3b      	ldr	r3, [r7, #32]
 8006f8c:	3302      	adds	r3, #2
 8006f8e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	b2da      	uxtb	r2, r3
 8006f94:	69fb      	ldr	r3, [r7, #28]
 8006f96:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006f98:	69fb      	ldr	r3, [r7, #28]
 8006f9a:	3301      	adds	r3, #1
 8006f9c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	0a1b      	lsrs	r3, r3, #8
 8006fa2:	b2da      	uxtb	r2, r3
 8006fa4:	69fb      	ldr	r3, [r7, #28]
 8006fa6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006fa8:	69fb      	ldr	r3, [r7, #28]
 8006faa:	3301      	adds	r3, #1
 8006fac:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006fae:	6a3b      	ldr	r3, [r7, #32]
 8006fb0:	3302      	adds	r3, #2
 8006fb2:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb6:	3b01      	subs	r3, #1
 8006fb8:	627b      	str	r3, [r7, #36]	; 0x24
 8006fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d1e0      	bne.n	8006f82 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006fc0:	88bb      	ldrh	r3, [r7, #4]
 8006fc2:	f003 0301 	and.w	r3, r3, #1
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d007      	beq.n	8006fdc <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006fcc:	6a3b      	ldr	r3, [r7, #32]
 8006fce:	881b      	ldrh	r3, [r3, #0]
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	b2da      	uxtb	r2, r3
 8006fd8:	69fb      	ldr	r3, [r7, #28]
 8006fda:	701a      	strb	r2, [r3, #0]
  }
}
 8006fdc:	bf00      	nop
 8006fde:	372c      	adds	r7, #44	; 0x2c
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr

08006fe8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006fec:	4904      	ldr	r1, [pc, #16]	; (8007000 <MX_FATFS_Init+0x18>)
 8006fee:	4805      	ldr	r0, [pc, #20]	; (8007004 <MX_FATFS_Init+0x1c>)
 8006ff0:	f002 fb56 	bl	80096a0 <FATFS_LinkDriver>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	4b03      	ldr	r3, [pc, #12]	; (8007008 <MX_FATFS_Init+0x20>)
 8006ffa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006ffc:	bf00      	nop
 8006ffe:	bd80      	pop	{r7, pc}
 8007000:	20000654 	.word	0x20000654
 8007004:	2000000c 	.word	0x2000000c
 8007008:	20000658 	.word	0x20000658

0800700c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800700c:	b480      	push	{r7}
 800700e:	b083      	sub	sp, #12
 8007010:	af00      	add	r7, sp, #0
 8007012:	4603      	mov	r3, r0
 8007014:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8007016:	4b06      	ldr	r3, [pc, #24]	; (8007030 <USER_initialize+0x24>)
 8007018:	2201      	movs	r2, #1
 800701a:	701a      	strb	r2, [r3, #0]
    return Stat;
 800701c:	4b04      	ldr	r3, [pc, #16]	; (8007030 <USER_initialize+0x24>)
 800701e:	781b      	ldrb	r3, [r3, #0]
 8007020:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8007022:	4618      	mov	r0, r3
 8007024:	370c      	adds	r7, #12
 8007026:	46bd      	mov	sp, r7
 8007028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702c:	4770      	bx	lr
 800702e:	bf00      	nop
 8007030:	20000009 	.word	0x20000009

08007034 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007034:	b480      	push	{r7}
 8007036:	b083      	sub	sp, #12
 8007038:	af00      	add	r7, sp, #0
 800703a:	4603      	mov	r3, r0
 800703c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800703e:	4b06      	ldr	r3, [pc, #24]	; (8007058 <USER_status+0x24>)
 8007040:	2201      	movs	r2, #1
 8007042:	701a      	strb	r2, [r3, #0]
    return Stat;
 8007044:	4b04      	ldr	r3, [pc, #16]	; (8007058 <USER_status+0x24>)
 8007046:	781b      	ldrb	r3, [r3, #0]
 8007048:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800704a:	4618      	mov	r0, r3
 800704c:	370c      	adds	r7, #12
 800704e:	46bd      	mov	sp, r7
 8007050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007054:	4770      	bx	lr
 8007056:	bf00      	nop
 8007058:	20000009 	.word	0x20000009

0800705c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800705c:	b480      	push	{r7}
 800705e:	b085      	sub	sp, #20
 8007060:	af00      	add	r7, sp, #0
 8007062:	60b9      	str	r1, [r7, #8]
 8007064:	607a      	str	r2, [r7, #4]
 8007066:	603b      	str	r3, [r7, #0]
 8007068:	4603      	mov	r3, r0
 800706a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 800706c:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800706e:	4618      	mov	r0, r3
 8007070:	3714      	adds	r7, #20
 8007072:	46bd      	mov	sp, r7
 8007074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007078:	4770      	bx	lr

0800707a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800707a:	b480      	push	{r7}
 800707c:	b085      	sub	sp, #20
 800707e:	af00      	add	r7, sp, #0
 8007080:	60b9      	str	r1, [r7, #8]
 8007082:	607a      	str	r2, [r7, #4]
 8007084:	603b      	str	r3, [r7, #0]
 8007086:	4603      	mov	r3, r0
 8007088:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800708a:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800708c:	4618      	mov	r0, r3
 800708e:	3714      	adds	r7, #20
 8007090:	46bd      	mov	sp, r7
 8007092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007096:	4770      	bx	lr

08007098 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007098:	b480      	push	{r7}
 800709a:	b085      	sub	sp, #20
 800709c:	af00      	add	r7, sp, #0
 800709e:	4603      	mov	r3, r0
 80070a0:	603a      	str	r2, [r7, #0]
 80070a2:	71fb      	strb	r3, [r7, #7]
 80070a4:	460b      	mov	r3, r1
 80070a6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 80070a8:	2301      	movs	r3, #1
 80070aa:	73fb      	strb	r3, [r7, #15]
    return res;
 80070ac:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3714      	adds	r7, #20
 80070b2:	46bd      	mov	sp, r7
 80070b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b8:	4770      	bx	lr

080070ba <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80070ba:	b580      	push	{r7, lr}
 80070bc:	b082      	sub	sp, #8
 80070be:	af00      	add	r7, sp, #0
 80070c0:	6078      	str	r0, [r7, #4]
 80070c2:	460b      	mov	r3, r1
 80070c4:	70fb      	strb	r3, [r7, #3]
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	7c1b      	ldrb	r3, [r3, #16]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d115      	bne.n	80070fa <USBD_MSC_Init+0x40>
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 80070ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80070d2:	2202      	movs	r2, #2
 80070d4:	2101      	movs	r1, #1
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f002 fde9 	bl	8009cae <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2201      	movs	r2, #1
 80070e0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 80070e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80070e8:	2202      	movs	r2, #2
 80070ea:	2181      	movs	r1, #129	; 0x81
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f002 fdde 	bl	8009cae <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2201      	movs	r2, #1
 80070f6:	62da      	str	r2, [r3, #44]	; 0x2c
 80070f8:	e012      	b.n	8007120 <USBD_MSC_Init+0x66>
  }
  else
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 80070fa:	2340      	movs	r3, #64	; 0x40
 80070fc:	2202      	movs	r2, #2
 80070fe:	2101      	movs	r1, #1
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f002 fdd4 	bl	8009cae <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2201      	movs	r2, #1
 800710a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800710e:	2340      	movs	r3, #64	; 0x40
 8007110:	2202      	movs	r2, #2
 8007112:	2181      	movs	r1, #129	; 0x81
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f002 fdca 	bl	8009cae <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2201      	movs	r2, #1
 800711e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  pdev->pClassData = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8007120:	f44f 701b 	mov.w	r0, #620	; 0x26c
 8007124:	f002 ff04 	bl	8009f30 <USBD_static_malloc>
 8007128:	4602      	mov	r2, r0
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007136:	2b00      	cmp	r3, #0
 8007138:	d101      	bne.n	800713e <USBD_MSC_Init+0x84>
  {
    return USBD_FAIL;
 800713a:	2302      	movs	r3, #2
 800713c:	e003      	b.n	8007146 <USBD_MSC_Init+0x8c>
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f000 f9db 	bl	80074fa <MSC_BOT_Init>

  return USBD_OK;
 8007144:	2300      	movs	r3, #0
}
 8007146:	4618      	mov	r0, r3
 8007148:	3708      	adds	r7, #8
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}

0800714e <USBD_MSC_DeInit>:
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev,
                         uint8_t cfgidx)
{
 800714e:	b580      	push	{r7, lr}
 8007150:	b082      	sub	sp, #8
 8007152:	af00      	add	r7, sp, #0
 8007154:	6078      	str	r0, [r7, #4]
 8007156:	460b      	mov	r3, r1
 8007158:	70fb      	strb	r3, [r7, #3]
  /* Close MSC EPs */
  USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 800715a:	2101      	movs	r1, #1
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f002 fdcc 	bl	8009cfa <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2200      	movs	r2, #0
 8007166:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 800716a:	2181      	movs	r1, #129	; 0x81
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f002 fdc4 	bl	8009cfa <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2200      	movs	r2, #0
 8007176:	62da      	str	r2, [r3, #44]	; 0x2c

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f000 fa08 	bl	800758e <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007184:	2b00      	cmp	r3, #0
 8007186:	d009      	beq.n	800719c <USBD_MSC_DeInit+0x4e>
  {
    USBD_free(pdev->pClassData);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800718e:	4618      	mov	r0, r3
 8007190:	f002 fedc 	bl	8009f4c <USBD_static_free>
    pdev->pClassData  = NULL;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2200      	movs	r2, #0
 8007198:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 800719c:	2300      	movs	r3, #0
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3708      	adds	r7, #8
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}
	...

080071a8 <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b086      	sub	sp, #24
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
 80071b0:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071b8:	613b      	str	r3, [r7, #16]
  uint8_t ret = USBD_OK;
 80071ba:	2300      	movs	r3, #0
 80071bc:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 80071be:	2300      	movs	r3, #0
 80071c0:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	781b      	ldrb	r3, [r3, #0]
 80071c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d04d      	beq.n	800726a <USBD_MSC_Setup+0xc2>
 80071ce:	2b20      	cmp	r3, #32
 80071d0:	f040 8113 	bne.w	80073fa <USBD_MSC_Setup+0x252>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	785b      	ldrb	r3, [r3, #1]
 80071d8:	2bfe      	cmp	r3, #254	; 0xfe
 80071da:	d002      	beq.n	80071e2 <USBD_MSC_Setup+0x3a>
 80071dc:	2bff      	cmp	r3, #255	; 0xff
 80071de:	d024      	beq.n	800722a <USBD_MSC_Setup+0x82>
 80071e0:	e03b      	b.n	800725a <USBD_MSC_Setup+0xb2>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	885b      	ldrh	r3, [r3, #2]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d118      	bne.n	800721c <USBD_MSC_Setup+0x74>
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	88db      	ldrh	r3, [r3, #6]
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d114      	bne.n	800721c <USBD_MSC_Setup+0x74>
              ((req->bmRequest & 0x80U) == 0x80U))
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	781b      	ldrb	r3, [r3, #0]
 80071f6:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	da0f      	bge.n	800721c <USBD_MSC_Setup+0x74>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007202:	699b      	ldr	r3, [r3, #24]
 8007204:	4798      	blx	r3
 8007206:	4603      	mov	r3, r0
 8007208:	461a      	mov	r2, r3
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	601a      	str	r2, [r3, #0]
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hmsc->max_lun, 1U);
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	2201      	movs	r2, #1
 8007212:	4619      	mov	r1, r3
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f002 f991 	bl	800953c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800721a:	e025      	b.n	8007268 <USBD_MSC_Setup+0xc0>
            USBD_CtlError(pdev, req);
 800721c:	6839      	ldr	r1, [r7, #0]
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f002 f921 	bl	8009466 <USBD_CtlError>
            ret = USBD_FAIL;
 8007224:	2302      	movs	r3, #2
 8007226:	75fb      	strb	r3, [r7, #23]
          break;
 8007228:	e01e      	b.n	8007268 <USBD_MSC_Setup+0xc0>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	885b      	ldrh	r3, [r3, #2]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d10c      	bne.n	800724c <USBD_MSC_Setup+0xa4>
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	88db      	ldrh	r3, [r3, #6]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d108      	bne.n	800724c <USBD_MSC_Setup+0xa4>
              ((req->bmRequest & 0x80U) != 0x80U))
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	781b      	ldrb	r3, [r3, #0]
 800723e:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8007240:	2b00      	cmp	r3, #0
 8007242:	db03      	blt.n	800724c <USBD_MSC_Setup+0xa4>
          {
            MSC_BOT_Reset(pdev);
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f000 f988 	bl	800755a <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800724a:	e00d      	b.n	8007268 <USBD_MSC_Setup+0xc0>
            USBD_CtlError(pdev, req);
 800724c:	6839      	ldr	r1, [r7, #0]
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f002 f909 	bl	8009466 <USBD_CtlError>
            ret = USBD_FAIL;
 8007254:	2302      	movs	r3, #2
 8007256:	75fb      	strb	r3, [r7, #23]
          break;
 8007258:	e006      	b.n	8007268 <USBD_MSC_Setup+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800725a:	6839      	ldr	r1, [r7, #0]
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f002 f902 	bl	8009466 <USBD_CtlError>
          ret = USBD_FAIL;
 8007262:	2302      	movs	r3, #2
 8007264:	75fb      	strb	r3, [r7, #23]
          break;
 8007266:	bf00      	nop
      }
      break;
 8007268:	e0ce      	b.n	8007408 <USBD_MSC_Setup+0x260>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	785b      	ldrb	r3, [r3, #1]
 800726e:	2b0b      	cmp	r3, #11
 8007270:	f200 80bb 	bhi.w	80073ea <USBD_MSC_Setup+0x242>
 8007274:	a201      	add	r2, pc, #4	; (adr r2, 800727c <USBD_MSC_Setup+0xd4>)
 8007276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800727a:	bf00      	nop
 800727c:	080072ad 	.word	0x080072ad
 8007280:	08007323 	.word	0x08007323
 8007284:	080073eb 	.word	0x080073eb
 8007288:	080073eb 	.word	0x080073eb
 800728c:	080073eb 	.word	0x080073eb
 8007290:	080073eb 	.word	0x080073eb
 8007294:	080073eb 	.word	0x080073eb
 8007298:	080073eb 	.word	0x080073eb
 800729c:	080073eb 	.word	0x080073eb
 80072a0:	080073eb 	.word	0x080073eb
 80072a4:	080072d5 	.word	0x080072d5
 80072a8:	080072fd 	.word	0x080072fd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072b2:	2b03      	cmp	r3, #3
 80072b4:	d107      	bne.n	80072c6 <USBD_MSC_Setup+0x11e>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80072b6:	f107 030e 	add.w	r3, r7, #14
 80072ba:	2202      	movs	r2, #2
 80072bc:	4619      	mov	r1, r3
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f002 f93c 	bl	800953c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80072c4:	e098      	b.n	80073f8 <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 80072c6:	6839      	ldr	r1, [r7, #0]
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f002 f8cc 	bl	8009466 <USBD_CtlError>
            ret = USBD_FAIL;
 80072ce:	2302      	movs	r3, #2
 80072d0:	75fb      	strb	r3, [r7, #23]
          break;
 80072d2:	e091      	b.n	80073f8 <USBD_MSC_Setup+0x250>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072da:	2b03      	cmp	r3, #3
 80072dc:	d107      	bne.n	80072ee <USBD_MSC_Setup+0x146>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hmsc->interface, 1U);
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	3304      	adds	r3, #4
 80072e2:	2201      	movs	r2, #1
 80072e4:	4619      	mov	r1, r3
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f002 f928 	bl	800953c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80072ec:	e084      	b.n	80073f8 <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 80072ee:	6839      	ldr	r1, [r7, #0]
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f002 f8b8 	bl	8009466 <USBD_CtlError>
            ret = USBD_FAIL;
 80072f6:	2302      	movs	r3, #2
 80072f8:	75fb      	strb	r3, [r7, #23]
          break;
 80072fa:	e07d      	b.n	80073f8 <USBD_MSC_Setup+0x250>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007302:	2b03      	cmp	r3, #3
 8007304:	d106      	bne.n	8007314 <USBD_MSC_Setup+0x16c>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	885b      	ldrh	r3, [r3, #2]
 800730a:	b2db      	uxtb	r3, r3
 800730c:	461a      	mov	r2, r3
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007312:	e071      	b.n	80073f8 <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 8007314:	6839      	ldr	r1, [r7, #0]
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f002 f8a5 	bl	8009466 <USBD_CtlError>
            ret = USBD_FAIL;
 800731c:	2302      	movs	r3, #2
 800731e:	75fb      	strb	r3, [r7, #23]
          break;
 8007320:	e06a      	b.n	80073f8 <USBD_MSC_Setup+0x250>

        case USB_REQ_CLEAR_FEATURE:

          /* Flush the FIFO and Clear the stall status */
          USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	889b      	ldrh	r3, [r3, #4]
 8007326:	b2db      	uxtb	r3, r3
 8007328:	4619      	mov	r1, r3
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f002 fd04 	bl	8009d38 <USBD_LL_FlushEP>

          /* Reactivate the EP */
          USBD_LL_CloseEP(pdev, (uint8_t)req->wIndex);
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	889b      	ldrh	r3, [r3, #4]
 8007334:	b2db      	uxtb	r3, r3
 8007336:	4619      	mov	r1, r3
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f002 fcde 	bl	8009cfa <USBD_LL_CloseEP>
          if ((((uint8_t)req->wIndex) & 0x80U) == 0x80U)
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	889b      	ldrh	r3, [r3, #4]
 8007342:	b25b      	sxtb	r3, r3
 8007344:	2b00      	cmp	r3, #0
 8007346:	da23      	bge.n	8007390 <USBD_MSC_Setup+0x1e8>
          {
            pdev->ep_in[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	889b      	ldrh	r3, [r3, #4]
 800734c:	b2db      	uxtb	r3, r3
 800734e:	f003 020f 	and.w	r2, r3, #15
 8007352:	6879      	ldr	r1, [r7, #4]
 8007354:	4613      	mov	r3, r2
 8007356:	009b      	lsls	r3, r3, #2
 8007358:	4413      	add	r3, r2
 800735a:	009b      	lsls	r3, r3, #2
 800735c:	440b      	add	r3, r1
 800735e:	3318      	adds	r3, #24
 8007360:	2200      	movs	r2, #0
 8007362:	601a      	str	r2, [r3, #0]
            if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	7c1b      	ldrb	r3, [r3, #16]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d107      	bne.n	800737c <USBD_MSC_Setup+0x1d4>
            {
              /* Open EP IN */
              USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 800736c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007370:	2202      	movs	r2, #2
 8007372:	2181      	movs	r1, #129	; 0x81
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f002 fc9a 	bl	8009cae <USBD_LL_OpenEP>
 800737a:	e005      	b.n	8007388 <USBD_MSC_Setup+0x1e0>
                             MSC_MAX_HS_PACKET);
            }
            else
            {
              /* Open EP IN */
              USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 800737c:	2340      	movs	r3, #64	; 0x40
 800737e:	2202      	movs	r2, #2
 8007380:	2181      	movs	r1, #129	; 0x81
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f002 fc93 	bl	8009cae <USBD_LL_OpenEP>
                             MSC_MAX_FS_PACKET);
            }
            pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2201      	movs	r2, #1
 800738c:	62da      	str	r2, [r3, #44]	; 0x2c
 800738e:	e024      	b.n	80073da <USBD_MSC_Setup+0x232>
          }
          else
          {
            pdev->ep_out[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	889b      	ldrh	r3, [r3, #4]
 8007394:	b2db      	uxtb	r3, r3
 8007396:	f003 020f 	and.w	r2, r3, #15
 800739a:	6879      	ldr	r1, [r7, #4]
 800739c:	4613      	mov	r3, r2
 800739e:	009b      	lsls	r3, r3, #2
 80073a0:	4413      	add	r3, r2
 80073a2:	009b      	lsls	r3, r3, #2
 80073a4:	440b      	add	r3, r1
 80073a6:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80073aa:	2200      	movs	r2, #0
 80073ac:	601a      	str	r2, [r3, #0]
            if (pdev->dev_speed == USBD_SPEED_HIGH)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	7c1b      	ldrb	r3, [r3, #16]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d107      	bne.n	80073c6 <USBD_MSC_Setup+0x21e>
            {
              /* Open EP OUT */
              USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 80073b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073ba:	2202      	movs	r2, #2
 80073bc:	2101      	movs	r1, #1
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f002 fc75 	bl	8009cae <USBD_LL_OpenEP>
 80073c4:	e005      	b.n	80073d2 <USBD_MSC_Setup+0x22a>
                             MSC_MAX_HS_PACKET);
            }
            else
            {
              /* Open EP OUT */
              USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 80073c6:	2340      	movs	r3, #64	; 0x40
 80073c8:	2202      	movs	r2, #2
 80073ca:	2101      	movs	r1, #1
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f002 fc6e 	bl	8009cae <USBD_LL_OpenEP>
                             MSC_MAX_FS_PACKET);
            }
            pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2201      	movs	r2, #1
 80073d6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
          }

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	889b      	ldrh	r3, [r3, #4]
 80073de:	b2db      	uxtb	r3, r3
 80073e0:	4619      	mov	r1, r3
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f000 fa52 	bl	800788c <MSC_BOT_CplClrFeature>
          break;
 80073e8:	e006      	b.n	80073f8 <USBD_MSC_Setup+0x250>

        default:
          USBD_CtlError(pdev, req);
 80073ea:	6839      	ldr	r1, [r7, #0]
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f002 f83a 	bl	8009466 <USBD_CtlError>
          ret = USBD_FAIL;
 80073f2:	2302      	movs	r3, #2
 80073f4:	75fb      	strb	r3, [r7, #23]
          break;
 80073f6:	bf00      	nop
      }
      break;
 80073f8:	e006      	b.n	8007408 <USBD_MSC_Setup+0x260>

    default:
      USBD_CtlError(pdev, req);
 80073fa:	6839      	ldr	r1, [r7, #0]
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f002 f832 	bl	8009466 <USBD_CtlError>
      ret = USBD_FAIL;
 8007402:	2302      	movs	r3, #2
 8007404:	75fb      	strb	r3, [r7, #23]
      break;
 8007406:	bf00      	nop
  }

  return ret;
 8007408:	7dfb      	ldrb	r3, [r7, #23]
}
 800740a:	4618      	mov	r0, r3
 800740c:	3718      	adds	r7, #24
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}
 8007412:	bf00      	nop

08007414 <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b082      	sub	sp, #8
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	460b      	mov	r3, r1
 800741e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8007420:	78fb      	ldrb	r3, [r7, #3]
 8007422:	4619      	mov	r1, r3
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f000 f8c3 	bl	80075b0 <MSC_BOT_DataIn>

  return USBD_OK;
 800742a:	2300      	movs	r3, #0
}
 800742c:	4618      	mov	r0, r3
 800742e:	3708      	adds	r7, #8
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}

08007434 <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b082      	sub	sp, #8
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
 800743c:	460b      	mov	r3, r1
 800743e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8007440:	78fb      	ldrb	r3, [r7, #3]
 8007442:	4619      	mov	r1, r3
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f000 f8e4 	bl	8007612 <MSC_BOT_DataOut>

  return USBD_OK;
 800744a:	2300      	movs	r3, #0
}
 800744c:	4618      	mov	r0, r3
 800744e:	3708      	adds	r7, #8
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}

08007454 <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8007454:	b480      	push	{r7}
 8007456:	b083      	sub	sp, #12
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CfgHSDesc);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2220      	movs	r2, #32
 8007460:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 8007462:	4b03      	ldr	r3, [pc, #12]	; (8007470 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 8007464:	4618      	mov	r0, r3
 8007466:	370c      	adds	r7, #12
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr
 8007470:	20000058 	.word	0x20000058

08007474 <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8007474:	b480      	push	{r7}
 8007476:	b083      	sub	sp, #12
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CfgFSDesc);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2220      	movs	r2, #32
 8007480:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 8007482:	4b03      	ldr	r3, [pc, #12]	; (8007490 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 8007484:	4618      	mov	r0, r3
 8007486:	370c      	adds	r7, #12
 8007488:	46bd      	mov	sp, r7
 800748a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748e:	4770      	bx	lr
 8007490:	20000078 	.word	0x20000078

08007494 <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007494:	b480      	push	{r7}
 8007496:	b083      	sub	sp, #12
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_OtherSpeedCfgDesc);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2220      	movs	r2, #32
 80074a0:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 80074a2:	4b03      	ldr	r3, [pc, #12]	; (80074b0 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	370c      	adds	r7, #12
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr
 80074b0:	20000098 	.word	0x20000098

080074b4 <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b083      	sub	sp, #12
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_DeviceQualifierDesc);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	220a      	movs	r2, #10
 80074c0:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 80074c2:	4b03      	ldr	r3, [pc, #12]	; (80074d0 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	370c      	adds	r7, #12
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr
 80074d0:	200000b8 	.word	0x200000b8

080074d4 <USBD_MSC_RegisterStorage>:
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev,
                                 USBD_StorageTypeDef *fops)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b083      	sub	sp, #12
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	6039      	str	r1, [r7, #0]
  if (fops != NULL)
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d003      	beq.n	80074ec <USBD_MSC_RegisterStorage+0x18>
  {
    pdev->pUserData = fops;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	683a      	ldr	r2, [r7, #0]
 80074e8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return USBD_OK;
 80074ec:	2300      	movs	r3, #0
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	370c      	adds	r7, #12
 80074f2:	46bd      	mov	sp, r7
 80074f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f8:	4770      	bx	lr

080074fa <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef  *pdev)
{
 80074fa:	b580      	push	{r7, lr}
 80074fc:	b084      	sub	sp, #16
 80074fe:	af00      	add	r7, sp, #0
 8007500:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007508:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	2200      	movs	r2, #0
 800750e:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2200      	movs	r2, #0
 8007514:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2200      	movs	r2, #0
 800751a:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  hmsc->scsi_sense_head = 0U;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	2200      	movs	r2, #0
 8007522:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	2000      	movs	r0, #0
 8007530:	4798      	blx	r3

  USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8007532:	2101      	movs	r1, #1
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f002 fbff 	bl	8009d38 <USBD_LL_FlushEP>
  USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 800753a:	2181      	movs	r1, #129	; 0x81
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f002 fbfb 	bl	8009d38 <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 8007548:	231f      	movs	r3, #31
 800754a:	2101      	movs	r1, #1
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f002 fcb8 	bl	8009ec2 <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 8007552:	bf00      	nop
 8007554:	3710      	adds	r7, #16
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}

0800755a <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef  *pdev)
{
 800755a:	b580      	push	{r7, lr}
 800755c:	b084      	sub	sp, #16
 800755e:	af00      	add	r7, sp, #0
 8007560:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007568:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2200      	movs	r2, #0
 800756e:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2201      	movs	r2, #1
 8007574:	725a      	strb	r2, [r3, #9]

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 800757c:	231f      	movs	r3, #31
 800757e:	2101      	movs	r1, #1
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f002 fc9e 	bl	8009ec2 <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 8007586:	bf00      	nop
 8007588:	3710      	adds	r7, #16
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}

0800758e <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 800758e:	b480      	push	{r7}
 8007590:	b085      	sub	sp, #20
 8007592:	af00      	add	r7, sp, #0
 8007594:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800759c:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2200      	movs	r2, #0
 80075a2:	721a      	strb	r2, [r3, #8]
}
 80075a4:	bf00      	nop
 80075a6:	3714      	adds	r7, #20
 80075a8:	46bd      	mov	sp, r7
 80075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ae:	4770      	bx	lr

080075b0 <MSC_BOT_DataIn>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef  *pdev,
                    uint8_t epnum)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b084      	sub	sp, #16
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
 80075b8:	460b      	mov	r3, r1
 80075ba:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075c2:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	7a1b      	ldrb	r3, [r3, #8]
 80075c8:	2b02      	cmp	r3, #2
 80075ca:	d004      	beq.n	80075d6 <MSC_BOT_DataIn+0x26>
 80075cc:	2b02      	cmp	r3, #2
 80075ce:	db19      	blt.n	8007604 <MSC_BOT_DataIn+0x54>
 80075d0:	2b04      	cmp	r3, #4
 80075d2:	dc17      	bgt.n	8007604 <MSC_BOT_DataIn+0x54>
 80075d4:	e011      	b.n	80075fa <MSC_BOT_DataIn+0x4a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	f203 231b 	addw	r3, r3, #539	; 0x21b
 80075e2:	461a      	mov	r2, r3
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f000 f979 	bl	80078dc <SCSI_ProcessCmd>
 80075ea:	4603      	mov	r3, r0
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	da0b      	bge.n	8007608 <MSC_BOT_DataIn+0x58>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80075f0:	2101      	movs	r1, #1
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f000 f8f0 	bl	80077d8 <MSC_BOT_SendCSW>
      }
      break;
 80075f8:	e006      	b.n	8007608 <MSC_BOT_DataIn+0x58>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80075fa:	2100      	movs	r1, #0
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f000 f8eb 	bl	80077d8 <MSC_BOT_SendCSW>
      break;
 8007602:	e002      	b.n	800760a <MSC_BOT_DataIn+0x5a>

    default:
      break;
 8007604:	bf00      	nop
 8007606:	e000      	b.n	800760a <MSC_BOT_DataIn+0x5a>
      break;
 8007608:	bf00      	nop
  }
}
 800760a:	bf00      	nop
 800760c:	3710      	adds	r7, #16
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}

08007612 <MSC_BOT_DataOut>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef  *pdev,
                     uint8_t epnum)
{
 8007612:	b580      	push	{r7, lr}
 8007614:	b084      	sub	sp, #16
 8007616:	af00      	add	r7, sp, #0
 8007618:	6078      	str	r0, [r7, #4]
 800761a:	460b      	mov	r3, r1
 800761c:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007624:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	7a1b      	ldrb	r3, [r3, #8]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d002      	beq.n	8007634 <MSC_BOT_DataOut+0x22>
 800762e:	2b01      	cmp	r3, #1
 8007630:	d004      	beq.n	800763c <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8007632:	e015      	b.n	8007660 <MSC_BOT_DataOut+0x4e>
      MSC_BOT_CBW_Decode(pdev);
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f000 f817 	bl	8007668 <MSC_BOT_CBW_Decode>
      break;
 800763a:	e011      	b.n	8007660 <MSC_BOT_DataOut+0x4e>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8007648:	461a      	mov	r2, r3
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f000 f946 	bl	80078dc <SCSI_ProcessCmd>
 8007650:	4603      	mov	r3, r0
 8007652:	2b00      	cmp	r3, #0
 8007654:	da03      	bge.n	800765e <MSC_BOT_DataOut+0x4c>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8007656:	2101      	movs	r1, #1
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f000 f8bd 	bl	80077d8 <MSC_BOT_SendCSW>
      break;
 800765e:	bf00      	nop
  }
}
 8007660:	bf00      	nop
 8007662:	3710      	adds	r7, #16
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}

08007668 <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef  *pdev)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b084      	sub	sp, #16
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007676:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8007690:	2101      	movs	r1, #1
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f002 fc38 	bl	8009f08 <USBD_LL_GetRxDataSize>
 8007698:	4603      	mov	r3, r0
 800769a:	2b1f      	cmp	r3, #31
 800769c:	d114      	bne.n	80076c8 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 80076a4:	4a32      	ldr	r2, [pc, #200]	; (8007770 <MSC_BOT_CBW_Decode+0x108>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d10e      	bne.n	80076c8 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) ||
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	f893 3219 	ldrb.w	r3, [r3, #537]	; 0x219
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	d809      	bhi.n	80076c8 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
      (hmsc->cbw.bLUN > 1U) ||
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d004      	beq.n	80076c8 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
 80076c4:	2b10      	cmp	r3, #16
 80076c6:	d90e      	bls.n	80076e6 <MSC_BOT_CBW_Decode+0x7e>
  {

    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 80076ce:	2320      	movs	r3, #32
 80076d0:	2205      	movs	r2, #5
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f000 fc4b 	bl	8007f6e <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2202      	movs	r2, #2
 80076dc:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f000 f8a6 	bl	8007830 <MSC_BOT_Abort>
 80076e4:	e041      	b.n	800776a <MSC_BOT_CBW_Decode+0x102>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f203 231b 	addw	r3, r3, #539	; 0x21b
 80076f2:	461a      	mov	r2, r3
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f000 f8f1 	bl	80078dc <SCSI_ProcessCmd>
 80076fa:	4603      	mov	r3, r0
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	da0c      	bge.n	800771a <MSC_BOT_CBW_Decode+0xb2>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	7a1b      	ldrb	r3, [r3, #8]
 8007704:	2b05      	cmp	r3, #5
 8007706:	d104      	bne.n	8007712 <MSC_BOT_CBW_Decode+0xaa>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8007708:	2101      	movs	r1, #1
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f000 f864 	bl	80077d8 <MSC_BOT_SendCSW>
 8007710:	e02b      	b.n	800776a <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f000 f88c 	bl	8007830 <MSC_BOT_Abort>
 8007718:	e027      	b.n	800776a <MSC_BOT_CBW_Decode+0x102>
      }
    }
    /*Burst xfer handled internally*/
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	7a1b      	ldrb	r3, [r3, #8]
 800771e:	2b02      	cmp	r3, #2
 8007720:	d022      	beq.n	8007768 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8007726:	2b01      	cmp	r3, #1
 8007728:	d01e      	beq.n	8007768 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800772e:	2b03      	cmp	r3, #3
 8007730:	d01a      	beq.n	8007768 <MSC_BOT_CBW_Decode+0x100>
    {
      if (hmsc->bot_data_length > 0U)
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	895b      	ldrh	r3, [r3, #10]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d009      	beq.n	800774e <MSC_BOT_CBW_Decode+0xe6>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	f103 010c 	add.w	r1, r3, #12
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	895b      	ldrh	r3, [r3, #10]
 8007744:	461a      	mov	r2, r3
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f000 f814 	bl	8007774 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 800774c:	e00d      	b.n	800776a <MSC_BOT_CBW_Decode+0x102>
      }
      else if (hmsc->bot_data_length == 0U)
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	895b      	ldrh	r3, [r3, #10]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d104      	bne.n	8007760 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8007756:	2100      	movs	r1, #0
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f000 f83d 	bl	80077d8 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 800775e:	e004      	b.n	800776a <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f000 f865 	bl	8007830 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8007766:	e000      	b.n	800776a <MSC_BOT_CBW_Decode+0x102>
      }
    }
    else
    {
      return;
 8007768:	bf00      	nop
    }
  }
}
 800776a:	3710      	adds	r7, #16
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}
 8007770:	43425355 	.word	0x43425355

08007774 <MSC_BOT_SendData>:
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                              uint16_t len)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b086      	sub	sp, #24
 8007778:	af00      	add	r7, sp, #0
 800777a:	60f8      	str	r0, [r7, #12]
 800777c:	60b9      	str	r1, [r7, #8]
 800777e:	4613      	mov	r3, r2
 8007780:	80fb      	strh	r3, [r7, #6]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007788:	617b      	str	r3, [r7, #20]

  uint16_t length = (uint16_t)MIN(hmsc->cbw.dDataLength, len);
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007790:	88fb      	ldrh	r3, [r7, #6]
 8007792:	429a      	cmp	r2, r3
 8007794:	d204      	bcs.n	80077a0 <MSC_BOT_SendData+0x2c>
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800779c:	b29b      	uxth	r3, r3
 800779e:	e000      	b.n	80077a2 <MSC_BOT_SendData+0x2e>
 80077a0:	88fb      	ldrh	r3, [r7, #6]
 80077a2:	827b      	strh	r3, [r7, #18]

  hmsc->csw.dDataResidue -= len;
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 80077aa:	88fb      	ldrh	r3, [r7, #6]
 80077ac:	1ad2      	subs	r2, r2, r3
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	2200      	movs	r2, #0
 80077b8:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	2204      	movs	r2, #4
 80077c0:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 80077c2:	8a7b      	ldrh	r3, [r7, #18]
 80077c4:	68ba      	ldr	r2, [r7, #8]
 80077c6:	2181      	movs	r1, #129	; 0x81
 80077c8:	68f8      	ldr	r0, [r7, #12]
 80077ca:	f002 fb57 	bl	8009e7c <USBD_LL_Transmit>
}
 80077ce:	bf00      	nop
 80077d0:	3718      	adds	r7, #24
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}
	...

080077d8 <MSC_BOT_SendCSW>:
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef  *pdev,
                      uint8_t CSW_Status)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b084      	sub	sp, #16
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
 80077e0:	460b      	mov	r3, r1
 80077e2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077ea:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	4a0f      	ldr	r2, [pc, #60]	; (800782c <MSC_BOT_SendCSW+0x54>)
 80077f0:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
  hmsc->csw.bStatus = CSW_Status;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	78fa      	ldrb	r2, [r7, #3]
 80077f8:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_IDLE;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2200      	movs	r2, #0
 8007800:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)(void *)&hmsc->csw,
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	f503 720b 	add.w	r2, r3, #556	; 0x22c
 8007808:	230d      	movs	r3, #13
 800780a:	2181      	movs	r1, #129	; 0x81
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f002 fb35 	bl	8009e7c <USBD_LL_Transmit>
                   USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 8007818:	231f      	movs	r3, #31
 800781a:	2101      	movs	r1, #1
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f002 fb50 	bl	8009ec2 <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 8007822:	bf00      	nop
 8007824:	3710      	adds	r7, #16
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}
 800782a:	bf00      	nop
 800782c:	53425355 	.word	0x53425355

08007830 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef  *pdev)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b084      	sub	sp, #16
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800783e:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8007846:	2b00      	cmp	r3, #0
 8007848:	d10c      	bne.n	8007864 <MSC_BOT_Abort+0x34>
      (hmsc->cbw.dDataLength != 0U) &&
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
  if ((hmsc->cbw.bmFlags == 0U) &&
 8007850:	2b00      	cmp	r3, #0
 8007852:	d007      	beq.n	8007864 <MSC_BOT_Abort+0x34>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8007858:	2b00      	cmp	r3, #0
 800785a:	d103      	bne.n	8007864 <MSC_BOT_Abort+0x34>
  {
    USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800785c:	2101      	movs	r1, #1
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f002 fa89 	bl	8009d76 <USBD_LL_StallEP>
  }

  USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8007864:	2181      	movs	r1, #129	; 0x81
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f002 fa85 	bl	8009d76 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	7a5b      	ldrb	r3, [r3, #9]
 8007870:	2b02      	cmp	r3, #2
 8007872:	d107      	bne.n	8007884 <MSC_BOT_Abort+0x54>
  {
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 800787a:	231f      	movs	r3, #31
 800787c:	2101      	movs	r1, #1
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f002 fb1f 	bl	8009ec2 <USBD_LL_PrepareReceive>
                           USBD_BOT_CBW_LENGTH);
  }
}
 8007884:	bf00      	nop
 8007886:	3710      	adds	r7, #16
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}

0800788c <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b084      	sub	sp, #16
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
 8007894:	460b      	mov	r3, r1
 8007896:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800789e:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	7a5b      	ldrb	r3, [r3, #9]
 80078a4:	2b02      	cmp	r3, #2
 80078a6:	d107      	bne.n	80078b8 <MSC_BOT_CplClrFeature+0x2c>
  {
    USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 80078a8:	2181      	movs	r1, #129	; 0x81
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f002 fa63 	bl	8009d76 <USBD_LL_StallEP>
    hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2200      	movs	r2, #0
 80078b4:	725a      	strb	r2, [r3, #9]
 80078b6:	e00d      	b.n	80078d4 <MSC_BOT_CplClrFeature+0x48>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 80078b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	da08      	bge.n	80078d2 <MSC_BOT_CplClrFeature+0x46>
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	7a5b      	ldrb	r3, [r3, #9]
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	d004      	beq.n	80078d2 <MSC_BOT_CplClrFeature+0x46>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80078c8:	2101      	movs	r1, #1
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f7ff ff84 	bl	80077d8 <MSC_BOT_SendCSW>
 80078d0:	e000      	b.n	80078d4 <MSC_BOT_CplClrFeature+0x48>
  }
  else
  {
    return;
 80078d2:	bf00      	nop
  }
}
 80078d4:	3710      	adds	r7, #16
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}
	...

080078dc <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b084      	sub	sp, #16
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	60f8      	str	r0, [r7, #12]
 80078e4:	460b      	mov	r3, r1
 80078e6:	607a      	str	r2, [r7, #4]
 80078e8:	72fb      	strb	r3, [r7, #11]
  switch (cmd[0])
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	781b      	ldrb	r3, [r3, #0]
 80078ee:	2b5a      	cmp	r3, #90	; 0x5a
 80078f0:	f200 810e 	bhi.w	8007b10 <SCSI_ProcessCmd+0x234>
 80078f4:	a201      	add	r2, pc, #4	; (adr r2, 80078fc <SCSI_ProcessCmd+0x20>)
 80078f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078fa:	bf00      	nop
 80078fc:	08007a69 	.word	0x08007a69
 8007900:	08007b11 	.word	0x08007b11
 8007904:	08007b11 	.word	0x08007b11
 8007908:	08007a77 	.word	0x08007a77
 800790c:	08007b11 	.word	0x08007b11
 8007910:	08007b11 	.word	0x08007b11
 8007914:	08007b11 	.word	0x08007b11
 8007918:	08007b11 	.word	0x08007b11
 800791c:	08007b11 	.word	0x08007b11
 8007920:	08007b11 	.word	0x08007b11
 8007924:	08007b11 	.word	0x08007b11
 8007928:	08007b11 	.word	0x08007b11
 800792c:	08007b11 	.word	0x08007b11
 8007930:	08007b11 	.word	0x08007b11
 8007934:	08007b11 	.word	0x08007b11
 8007938:	08007b11 	.word	0x08007b11
 800793c:	08007b11 	.word	0x08007b11
 8007940:	08007b11 	.word	0x08007b11
 8007944:	08007a85 	.word	0x08007a85
 8007948:	08007b11 	.word	0x08007b11
 800794c:	08007b11 	.word	0x08007b11
 8007950:	08007b11 	.word	0x08007b11
 8007954:	08007b11 	.word	0x08007b11
 8007958:	08007b11 	.word	0x08007b11
 800795c:	08007b11 	.word	0x08007b11
 8007960:	08007b11 	.word	0x08007b11
 8007964:	08007aaf 	.word	0x08007aaf
 8007968:	08007a93 	.word	0x08007a93
 800796c:	08007b11 	.word	0x08007b11
 8007970:	08007b11 	.word	0x08007b11
 8007974:	08007aa1 	.word	0x08007aa1
 8007978:	08007b11 	.word	0x08007b11
 800797c:	08007b11 	.word	0x08007b11
 8007980:	08007b11 	.word	0x08007b11
 8007984:	08007b11 	.word	0x08007b11
 8007988:	08007acb 	.word	0x08007acb
 800798c:	08007b11 	.word	0x08007b11
 8007990:	08007ad9 	.word	0x08007ad9
 8007994:	08007b11 	.word	0x08007b11
 8007998:	08007b11 	.word	0x08007b11
 800799c:	08007ae7 	.word	0x08007ae7
 80079a0:	08007b11 	.word	0x08007b11
 80079a4:	08007af5 	.word	0x08007af5
 80079a8:	08007b11 	.word	0x08007b11
 80079ac:	08007b11 	.word	0x08007b11
 80079b0:	08007b11 	.word	0x08007b11
 80079b4:	08007b11 	.word	0x08007b11
 80079b8:	08007b03 	.word	0x08007b03
 80079bc:	08007b11 	.word	0x08007b11
 80079c0:	08007b11 	.word	0x08007b11
 80079c4:	08007b11 	.word	0x08007b11
 80079c8:	08007b11 	.word	0x08007b11
 80079cc:	08007b11 	.word	0x08007b11
 80079d0:	08007b11 	.word	0x08007b11
 80079d4:	08007b11 	.word	0x08007b11
 80079d8:	08007b11 	.word	0x08007b11
 80079dc:	08007b11 	.word	0x08007b11
 80079e0:	08007b11 	.word	0x08007b11
 80079e4:	08007b11 	.word	0x08007b11
 80079e8:	08007b11 	.word	0x08007b11
 80079ec:	08007b11 	.word	0x08007b11
 80079f0:	08007b11 	.word	0x08007b11
 80079f4:	08007b11 	.word	0x08007b11
 80079f8:	08007b11 	.word	0x08007b11
 80079fc:	08007b11 	.word	0x08007b11
 8007a00:	08007b11 	.word	0x08007b11
 8007a04:	08007b11 	.word	0x08007b11
 8007a08:	08007b11 	.word	0x08007b11
 8007a0c:	08007b11 	.word	0x08007b11
 8007a10:	08007b11 	.word	0x08007b11
 8007a14:	08007b11 	.word	0x08007b11
 8007a18:	08007b11 	.word	0x08007b11
 8007a1c:	08007b11 	.word	0x08007b11
 8007a20:	08007b11 	.word	0x08007b11
 8007a24:	08007b11 	.word	0x08007b11
 8007a28:	08007b11 	.word	0x08007b11
 8007a2c:	08007b11 	.word	0x08007b11
 8007a30:	08007b11 	.word	0x08007b11
 8007a34:	08007b11 	.word	0x08007b11
 8007a38:	08007b11 	.word	0x08007b11
 8007a3c:	08007b11 	.word	0x08007b11
 8007a40:	08007b11 	.word	0x08007b11
 8007a44:	08007b11 	.word	0x08007b11
 8007a48:	08007b11 	.word	0x08007b11
 8007a4c:	08007b11 	.word	0x08007b11
 8007a50:	08007b11 	.word	0x08007b11
 8007a54:	08007b11 	.word	0x08007b11
 8007a58:	08007b11 	.word	0x08007b11
 8007a5c:	08007b11 	.word	0x08007b11
 8007a60:	08007b11 	.word	0x08007b11
 8007a64:	08007abd 	.word	0x08007abd
  {
    case SCSI_TEST_UNIT_READY:
      SCSI_TestUnitReady(pdev, lun, cmd);
 8007a68:	7afb      	ldrb	r3, [r7, #11]
 8007a6a:	687a      	ldr	r2, [r7, #4]
 8007a6c:	4619      	mov	r1, r3
 8007a6e:	68f8      	ldr	r0, [r7, #12]
 8007a70:	f000 f85c 	bl	8007b2c <SCSI_TestUnitReady>
      break;
 8007a74:	e055      	b.n	8007b22 <SCSI_ProcessCmd+0x246>

    case SCSI_REQUEST_SENSE:
      SCSI_RequestSense(pdev, lun, cmd);
 8007a76:	7afb      	ldrb	r3, [r7, #11]
 8007a78:	687a      	ldr	r2, [r7, #4]
 8007a7a:	4619      	mov	r1, r3
 8007a7c:	68f8      	ldr	r0, [r7, #12]
 8007a7e:	f000 fa0b 	bl	8007e98 <SCSI_RequestSense>
      break;
 8007a82:	e04e      	b.n	8007b22 <SCSI_ProcessCmd+0x246>
    case SCSI_INQUIRY:
      SCSI_Inquiry(pdev, lun, cmd);
 8007a84:	7afb      	ldrb	r3, [r7, #11]
 8007a86:	687a      	ldr	r2, [r7, #4]
 8007a88:	4619      	mov	r1, r3
 8007a8a:	68f8      	ldr	r0, [r7, #12]
 8007a8c:	f000 f888 	bl	8007ba0 <SCSI_Inquiry>
      break;
 8007a90:	e047      	b.n	8007b22 <SCSI_ProcessCmd+0x246>

    case SCSI_START_STOP_UNIT:
      SCSI_StartStopUnit(pdev, lun, cmd);
 8007a92:	7afb      	ldrb	r3, [r7, #11]
 8007a94:	687a      	ldr	r2, [r7, #4]
 8007a96:	4619      	mov	r1, r3
 8007a98:	68f8      	ldr	r0, [r7, #12]
 8007a9a:	f000 faa2 	bl	8007fe2 <SCSI_StartStopUnit>
      break;
 8007a9e:	e040      	b.n	8007b22 <SCSI_ProcessCmd+0x246>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      SCSI_StartStopUnit(pdev, lun, cmd);
 8007aa0:	7afb      	ldrb	r3, [r7, #11]
 8007aa2:	687a      	ldr	r2, [r7, #4]
 8007aa4:	4619      	mov	r1, r3
 8007aa6:	68f8      	ldr	r0, [r7, #12]
 8007aa8:	f000 fa9b 	bl	8007fe2 <SCSI_StartStopUnit>
      break;
 8007aac:	e039      	b.n	8007b22 <SCSI_ProcessCmd+0x246>

    case SCSI_MODE_SENSE6:
      SCSI_ModeSense6(pdev, lun, cmd);
 8007aae:	7afb      	ldrb	r3, [r7, #11]
 8007ab0:	687a      	ldr	r2, [r7, #4]
 8007ab2:	4619      	mov	r1, r3
 8007ab4:	68f8      	ldr	r0, [r7, #12]
 8007ab6:	f000 f99f 	bl	8007df8 <SCSI_ModeSense6>
      break;
 8007aba:	e032      	b.n	8007b22 <SCSI_ProcessCmd+0x246>

    case SCSI_MODE_SENSE10:
      SCSI_ModeSense10(pdev, lun, cmd);
 8007abc:	7afb      	ldrb	r3, [r7, #11]
 8007abe:	687a      	ldr	r2, [r7, #4]
 8007ac0:	4619      	mov	r1, r3
 8007ac2:	68f8      	ldr	r0, [r7, #12]
 8007ac4:	f000 f9c0 	bl	8007e48 <SCSI_ModeSense10>
      break;
 8007ac8:	e02b      	b.n	8007b22 <SCSI_ProcessCmd+0x246>

    case SCSI_READ_FORMAT_CAPACITIES:
      SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8007aca:	7afb      	ldrb	r3, [r7, #11]
 8007acc:	687a      	ldr	r2, [r7, #4]
 8007ace:	4619      	mov	r1, r3
 8007ad0:	68f8      	ldr	r0, [r7, #12]
 8007ad2:	f000 f92c 	bl	8007d2e <SCSI_ReadFormatCapacity>
      break;
 8007ad6:	e024      	b.n	8007b22 <SCSI_ProcessCmd+0x246>

    case SCSI_READ_CAPACITY10:
      SCSI_ReadCapacity10(pdev, lun, cmd);
 8007ad8:	7afb      	ldrb	r3, [r7, #11]
 8007ada:	687a      	ldr	r2, [r7, #4]
 8007adc:	4619      	mov	r1, r3
 8007ade:	68f8      	ldr	r0, [r7, #12]
 8007ae0:	f000 f8be 	bl	8007c60 <SCSI_ReadCapacity10>
      break;
 8007ae4:	e01d      	b.n	8007b22 <SCSI_ProcessCmd+0x246>

    case SCSI_READ10:
      SCSI_Read10(pdev, lun, cmd);
 8007ae6:	7afb      	ldrb	r3, [r7, #11]
 8007ae8:	687a      	ldr	r2, [r7, #4]
 8007aea:	4619      	mov	r1, r3
 8007aec:	68f8      	ldr	r0, [r7, #12]
 8007aee:	f000 fa8d 	bl	800800c <SCSI_Read10>
      break;
 8007af2:	e016      	b.n	8007b22 <SCSI_ProcessCmd+0x246>

    case SCSI_WRITE10:
      SCSI_Write10(pdev, lun, cmd);
 8007af4:	7afb      	ldrb	r3, [r7, #11]
 8007af6:	687a      	ldr	r2, [r7, #4]
 8007af8:	4619      	mov	r1, r3
 8007afa:	68f8      	ldr	r0, [r7, #12]
 8007afc:	f000 fb12 	bl	8008124 <SCSI_Write10>
      break;
 8007b00:	e00f      	b.n	8007b22 <SCSI_ProcessCmd+0x246>

    case SCSI_VERIFY10:
      SCSI_Verify10(pdev, lun, cmd);
 8007b02:	7afb      	ldrb	r3, [r7, #11]
 8007b04:	687a      	ldr	r2, [r7, #4]
 8007b06:	4619      	mov	r1, r3
 8007b08:	68f8      	ldr	r0, [r7, #12]
 8007b0a:	f000 fbbb 	bl	8008284 <SCSI_Verify10>
      break;
 8007b0e:	e008      	b.n	8007b22 <SCSI_ProcessCmd+0x246>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8007b10:	7af9      	ldrb	r1, [r7, #11]
 8007b12:	2320      	movs	r3, #32
 8007b14:	2205      	movs	r2, #5
 8007b16:	68f8      	ldr	r0, [r7, #12]
 8007b18:	f000 fa29 	bl	8007f6e <SCSI_SenseCode>
      return -1;
 8007b1c:	f04f 33ff 	mov.w	r3, #4294967295
 8007b20:	e000      	b.n	8007b24 <SCSI_ProcessCmd+0x248>
  }

  return 0;
 8007b22:	2300      	movs	r3, #0
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	3710      	adds	r7, #16
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}

08007b2c <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b086      	sub	sp, #24
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	60f8      	str	r0, [r7, #12]
 8007b34:	460b      	mov	r3, r1
 8007b36:	607a      	str	r2, [r7, #4]
 8007b38:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b40:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d00a      	beq.n	8007b62 <SCSI_TestUnitReady+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8007b52:	2320      	movs	r3, #32
 8007b54:	2205      	movs	r2, #5
 8007b56:	68f8      	ldr	r0, [r7, #12]
 8007b58:	f000 fa09 	bl	8007f6e <SCSI_SenseCode>

    return -1;
 8007b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8007b60:	e019      	b.n	8007b96 <SCSI_TestUnitReady+0x6a>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b68:	689b      	ldr	r3, [r3, #8]
 8007b6a:	7afa      	ldrb	r2, [r7, #11]
 8007b6c:	4610      	mov	r0, r2
 8007b6e:	4798      	blx	r3
 8007b70:	4603      	mov	r3, r0
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d00b      	beq.n	8007b8e <SCSI_TestUnitReady+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007b76:	7af9      	ldrb	r1, [r7, #11]
 8007b78:	233a      	movs	r3, #58	; 0x3a
 8007b7a:	2202      	movs	r2, #2
 8007b7c:	68f8      	ldr	r0, [r7, #12]
 8007b7e:	f000 f9f6 	bl	8007f6e <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	2205      	movs	r2, #5
 8007b86:	721a      	strb	r2, [r3, #8]

    return -1;
 8007b88:	f04f 33ff 	mov.w	r3, #4294967295
 8007b8c:	e003      	b.n	8007b96 <SCSI_TestUnitReady+0x6a>
  }
  hmsc->bot_data_length = 0U;
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	2200      	movs	r2, #0
 8007b92:	815a      	strh	r2, [r3, #10]

  return 0;
 8007b94:	2300      	movs	r3, #0
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3718      	adds	r7, #24
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}
	...

08007ba0 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t  SCSI_Inquiry(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b089      	sub	sp, #36	; 0x24
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	60f8      	str	r0, [r7, #12]
 8007ba8:	460b      	mov	r3, r1
 8007baa:	607a      	str	r2, [r7, #4]
 8007bac:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bb4:	61bb      	str	r3, [r7, #24]

  if (params[1] & 0x01U)/*Evpd is set*/
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	3301      	adds	r3, #1
 8007bba:	781b      	ldrb	r3, [r3, #0]
 8007bbc:	f003 0301 	and.w	r3, r3, #1
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d014      	beq.n	8007bee <SCSI_Inquiry+0x4e>
  {
    len = LENGTH_INQUIRY_PAGE00;
 8007bc4:	2307      	movs	r3, #7
 8007bc6:	83fb      	strh	r3, [r7, #30]
    hmsc->bot_data_length = len;
 8007bc8:	69bb      	ldr	r3, [r7, #24]
 8007bca:	8bfa      	ldrh	r2, [r7, #30]
 8007bcc:	815a      	strh	r2, [r3, #10]

    while (len)
 8007bce:	e00a      	b.n	8007be6 <SCSI_Inquiry+0x46>
    {
      len--;
 8007bd0:	8bfb      	ldrh	r3, [r7, #30]
 8007bd2:	3b01      	subs	r3, #1
 8007bd4:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = MSC_Page00_Inquiry_Data[len];
 8007bd6:	8bfa      	ldrh	r2, [r7, #30]
 8007bd8:	8bfb      	ldrh	r3, [r7, #30]
 8007bda:	4920      	ldr	r1, [pc, #128]	; (8007c5c <SCSI_Inquiry+0xbc>)
 8007bdc:	5c89      	ldrb	r1, [r1, r2]
 8007bde:	69ba      	ldr	r2, [r7, #24]
 8007be0:	4413      	add	r3, r2
 8007be2:	460a      	mov	r2, r1
 8007be4:	731a      	strb	r2, [r3, #12]
    while (len)
 8007be6:	8bfb      	ldrh	r3, [r7, #30]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d1f1      	bne.n	8007bd0 <SCSI_Inquiry+0x30>
 8007bec:	e02e      	b.n	8007c4c <SCSI_Inquiry+0xac>
    }
  }
  else
  {
    pPage = (uint8_t *)(void *) & ((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007bf4:	69d9      	ldr	r1, [r3, #28]
 8007bf6:	7afa      	ldrb	r2, [r7, #11]
 8007bf8:	4613      	mov	r3, r2
 8007bfa:	00db      	lsls	r3, r3, #3
 8007bfc:	4413      	add	r3, r2
 8007bfe:	009b      	lsls	r3, r3, #2
 8007c00:	440b      	add	r3, r1
 8007c02:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	3304      	adds	r3, #4
 8007c08:	781b      	ldrb	r3, [r3, #0]
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	3305      	adds	r3, #5
 8007c0e:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	3304      	adds	r3, #4
 8007c14:	781b      	ldrb	r3, [r3, #0]
 8007c16:	b29b      	uxth	r3, r3
 8007c18:	8bfa      	ldrh	r2, [r7, #30]
 8007c1a:	429a      	cmp	r2, r3
 8007c1c:	d303      	bcc.n	8007c26 <SCSI_Inquiry+0x86>
    {
      len = params[4];
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	3304      	adds	r3, #4
 8007c22:	781b      	ldrb	r3, [r3, #0]
 8007c24:	83fb      	strh	r3, [r7, #30]
    }
    hmsc->bot_data_length = len;
 8007c26:	69bb      	ldr	r3, [r7, #24]
 8007c28:	8bfa      	ldrh	r2, [r7, #30]
 8007c2a:	815a      	strh	r2, [r3, #10]

    while (len)
 8007c2c:	e00b      	b.n	8007c46 <SCSI_Inquiry+0xa6>
    {
      len--;
 8007c2e:	8bfb      	ldrh	r3, [r7, #30]
 8007c30:	3b01      	subs	r3, #1
 8007c32:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = pPage[len];
 8007c34:	8bfb      	ldrh	r3, [r7, #30]
 8007c36:	697a      	ldr	r2, [r7, #20]
 8007c38:	441a      	add	r2, r3
 8007c3a:	8bfb      	ldrh	r3, [r7, #30]
 8007c3c:	7811      	ldrb	r1, [r2, #0]
 8007c3e:	69ba      	ldr	r2, [r7, #24]
 8007c40:	4413      	add	r3, r2
 8007c42:	460a      	mov	r2, r1
 8007c44:	731a      	strb	r2, [r3, #12]
    while (len)
 8007c46:	8bfb      	ldrh	r3, [r7, #30]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d1f0      	bne.n	8007c2e <SCSI_Inquiry+0x8e>
    }
  }

  return 0;
 8007c4c:	2300      	movs	r3, #0
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3724      	adds	r7, #36	; 0x24
 8007c52:	46bd      	mov	sp, r7
 8007c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c58:	4770      	bx	lr
 8007c5a:	bf00      	nop
 8007c5c:	0800a0bc 	.word	0x0800a0bc

08007c60 <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b086      	sub	sp, #24
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	60f8      	str	r0, [r7, #12]
 8007c68:	460b      	mov	r3, r1
 8007c6a:	607a      	str	r2, [r7, #4]
 8007c6c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c74:	617b      	str	r3, [r7, #20]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size) != 0)
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c7c:	685b      	ldr	r3, [r3, #4]
 8007c7e:	697a      	ldr	r2, [r7, #20]
 8007c80:	f502 7118 	add.w	r1, r2, #608	; 0x260
 8007c84:	697a      	ldr	r2, [r7, #20]
 8007c86:	f202 225e 	addw	r2, r2, #606	; 0x25e
 8007c8a:	7af8      	ldrb	r0, [r7, #11]
 8007c8c:	4798      	blx	r3
 8007c8e:	4603      	mov	r3, r0
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d008      	beq.n	8007ca6 <SCSI_ReadCapacity10+0x46>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007c94:	7af9      	ldrb	r1, [r7, #11]
 8007c96:	233a      	movs	r3, #58	; 0x3a
 8007c98:	2202      	movs	r2, #2
 8007c9a:	68f8      	ldr	r0, [r7, #12]
 8007c9c:	f000 f967 	bl	8007f6e <SCSI_SenseCode>
    return -1;
 8007ca0:	f04f 33ff 	mov.w	r3, #4294967295
 8007ca4:	e03f      	b.n	8007d26 <SCSI_ReadCapacity10+0xc6>
  }
  else
  {

    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8007cac:	3b01      	subs	r3, #1
 8007cae:	0e1b      	lsrs	r3, r3, #24
 8007cb0:	b2da      	uxtb	r2, r3
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	731a      	strb	r2, [r3, #12]
    hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8007cbc:	3b01      	subs	r3, #1
 8007cbe:	0c1b      	lsrs	r3, r3, #16
 8007cc0:	b2da      	uxtb	r2, r3
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	735a      	strb	r2, [r3, #13]
    hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8007ccc:	3b01      	subs	r3, #1
 8007cce:	0a1b      	lsrs	r3, r3, #8
 8007cd0:	b2da      	uxtb	r2, r3
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8007cdc:	b2db      	uxtb	r3, r3
 8007cde:	3b01      	subs	r3, #1
 8007ce0:	b2da      	uxtb	r2, r3
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	73da      	strb	r2, [r3, #15]

    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8007cec:	161b      	asrs	r3, r3, #24
 8007cee:	b2da      	uxtb	r2, r3
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8007cfa:	141b      	asrs	r3, r3, #16
 8007cfc:	b2da      	uxtb	r2, r3
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8007d08:	0a1b      	lsrs	r3, r3, #8
 8007d0a:	b29b      	uxth	r3, r3
 8007d0c:	b2da      	uxtb	r2, r3
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8007d12:	697b      	ldr	r3, [r7, #20]
 8007d14:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8007d18:	b2da      	uxtb	r2, r3
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data_length = 8U;
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	2208      	movs	r2, #8
 8007d22:	815a      	strh	r2, [r3, #10]
    return 0;
 8007d24:	2300      	movs	r3, #0
  }
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3718      	adds	r7, #24
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}

08007d2e <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007d2e:	b580      	push	{r7, lr}
 8007d30:	b088      	sub	sp, #32
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	60f8      	str	r0, [r7, #12]
 8007d36:	460b      	mov	r3, r1
 8007d38:	607a      	str	r2, [r7, #4]
 8007d3a:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d42:	61bb      	str	r3, [r7, #24]

  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;

  for (i = 0U; i < 12U ; i++)
 8007d44:	2300      	movs	r3, #0
 8007d46:	83fb      	strh	r3, [r7, #30]
 8007d48:	e007      	b.n	8007d5a <SCSI_ReadFormatCapacity+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 8007d4a:	8bfb      	ldrh	r3, [r7, #30]
 8007d4c:	69ba      	ldr	r2, [r7, #24]
 8007d4e:	4413      	add	r3, r2
 8007d50:	2200      	movs	r2, #0
 8007d52:	731a      	strb	r2, [r3, #12]
  for (i = 0U; i < 12U ; i++)
 8007d54:	8bfb      	ldrh	r3, [r7, #30]
 8007d56:	3301      	adds	r3, #1
 8007d58:	83fb      	strh	r3, [r7, #30]
 8007d5a:	8bfb      	ldrh	r3, [r7, #30]
 8007d5c:	2b0b      	cmp	r3, #11
 8007d5e:	d9f4      	bls.n	8007d4a <SCSI_ReadFormatCapacity+0x1c>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size) != 0U)
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	f107 0216 	add.w	r2, r7, #22
 8007d6c:	f107 0110 	add.w	r1, r7, #16
 8007d70:	7af8      	ldrb	r0, [r7, #11]
 8007d72:	4798      	blx	r3
 8007d74:	4603      	mov	r3, r0
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d008      	beq.n	8007d8c <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007d7a:	7af9      	ldrb	r1, [r7, #11]
 8007d7c:	233a      	movs	r3, #58	; 0x3a
 8007d7e:	2202      	movs	r2, #2
 8007d80:	68f8      	ldr	r0, [r7, #12]
 8007d82:	f000 f8f4 	bl	8007f6e <SCSI_SenseCode>
    return -1;
 8007d86:	f04f 33ff 	mov.w	r3, #4294967295
 8007d8a:	e030      	b.n	8007dee <SCSI_ReadFormatCapacity+0xc0>
  }
  else
  {
    hmsc->bot_data[3] = 0x08U;
 8007d8c:	69bb      	ldr	r3, [r7, #24]
 8007d8e:	2208      	movs	r2, #8
 8007d90:	73da      	strb	r2, [r3, #15]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	3b01      	subs	r3, #1
 8007d96:	0e1b      	lsrs	r3, r3, #24
 8007d98:	b2da      	uxtb	r2, r3
 8007d9a:	69bb      	ldr	r3, [r7, #24]
 8007d9c:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	3b01      	subs	r3, #1
 8007da2:	0c1b      	lsrs	r3, r3, #16
 8007da4:	b2da      	uxtb	r2, r3
 8007da6:	69bb      	ldr	r3, [r7, #24]
 8007da8:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	3b01      	subs	r3, #1
 8007dae:	0a1b      	lsrs	r3, r3, #8
 8007db0:	b2da      	uxtb	r2, r3
 8007db2:	69bb      	ldr	r3, [r7, #24]
 8007db4:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	b2db      	uxtb	r3, r3
 8007dba:	3b01      	subs	r3, #1
 8007dbc:	b2da      	uxtb	r2, r3
 8007dbe:	69bb      	ldr	r3, [r7, #24]
 8007dc0:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data[8] = 0x02U;
 8007dc2:	69bb      	ldr	r3, [r7, #24]
 8007dc4:	2202      	movs	r2, #2
 8007dc6:	751a      	strb	r2, [r3, #20]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8007dc8:	8afb      	ldrh	r3, [r7, #22]
 8007dca:	141b      	asrs	r3, r3, #16
 8007dcc:	b2da      	uxtb	r2, r3
 8007dce:	69bb      	ldr	r3, [r7, #24]
 8007dd0:	755a      	strb	r2, [r3, #21]
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8007dd2:	8afb      	ldrh	r3, [r7, #22]
 8007dd4:	0a1b      	lsrs	r3, r3, #8
 8007dd6:	b29b      	uxth	r3, r3
 8007dd8:	b2da      	uxtb	r2, r3
 8007dda:	69bb      	ldr	r3, [r7, #24]
 8007ddc:	759a      	strb	r2, [r3, #22]
    hmsc->bot_data[11] = (uint8_t)(blk_size);
 8007dde:	8afb      	ldrh	r3, [r7, #22]
 8007de0:	b2da      	uxtb	r2, r3
 8007de2:	69bb      	ldr	r3, [r7, #24]
 8007de4:	75da      	strb	r2, [r3, #23]

    hmsc->bot_data_length = 12U;
 8007de6:	69bb      	ldr	r3, [r7, #24]
 8007de8:	220c      	movs	r2, #12
 8007dea:	815a      	strh	r2, [r3, #10]
    return 0;
 8007dec:	2300      	movs	r3, #0
  }
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3720      	adds	r7, #32
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}
	...

08007df8 <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b087      	sub	sp, #28
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	60f8      	str	r0, [r7, #12]
 8007e00:	460b      	mov	r3, r1
 8007e02:	607a      	str	r2, [r7, #4]
 8007e04:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e0c:	613b      	str	r3, [r7, #16]
  uint16_t len = 8U;
 8007e0e:	2308      	movs	r3, #8
 8007e10:	82fb      	strh	r3, [r7, #22]
  hmsc->bot_data_length = len;
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	8afa      	ldrh	r2, [r7, #22]
 8007e16:	815a      	strh	r2, [r3, #10]

  while (len)
 8007e18:	e00a      	b.n	8007e30 <SCSI_ModeSense6+0x38>
  {
    len--;
 8007e1a:	8afb      	ldrh	r3, [r7, #22]
 8007e1c:	3b01      	subs	r3, #1
 8007e1e:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense6_data[len];
 8007e20:	8afa      	ldrh	r2, [r7, #22]
 8007e22:	8afb      	ldrh	r3, [r7, #22]
 8007e24:	4907      	ldr	r1, [pc, #28]	; (8007e44 <SCSI_ModeSense6+0x4c>)
 8007e26:	5c89      	ldrb	r1, [r1, r2]
 8007e28:	693a      	ldr	r2, [r7, #16]
 8007e2a:	4413      	add	r3, r2
 8007e2c:	460a      	mov	r2, r1
 8007e2e:	731a      	strb	r2, [r3, #12]
  while (len)
 8007e30:	8afb      	ldrh	r3, [r7, #22]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d1f1      	bne.n	8007e1a <SCSI_ModeSense6+0x22>
  }
  return 0;
 8007e36:	2300      	movs	r3, #0
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	371c      	adds	r7, #28
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e42:	4770      	bx	lr
 8007e44:	0800a0c4 	.word	0x0800a0c4

08007e48 <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b087      	sub	sp, #28
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	60f8      	str	r0, [r7, #12]
 8007e50:	460b      	mov	r3, r1
 8007e52:	607a      	str	r2, [r7, #4]
 8007e54:	72fb      	strb	r3, [r7, #11]
  uint16_t len = 8U;
 8007e56:	2308      	movs	r3, #8
 8007e58:	82fb      	strh	r3, [r7, #22]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e60:	613b      	str	r3, [r7, #16]

  hmsc->bot_data_length = len;
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	8afa      	ldrh	r2, [r7, #22]
 8007e66:	815a      	strh	r2, [r3, #10]

  while (len)
 8007e68:	e00a      	b.n	8007e80 <SCSI_ModeSense10+0x38>
  {
    len--;
 8007e6a:	8afb      	ldrh	r3, [r7, #22]
 8007e6c:	3b01      	subs	r3, #1
 8007e6e:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense10_data[len];
 8007e70:	8afa      	ldrh	r2, [r7, #22]
 8007e72:	8afb      	ldrh	r3, [r7, #22]
 8007e74:	4907      	ldr	r1, [pc, #28]	; (8007e94 <SCSI_ModeSense10+0x4c>)
 8007e76:	5c89      	ldrb	r1, [r1, r2]
 8007e78:	693a      	ldr	r2, [r7, #16]
 8007e7a:	4413      	add	r3, r2
 8007e7c:	460a      	mov	r2, r1
 8007e7e:	731a      	strb	r2, [r3, #12]
  while (len)
 8007e80:	8afb      	ldrh	r3, [r7, #22]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d1f1      	bne.n	8007e6a <SCSI_ModeSense10+0x22>
  }

  return 0;
 8007e86:	2300      	movs	r3, #0
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	371c      	adds	r7, #28
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e92:	4770      	bx	lr
 8007e94:	0800a0cc 	.word	0x0800a0cc

08007e98 <SCSI_RequestSense>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_RequestSense(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b087      	sub	sp, #28
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	60f8      	str	r0, [r7, #12]
 8007ea0:	460b      	mov	r3, r1
 8007ea2:	607a      	str	r2, [r7, #4]
 8007ea4:	72fb      	strb	r3, [r7, #11]
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007eac:	613b      	str	r3, [r7, #16]

  for (i = 0U ; i < REQUEST_SENSE_DATA_LEN; i++)
 8007eae:	2300      	movs	r3, #0
 8007eb0:	75fb      	strb	r3, [r7, #23]
 8007eb2:	e007      	b.n	8007ec4 <SCSI_RequestSense+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 8007eb4:	7dfb      	ldrb	r3, [r7, #23]
 8007eb6:	693a      	ldr	r2, [r7, #16]
 8007eb8:	4413      	add	r3, r2
 8007eba:	2200      	movs	r2, #0
 8007ebc:	731a      	strb	r2, [r3, #12]
  for (i = 0U ; i < REQUEST_SENSE_DATA_LEN; i++)
 8007ebe:	7dfb      	ldrb	r3, [r7, #23]
 8007ec0:	3301      	adds	r3, #1
 8007ec2:	75fb      	strb	r3, [r7, #23]
 8007ec4:	7dfb      	ldrb	r3, [r7, #23]
 8007ec6:	2b11      	cmp	r3, #17
 8007ec8:	d9f4      	bls.n	8007eb4 <SCSI_RequestSense+0x1c>
  }

  hmsc->bot_data[0] = 0x70U;
 8007eca:	693b      	ldr	r3, [r7, #16]
 8007ecc:	2270      	movs	r2, #112	; 0x70
 8007ece:	731a      	strb	r2, [r3, #12]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	220c      	movs	r2, #12
 8007ed4:	74da      	strb	r2, [r3, #19]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8007ed6:	693b      	ldr	r3, [r7, #16]
 8007ed8:	f893 225c 	ldrb.w	r2, [r3, #604]	; 0x25c
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8007ee2:	429a      	cmp	r2, r3
 8007ee4:	d02e      	beq.n	8007f44 <SCSI_RequestSense+0xac>
  {

    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8007ee6:	693b      	ldr	r3, [r7, #16]
 8007ee8:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8007eec:	693a      	ldr	r2, [r7, #16]
 8007eee:	3347      	adds	r3, #71	; 0x47
 8007ef0:	00db      	lsls	r3, r3, #3
 8007ef2:	4413      	add	r3, r2
 8007ef4:	791a      	ldrb	r2, [r3, #4]
 8007ef6:	693b      	ldr	r3, [r7, #16]
 8007ef8:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8007f00:	693a      	ldr	r2, [r7, #16]
 8007f02:	3347      	adds	r3, #71	; 0x47
 8007f04:	00db      	lsls	r3, r3, #3
 8007f06:	4413      	add	r3, r2
 8007f08:	7a5a      	ldrb	r2, [r3, #9]
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	761a      	strb	r2, [r3, #24]
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8007f14:	693a      	ldr	r2, [r7, #16]
 8007f16:	3347      	adds	r3, #71	; 0x47
 8007f18:	00db      	lsls	r3, r3, #3
 8007f1a:	4413      	add	r3, r2
 8007f1c:	7a1a      	ldrb	r2, [r3, #8]
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	765a      	strb	r2, [r3, #25]
    hmsc->scsi_sense_head++;
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8007f28:	3301      	adds	r3, #1
 8007f2a:	b2da      	uxtb	r2, r3
 8007f2c:	693b      	ldr	r3, [r7, #16]
 8007f2e:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8007f32:	693b      	ldr	r3, [r7, #16]
 8007f34:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8007f38:	2b04      	cmp	r3, #4
 8007f3a:	d103      	bne.n	8007f44 <SCSI_RequestSense+0xac>
    {
      hmsc->scsi_sense_head = 0U;
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c
    }
  }
  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	2212      	movs	r2, #18
 8007f48:	815a      	strh	r2, [r3, #10]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	3304      	adds	r3, #4
 8007f4e:	781b      	ldrb	r3, [r3, #0]
 8007f50:	2b12      	cmp	r3, #18
 8007f52:	d805      	bhi.n	8007f60 <SCSI_RequestSense+0xc8>
  {
    hmsc->bot_data_length = params[4];
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	3304      	adds	r3, #4
 8007f58:	781b      	ldrb	r3, [r3, #0]
 8007f5a:	b29a      	uxth	r2, r3
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	815a      	strh	r2, [r3, #10]
  }
  return 0;
 8007f60:	2300      	movs	r3, #0
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	371c      	adds	r7, #28
 8007f66:	46bd      	mov	sp, r7
 8007f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6c:	4770      	bx	lr

08007f6e <SCSI_SenseCode>:
* @param  ASC: Additional Sense Key
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8007f6e:	b480      	push	{r7}
 8007f70:	b085      	sub	sp, #20
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	6078      	str	r0, [r7, #4]
 8007f76:	4608      	mov	r0, r1
 8007f78:	4611      	mov	r1, r2
 8007f7a:	461a      	mov	r2, r3
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	70fb      	strb	r3, [r7, #3]
 8007f80:	460b      	mov	r3, r1
 8007f82:	70bb      	strb	r3, [r7, #2]
 8007f84:	4613      	mov	r3, r2
 8007f86:	707b      	strb	r3, [r7, #1]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f8e:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8007f96:	68fa      	ldr	r2, [r7, #12]
 8007f98:	3347      	adds	r3, #71	; 0x47
 8007f9a:	00db      	lsls	r3, r3, #3
 8007f9c:	4413      	add	r3, r2
 8007f9e:	78ba      	ldrb	r2, [r7, #2]
 8007fa0:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8007fa8:	68fa      	ldr	r2, [r7, #12]
 8007faa:	3347      	adds	r3, #71	; 0x47
 8007fac:	00db      	lsls	r3, r3, #3
 8007fae:	4413      	add	r3, r2
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	721a      	strb	r2, [r3, #8]
  hmsc->scsi_sense_tail++;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8007fba:	3301      	adds	r3, #1
 8007fbc:	b2da      	uxtb	r2, r3
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8007fca:	2b04      	cmp	r3, #4
 8007fcc:	d103      	bne.n	8007fd6 <SCSI_SenseCode+0x68>
  {
    hmsc->scsi_sense_tail = 0U;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  }
}
 8007fd6:	bf00      	nop
 8007fd8:	3714      	adds	r7, #20
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe0:	4770      	bx	lr

08007fe2 <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007fe2:	b480      	push	{r7}
 8007fe4:	b087      	sub	sp, #28
 8007fe6:	af00      	add	r7, sp, #0
 8007fe8:	60f8      	str	r0, [r7, #12]
 8007fea:	460b      	mov	r3, r1
 8007fec:	607a      	str	r2, [r7, #4]
 8007fee:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ff6:	617b      	str	r3, [r7, #20]
  hmsc->bot_data_length = 0U;
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	815a      	strh	r2, [r3, #10]
  return 0;
 8007ffe:	2300      	movs	r3, #0
}
 8008000:	4618      	mov	r0, r3
 8008002:	371c      	adds	r7, #28
 8008004:	46bd      	mov	sp, r7
 8008006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800a:	4770      	bx	lr

0800800c <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b086      	sub	sp, #24
 8008010:	af00      	add	r7, sp, #0
 8008012:	60f8      	str	r0, [r7, #12]
 8008014:	460b      	mov	r3, r1
 8008016:	607a      	str	r2, [r7, #4]
 8008018:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008020:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	7a1b      	ldrb	r3, [r3, #8]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d16e      	bne.n	8008108 <SCSI_Read10+0xfc>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8008030:	b25b      	sxtb	r3, r3
 8008032:	2b00      	cmp	r3, #0
 8008034:	db0a      	blt.n	800804c <SCSI_Read10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800803c:	2320      	movs	r3, #32
 800803e:	2205      	movs	r2, #5
 8008040:	68f8      	ldr	r0, [r7, #12]
 8008042:	f7ff ff94 	bl	8007f6e <SCSI_SenseCode>
      return -1;
 8008046:	f04f 33ff 	mov.w	r3, #4294967295
 800804a:	e067      	b.n	800811c <SCSI_Read10+0x110>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008052:	689b      	ldr	r3, [r3, #8]
 8008054:	7afa      	ldrb	r2, [r7, #11]
 8008056:	4610      	mov	r0, r2
 8008058:	4798      	blx	r3
 800805a:	4603      	mov	r3, r0
 800805c:	2b00      	cmp	r3, #0
 800805e:	d008      	beq.n	8008072 <SCSI_Read10+0x66>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8008060:	7af9      	ldrb	r1, [r7, #11]
 8008062:	233a      	movs	r3, #58	; 0x3a
 8008064:	2202      	movs	r2, #2
 8008066:	68f8      	ldr	r0, [r7, #12]
 8008068:	f7ff ff81 	bl	8007f6e <SCSI_SenseCode>
      return -1;
 800806c:	f04f 33ff 	mov.w	r3, #4294967295
 8008070:	e054      	b.n	800811c <SCSI_Read10+0x110>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	3302      	adds	r3, #2
 8008076:	781b      	ldrb	r3, [r3, #0]
 8008078:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	3303      	adds	r3, #3
 800807e:	781b      	ldrb	r3, [r3, #0]
 8008080:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8008082:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	3304      	adds	r3, #4
 8008088:	781b      	ldrb	r3, [r3, #0]
 800808a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800808c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800808e:	687a      	ldr	r2, [r7, #4]
 8008090:	3205      	adds	r2, #5
 8008092:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8008094:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	3307      	adds	r3, #7
 80080a0:	781b      	ldrb	r3, [r3, #0]
 80080a2:	021b      	lsls	r3, r3, #8
 80080a4:	687a      	ldr	r2, [r7, #4]
 80080a6:	3208      	adds	r2, #8
 80080a8:	7812      	ldrb	r2, [r2, #0]
 80080aa:	431a      	orrs	r2, r3
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 80080b8:	697b      	ldr	r3, [r7, #20]
 80080ba:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80080be:	7af9      	ldrb	r1, [r7, #11]
 80080c0:	68f8      	ldr	r0, [r7, #12]
 80080c2:	f000 f912 	bl	80082ea <SCSI_CheckAddressRange>
 80080c6:	4603      	mov	r3, r0
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	da02      	bge.n	80080d2 <SCSI_Read10+0xc6>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80080cc:	f04f 33ff 	mov.w	r3, #4294967295
 80080d0:	e024      	b.n	800811c <SCSI_Read10+0x110>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	2202      	movs	r2, #2
 80080d6:	721a      	strb	r2, [r3, #8]

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80080de:	697b      	ldr	r3, [r7, #20]
 80080e0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80080e4:	6979      	ldr	r1, [r7, #20]
 80080e6:	f8b1 125e 	ldrh.w	r1, [r1, #606]	; 0x25e
 80080ea:	fb01 f303 	mul.w	r3, r1, r3
 80080ee:	429a      	cmp	r2, r3
 80080f0:	d00a      	beq.n	8008108 <SCSI_Read10+0xfc>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 80080f8:	2320      	movs	r3, #32
 80080fa:	2205      	movs	r2, #5
 80080fc:	68f8      	ldr	r0, [r7, #12]
 80080fe:	f7ff ff36 	bl	8007f6e <SCSI_SenseCode>
      return -1;
 8008102:	f04f 33ff 	mov.w	r3, #4294967295
 8008106:	e009      	b.n	800811c <SCSI_Read10+0x110>
    }
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800810e:	815a      	strh	r2, [r3, #10]

  return SCSI_ProcessRead(pdev, lun);
 8008110:	7afb      	ldrb	r3, [r7, #11]
 8008112:	4619      	mov	r1, r3
 8008114:	68f8      	ldr	r0, [r7, #12]
 8008116:	f000 f90a 	bl	800832e <SCSI_ProcessRead>
 800811a:	4603      	mov	r3, r0
}
 800811c:	4618      	mov	r0, r3
 800811e:	3718      	adds	r7, #24
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}

08008124 <SCSI_Write10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Write10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b086      	sub	sp, #24
 8008128:	af00      	add	r7, sp, #0
 800812a:	60f8      	str	r0, [r7, #12]
 800812c:	460b      	mov	r3, r1
 800812e:	607a      	str	r2, [r7, #4]
 8008130:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008138:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	7a1b      	ldrb	r3, [r3, #8]
 800813e:	2b00      	cmp	r3, #0
 8008140:	f040 8096 	bne.w	8008270 <SCSI_Write10+0x14c>
  {
    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 800814a:	b25b      	sxtb	r3, r3
 800814c:	2b00      	cmp	r3, #0
 800814e:	da0a      	bge.n	8008166 <SCSI_Write10+0x42>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8008156:	2320      	movs	r3, #32
 8008158:	2205      	movs	r2, #5
 800815a:	68f8      	ldr	r0, [r7, #12]
 800815c:	f7ff ff07 	bl	8007f6e <SCSI_SenseCode>
      return -1;
 8008160:	f04f 33ff 	mov.w	r3, #4294967295
 8008164:	e08a      	b.n	800827c <SCSI_Write10+0x158>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800816c:	689b      	ldr	r3, [r3, #8]
 800816e:	7afa      	ldrb	r2, [r7, #11]
 8008170:	4610      	mov	r0, r2
 8008172:	4798      	blx	r3
 8008174:	4603      	mov	r3, r0
 8008176:	2b00      	cmp	r3, #0
 8008178:	d008      	beq.n	800818c <SCSI_Write10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800817a:	7af9      	ldrb	r1, [r7, #11]
 800817c:	233a      	movs	r3, #58	; 0x3a
 800817e:	2202      	movs	r2, #2
 8008180:	68f8      	ldr	r0, [r7, #12]
 8008182:	f7ff fef4 	bl	8007f6e <SCSI_SenseCode>
      return -1;
 8008186:	f04f 33ff 	mov.w	r3, #4294967295
 800818a:	e077      	b.n	800827c <SCSI_Write10+0x158>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008192:	68db      	ldr	r3, [r3, #12]
 8008194:	7afa      	ldrb	r2, [r7, #11]
 8008196:	4610      	mov	r0, r2
 8008198:	4798      	blx	r3
 800819a:	4603      	mov	r3, r0
 800819c:	2b00      	cmp	r3, #0
 800819e:	d008      	beq.n	80081b2 <SCSI_Write10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 80081a0:	7af9      	ldrb	r1, [r7, #11]
 80081a2:	2327      	movs	r3, #39	; 0x27
 80081a4:	2202      	movs	r2, #2
 80081a6:	68f8      	ldr	r0, [r7, #12]
 80081a8:	f7ff fee1 	bl	8007f6e <SCSI_SenseCode>
      return -1;
 80081ac:	f04f 33ff 	mov.w	r3, #4294967295
 80081b0:	e064      	b.n	800827c <SCSI_Write10+0x158>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	3302      	adds	r3, #2
 80081b6:	781b      	ldrb	r3, [r3, #0]
 80081b8:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	3303      	adds	r3, #3
 80081be:	781b      	ldrb	r3, [r3, #0]
 80081c0:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80081c2:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	3304      	adds	r3, #4
 80081c8:	781b      	ldrb	r3, [r3, #0]
 80081ca:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80081cc:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80081ce:	687a      	ldr	r2, [r7, #4]
 80081d0:	3205      	adds	r2, #5
 80081d2:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 80081d4:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	3307      	adds	r3, #7
 80081e0:	781b      	ldrb	r3, [r3, #0]
 80081e2:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 80081e4:	687a      	ldr	r2, [r7, #4]
 80081e6:	3208      	adds	r2, #8
 80081e8:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 80081ea:	431a      	orrs	r2, r3
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80081fe:	7af9      	ldrb	r1, [r7, #11]
 8008200:	68f8      	ldr	r0, [r7, #12]
 8008202:	f000 f872 	bl	80082ea <SCSI_CheckAddressRange>
 8008206:	4603      	mov	r3, r0
 8008208:	2b00      	cmp	r3, #0
 800820a:	da02      	bge.n	8008212 <SCSI_Write10+0xee>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800820c:	f04f 33ff 	mov.w	r3, #4294967295
 8008210:	e034      	b.n	800827c <SCSI_Write10+0x158>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8008218:	697a      	ldr	r2, [r7, #20]
 800821a:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 800821e:	fb02 f303 	mul.w	r3, r2, r3
 8008222:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800822a:	693a      	ldr	r2, [r7, #16]
 800822c:	429a      	cmp	r2, r3
 800822e:	d00a      	beq.n	8008246 <SCSI_Write10+0x122>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8008236:	2320      	movs	r3, #32
 8008238:	2205      	movs	r2, #5
 800823a:	68f8      	ldr	r0, [r7, #12]
 800823c:	f7ff fe97 	bl	8007f6e <SCSI_SenseCode>
      return -1;
 8008240:	f04f 33ff 	mov.w	r3, #4294967295
 8008244:	e01a      	b.n	800827c <SCSI_Write10+0x158>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8008246:	693b      	ldr	r3, [r7, #16]
 8008248:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800824c:	bf28      	it	cs
 800824e:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8008252:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	2201      	movs	r2, #1
 8008258:	721a      	strb	r2, [r3, #8]
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	f103 020c 	add.w	r2, r3, #12
 8008260:	693b      	ldr	r3, [r7, #16]
 8008262:	b29b      	uxth	r3, r3
 8008264:	2101      	movs	r1, #1
 8008266:	68f8      	ldr	r0, [r7, #12]
 8008268:	f001 fe2b 	bl	8009ec2 <USBD_LL_PrepareReceive>
  }
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }
  return 0;
 800826c:	2300      	movs	r3, #0
 800826e:	e005      	b.n	800827c <SCSI_Write10+0x158>
    return SCSI_ProcessWrite(pdev, lun);
 8008270:	7afb      	ldrb	r3, [r7, #11]
 8008272:	4619      	mov	r1, r3
 8008274:	68f8      	ldr	r0, [r7, #12]
 8008276:	f000 f8ce 	bl	8008416 <SCSI_ProcessWrite>
 800827a:	4603      	mov	r3, r0
}
 800827c:	4618      	mov	r0, r3
 800827e:	3718      	adds	r7, #24
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}

08008284 <SCSI_Verify10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Verify10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b086      	sub	sp, #24
 8008288:	af00      	add	r7, sp, #0
 800828a:	60f8      	str	r0, [r7, #12]
 800828c:	460b      	mov	r3, r1
 800828e:	607a      	str	r2, [r7, #4]
 8008290:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008298:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	3301      	adds	r3, #1
 800829e:	781b      	ldrb	r3, [r3, #0]
 80082a0:	f003 0302 	and.w	r3, r3, #2
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d008      	beq.n	80082ba <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80082a8:	7af9      	ldrb	r1, [r7, #11]
 80082aa:	2324      	movs	r3, #36	; 0x24
 80082ac:	2205      	movs	r2, #5
 80082ae:	68f8      	ldr	r0, [r7, #12]
 80082b0:	f7ff fe5d 	bl	8007f6e <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 80082b4:	f04f 33ff 	mov.w	r3, #4294967295
 80082b8:	e013      	b.n	80082e2 <SCSI_Verify10+0x5e>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80082c6:	7af9      	ldrb	r1, [r7, #11]
 80082c8:	68f8      	ldr	r0, [r7, #12]
 80082ca:	f000 f80e 	bl	80082ea <SCSI_CheckAddressRange>
 80082ce:	4603      	mov	r3, r0
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	da02      	bge.n	80082da <SCSI_Verify10+0x56>
                             hmsc->scsi_blk_len) < 0)
  {
    return -1; /* error */
 80082d4:	f04f 33ff 	mov.w	r3, #4294967295
 80082d8:	e003      	b.n	80082e2 <SCSI_Verify10+0x5e>
  }
  hmsc->bot_data_length = 0U;
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	2200      	movs	r2, #0
 80082de:	815a      	strh	r2, [r3, #10]
  return 0;
 80082e0:	2300      	movs	r3, #0
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	3718      	adds	r7, #24
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}

080082ea <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 80082ea:	b580      	push	{r7, lr}
 80082ec:	b086      	sub	sp, #24
 80082ee:	af00      	add	r7, sp, #0
 80082f0:	60f8      	str	r0, [r7, #12]
 80082f2:	607a      	str	r2, [r7, #4]
 80082f4:	603b      	str	r3, [r7, #0]
 80082f6:	460b      	mov	r3, r1
 80082f8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008300:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8008302:	687a      	ldr	r2, [r7, #4]
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	441a      	add	r2, r3
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800830e:	429a      	cmp	r2, r3
 8008310:	d908      	bls.n	8008324 <SCSI_CheckAddressRange+0x3a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8008312:	7af9      	ldrb	r1, [r7, #11]
 8008314:	2321      	movs	r3, #33	; 0x21
 8008316:	2205      	movs	r2, #5
 8008318:	68f8      	ldr	r0, [r7, #12]
 800831a:	f7ff fe28 	bl	8007f6e <SCSI_SenseCode>
    return -1;
 800831e:	f04f 33ff 	mov.w	r3, #4294967295
 8008322:	e000      	b.n	8008326 <SCSI_CheckAddressRange+0x3c>
  }
  return 0;
 8008324:	2300      	movs	r3, #0
}
 8008326:	4618      	mov	r0, r3
 8008328:	3718      	adds	r7, #24
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}

0800832e <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 800832e:	b590      	push	{r4, r7, lr}
 8008330:	b085      	sub	sp, #20
 8008332:	af00      	add	r7, sp, #0
 8008334:	6078      	str	r0, [r7, #4]
 8008336:	460b      	mov	r3, r1
 8008338:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008340:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8008348:	68fa      	ldr	r2, [r7, #12]
 800834a:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 800834e:	fb02 f303 	mul.w	r3, r2, r3
 8008352:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800835a:	bf28      	it	cs
 800835c:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8008360:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008368:	691c      	ldr	r4, [r3, #16]
                                                     hmsc->bot_data,
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	f103 010c 	add.w	r1, r3, #12
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800837c:	4618      	mov	r0, r3
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 8008384:	b29b      	uxth	r3, r3
 8008386:	78f8      	ldrb	r0, [r7, #3]
 8008388:	47a0      	blx	r4
 800838a:	4603      	mov	r3, r0
 800838c:	2b00      	cmp	r3, #0
 800838e:	da08      	bge.n	80083a2 <SCSI_ProcessRead+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8008390:	78f9      	ldrb	r1, [r7, #3]
 8008392:	2311      	movs	r3, #17
 8008394:	2204      	movs	r2, #4
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f7ff fde9 	bl	8007f6e <SCSI_SenseCode>
    return -1;
 800839c:	f04f 33ff 	mov.w	r3, #4294967295
 80083a0:	e035      	b.n	800840e <SCSI_ProcessRead+0xe0>
  }

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	f103 020c 	add.w	r2, r3, #12
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	b29b      	uxth	r3, r3
 80083ac:	2181      	movs	r1, #129	; 0x81
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f001 fd64 	bl	8009e7c <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 80083c0:	4619      	mov	r1, r3
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	fbb3 f3f1 	udiv	r3, r3, r1
 80083c8:	441a      	add	r2, r3
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 80083dc:	4619      	mov	r1, r3
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	fbb3 f3f1 	udiv	r3, r3, r1
 80083e4:	1ad2      	subs	r2, r2, r3
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	1ad2      	subs	r2, r2, r3
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8008402:	2b00      	cmp	r3, #0
 8008404:	d102      	bne.n	800840c <SCSI_ProcessRead+0xde>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	2203      	movs	r2, #3
 800840a:	721a      	strb	r2, [r3, #8]
  }
  return 0;
 800840c:	2300      	movs	r3, #0
}
 800840e:	4618      	mov	r0, r3
 8008410:	3714      	adds	r7, #20
 8008412:	46bd      	mov	sp, r7
 8008414:	bd90      	pop	{r4, r7, pc}

08008416 <SCSI_ProcessWrite>:
* @param  lun: Logical unit number
* @retval status
*/

static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 8008416:	b590      	push	{r4, r7, lr}
 8008418:	b085      	sub	sp, #20
 800841a:	af00      	add	r7, sp, #0
 800841c:	6078      	str	r0, [r7, #4]
 800841e:	460b      	mov	r3, r1
 8008420:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008428:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8008430:	68fa      	ldr	r2, [r7, #12]
 8008432:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 8008436:	fb02 f303 	mul.w	r3, r2, r3
 800843a:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008442:	bf28      	it	cs
 8008444:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8008448:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008450:	695c      	ldr	r4, [r3, #20]
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	f103 010c 	add.w	r1, r3, #12
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8008464:	4618      	mov	r0, r3
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800846c:	b29b      	uxth	r3, r3
 800846e:	78f8      	ldrb	r0, [r7, #3]
 8008470:	47a0      	blx	r4
 8008472:	4603      	mov	r3, r0
 8008474:	2b00      	cmp	r3, #0
 8008476:	da08      	bge.n	800848a <SCSI_ProcessWrite+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8008478:	78f9      	ldrb	r1, [r7, #3]
 800847a:	2303      	movs	r3, #3
 800847c:	2204      	movs	r2, #4
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f7ff fd75 	bl	8007f6e <SCSI_SenseCode>

    return -1;
 8008484:	f04f 33ff 	mov.w	r3, #4294967295
 8008488:	e045      	b.n	8008516 <SCSI_ProcessWrite+0x100>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8008496:	4619      	mov	r1, r3
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	fbb3 f3f1 	udiv	r3, r3, r1
 800849e:	441a      	add	r2, r3
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 80084b2:	4619      	mov	r1, r3
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80084ba:	1ad2      	subs	r2, r2, r3
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	1ad2      	subs	r2, r2, r3
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d104      	bne.n	80084e6 <SCSI_ProcessWrite+0xd0>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80084dc:	2100      	movs	r1, #0
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f7ff f97a 	bl	80077d8 <MSC_BOT_SendCSW>
 80084e4:	e016      	b.n	8008514 <SCSI_ProcessWrite+0xfe>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80084ec:	68fa      	ldr	r2, [r7, #12]
 80084ee:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 80084f2:	fb02 f303 	mul.w	r3, r2, r3
 80084f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80084fa:	bf28      	it	cs
 80084fc:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8008500:	60bb      	str	r3, [r7, #8]
    /* Prepare EP to Receive next packet */
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	f103 020c 	add.w	r2, r3, #12
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	b29b      	uxth	r3, r3
 800850c:	2101      	movs	r1, #1
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f001 fcd7 	bl	8009ec2 <USBD_LL_PrepareReceive>
  }

  return 0;
 8008514:	2300      	movs	r3, #0
}
 8008516:	4618      	mov	r0, r3
 8008518:	3714      	adds	r7, #20
 800851a:	46bd      	mov	sp, r7
 800851c:	bd90      	pop	{r4, r7, pc}

0800851e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800851e:	b580      	push	{r7, lr}
 8008520:	b084      	sub	sp, #16
 8008522:	af00      	add	r7, sp, #0
 8008524:	60f8      	str	r0, [r7, #12]
 8008526:	60b9      	str	r1, [r7, #8]
 8008528:	4613      	mov	r3, r2
 800852a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d101      	bne.n	8008536 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008532:	2302      	movs	r3, #2
 8008534:	e01a      	b.n	800856c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800853c:	2b00      	cmp	r3, #0
 800853e:	d003      	beq.n	8008548 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	2200      	movs	r2, #0
 8008544:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d003      	beq.n	8008556 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	68ba      	ldr	r2, [r7, #8]
 8008552:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	2201      	movs	r2, #1
 800855a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	79fa      	ldrb	r2, [r7, #7]
 8008562:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008564:	68f8      	ldr	r0, [r7, #12]
 8008566:	f001 fb37 	bl	8009bd8 <USBD_LL_Init>

  return USBD_OK;
 800856a:	2300      	movs	r3, #0
}
 800856c:	4618      	mov	r0, r3
 800856e:	3710      	adds	r7, #16
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}

08008574 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008574:	b480      	push	{r7}
 8008576:	b085      	sub	sp, #20
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
 800857c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800857e:	2300      	movs	r3, #0
 8008580:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d006      	beq.n	8008596 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	683a      	ldr	r2, [r7, #0]
 800858c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8008590:	2300      	movs	r3, #0
 8008592:	73fb      	strb	r3, [r7, #15]
 8008594:	e001      	b.n	800859a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008596:	2302      	movs	r3, #2
 8008598:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800859a:	7bfb      	ldrb	r3, [r7, #15]
}
 800859c:	4618      	mov	r0, r3
 800859e:	3714      	adds	r7, #20
 80085a0:	46bd      	mov	sp, r7
 80085a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a6:	4770      	bx	lr

080085a8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b082      	sub	sp, #8
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f001 fb61 	bl	8009c78 <USBD_LL_Start>

  return USBD_OK;
 80085b6:	2300      	movs	r3, #0
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	3708      	adds	r7, #8
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}

080085c0 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b083      	sub	sp, #12
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80085c8:	2300      	movs	r3, #0
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	370c      	adds	r7, #12
 80085ce:	46bd      	mov	sp, r7
 80085d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d4:	4770      	bx	lr

080085d6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80085d6:	b580      	push	{r7, lr}
 80085d8:	b084      	sub	sp, #16
 80085da:	af00      	add	r7, sp, #0
 80085dc:	6078      	str	r0, [r7, #4]
 80085de:	460b      	mov	r3, r1
 80085e0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80085e2:	2302      	movs	r3, #2
 80085e4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d00c      	beq.n	800860a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	78fa      	ldrb	r2, [r7, #3]
 80085fa:	4611      	mov	r1, r2
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	4798      	blx	r3
 8008600:	4603      	mov	r3, r0
 8008602:	2b00      	cmp	r3, #0
 8008604:	d101      	bne.n	800860a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008606:	2300      	movs	r3, #0
 8008608:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800860a:	7bfb      	ldrb	r3, [r7, #15]
}
 800860c:	4618      	mov	r0, r3
 800860e:	3710      	adds	r7, #16
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}

08008614 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b082      	sub	sp, #8
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
 800861c:	460b      	mov	r3, r1
 800861e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008626:	685b      	ldr	r3, [r3, #4]
 8008628:	78fa      	ldrb	r2, [r7, #3]
 800862a:	4611      	mov	r1, r2
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	4798      	blx	r3

  return USBD_OK;
 8008630:	2300      	movs	r3, #0
}
 8008632:	4618      	mov	r0, r3
 8008634:	3708      	adds	r7, #8
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}

0800863a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800863a:	b580      	push	{r7, lr}
 800863c:	b082      	sub	sp, #8
 800863e:	af00      	add	r7, sp, #0
 8008640:	6078      	str	r0, [r7, #4]
 8008642:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800864a:	6839      	ldr	r1, [r7, #0]
 800864c:	4618      	mov	r0, r3
 800864e:	f000 fecd 	bl	80093ec <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2201      	movs	r2, #1
 8008656:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008660:	461a      	mov	r2, r3
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800866e:	f003 031f 	and.w	r3, r3, #31
 8008672:	2b01      	cmp	r3, #1
 8008674:	d00c      	beq.n	8008690 <USBD_LL_SetupStage+0x56>
 8008676:	2b01      	cmp	r3, #1
 8008678:	d302      	bcc.n	8008680 <USBD_LL_SetupStage+0x46>
 800867a:	2b02      	cmp	r3, #2
 800867c:	d010      	beq.n	80086a0 <USBD_LL_SetupStage+0x66>
 800867e:	e017      	b.n	80086b0 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008686:	4619      	mov	r1, r3
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	f000 f9cd 	bl	8008a28 <USBD_StdDevReq>
      break;
 800868e:	e01a      	b.n	80086c6 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008696:	4619      	mov	r1, r3
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f000 fa2f 	bl	8008afc <USBD_StdItfReq>
      break;
 800869e:	e012      	b.n	80086c6 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80086a6:	4619      	mov	r1, r3
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f000 fa6d 	bl	8008b88 <USBD_StdEPReq>
      break;
 80086ae:	e00a      	b.n	80086c6 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80086b6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80086ba:	b2db      	uxtb	r3, r3
 80086bc:	4619      	mov	r1, r3
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f001 fb59 	bl	8009d76 <USBD_LL_StallEP>
      break;
 80086c4:	bf00      	nop
  }

  return USBD_OK;
 80086c6:	2300      	movs	r3, #0
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3708      	adds	r7, #8
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}

080086d0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b086      	sub	sp, #24
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	60f8      	str	r0, [r7, #12]
 80086d8:	460b      	mov	r3, r1
 80086da:	607a      	str	r2, [r7, #4]
 80086dc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80086de:	7afb      	ldrb	r3, [r7, #11]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d14b      	bne.n	800877c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80086ea:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80086f2:	2b03      	cmp	r3, #3
 80086f4:	d134      	bne.n	8008760 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	68da      	ldr	r2, [r3, #12]
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	691b      	ldr	r3, [r3, #16]
 80086fe:	429a      	cmp	r2, r3
 8008700:	d919      	bls.n	8008736 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	68da      	ldr	r2, [r3, #12]
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	691b      	ldr	r3, [r3, #16]
 800870a:	1ad2      	subs	r2, r2, r3
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	68da      	ldr	r2, [r3, #12]
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008718:	429a      	cmp	r2, r3
 800871a:	d203      	bcs.n	8008724 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008720:	b29b      	uxth	r3, r3
 8008722:	e002      	b.n	800872a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008728:	b29b      	uxth	r3, r3
 800872a:	461a      	mov	r2, r3
 800872c:	6879      	ldr	r1, [r7, #4]
 800872e:	68f8      	ldr	r0, [r7, #12]
 8008730:	f000 ff32 	bl	8009598 <USBD_CtlContinueRx>
 8008734:	e038      	b.n	80087a8 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800873c:	691b      	ldr	r3, [r3, #16]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d00a      	beq.n	8008758 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008748:	2b03      	cmp	r3, #3
 800874a:	d105      	bne.n	8008758 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008752:	691b      	ldr	r3, [r3, #16]
 8008754:	68f8      	ldr	r0, [r7, #12]
 8008756:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008758:	68f8      	ldr	r0, [r7, #12]
 800875a:	f000 ff2f 	bl	80095bc <USBD_CtlSendStatus>
 800875e:	e023      	b.n	80087a8 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008766:	2b05      	cmp	r3, #5
 8008768:	d11e      	bne.n	80087a8 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	2200      	movs	r2, #0
 800876e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008772:	2100      	movs	r1, #0
 8008774:	68f8      	ldr	r0, [r7, #12]
 8008776:	f001 fafe 	bl	8009d76 <USBD_LL_StallEP>
 800877a:	e015      	b.n	80087a8 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008782:	699b      	ldr	r3, [r3, #24]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d00d      	beq.n	80087a4 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800878e:	2b03      	cmp	r3, #3
 8008790:	d108      	bne.n	80087a4 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008798:	699b      	ldr	r3, [r3, #24]
 800879a:	7afa      	ldrb	r2, [r7, #11]
 800879c:	4611      	mov	r1, r2
 800879e:	68f8      	ldr	r0, [r7, #12]
 80087a0:	4798      	blx	r3
 80087a2:	e001      	b.n	80087a8 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80087a4:	2302      	movs	r3, #2
 80087a6:	e000      	b.n	80087aa <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80087a8:	2300      	movs	r3, #0
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	3718      	adds	r7, #24
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}

080087b2 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80087b2:	b580      	push	{r7, lr}
 80087b4:	b086      	sub	sp, #24
 80087b6:	af00      	add	r7, sp, #0
 80087b8:	60f8      	str	r0, [r7, #12]
 80087ba:	460b      	mov	r3, r1
 80087bc:	607a      	str	r2, [r7, #4]
 80087be:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80087c0:	7afb      	ldrb	r3, [r7, #11]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d17f      	bne.n	80088c6 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	3314      	adds	r3, #20
 80087ca:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80087d2:	2b02      	cmp	r3, #2
 80087d4:	d15c      	bne.n	8008890 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	68da      	ldr	r2, [r3, #12]
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	691b      	ldr	r3, [r3, #16]
 80087de:	429a      	cmp	r2, r3
 80087e0:	d915      	bls.n	800880e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	68da      	ldr	r2, [r3, #12]
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	691b      	ldr	r3, [r3, #16]
 80087ea:	1ad2      	subs	r2, r2, r3
 80087ec:	697b      	ldr	r3, [r7, #20]
 80087ee:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	68db      	ldr	r3, [r3, #12]
 80087f4:	b29b      	uxth	r3, r3
 80087f6:	461a      	mov	r2, r3
 80087f8:	6879      	ldr	r1, [r7, #4]
 80087fa:	68f8      	ldr	r0, [r7, #12]
 80087fc:	f000 feba 	bl	8009574 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008800:	2300      	movs	r3, #0
 8008802:	2200      	movs	r2, #0
 8008804:	2100      	movs	r1, #0
 8008806:	68f8      	ldr	r0, [r7, #12]
 8008808:	f001 fb5b 	bl	8009ec2 <USBD_LL_PrepareReceive>
 800880c:	e04e      	b.n	80088ac <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	689b      	ldr	r3, [r3, #8]
 8008812:	697a      	ldr	r2, [r7, #20]
 8008814:	6912      	ldr	r2, [r2, #16]
 8008816:	fbb3 f1f2 	udiv	r1, r3, r2
 800881a:	fb02 f201 	mul.w	r2, r2, r1
 800881e:	1a9b      	subs	r3, r3, r2
 8008820:	2b00      	cmp	r3, #0
 8008822:	d11c      	bne.n	800885e <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008824:	697b      	ldr	r3, [r7, #20]
 8008826:	689a      	ldr	r2, [r3, #8]
 8008828:	697b      	ldr	r3, [r7, #20]
 800882a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800882c:	429a      	cmp	r2, r3
 800882e:	d316      	bcc.n	800885e <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008830:	697b      	ldr	r3, [r7, #20]
 8008832:	689a      	ldr	r2, [r3, #8]
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800883a:	429a      	cmp	r2, r3
 800883c:	d20f      	bcs.n	800885e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800883e:	2200      	movs	r2, #0
 8008840:	2100      	movs	r1, #0
 8008842:	68f8      	ldr	r0, [r7, #12]
 8008844:	f000 fe96 	bl	8009574 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	2200      	movs	r2, #0
 800884c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008850:	2300      	movs	r3, #0
 8008852:	2200      	movs	r2, #0
 8008854:	2100      	movs	r1, #0
 8008856:	68f8      	ldr	r0, [r7, #12]
 8008858:	f001 fb33 	bl	8009ec2 <USBD_LL_PrepareReceive>
 800885c:	e026      	b.n	80088ac <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008864:	68db      	ldr	r3, [r3, #12]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d00a      	beq.n	8008880 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008870:	2b03      	cmp	r3, #3
 8008872:	d105      	bne.n	8008880 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800887a:	68db      	ldr	r3, [r3, #12]
 800887c:	68f8      	ldr	r0, [r7, #12]
 800887e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008880:	2180      	movs	r1, #128	; 0x80
 8008882:	68f8      	ldr	r0, [r7, #12]
 8008884:	f001 fa77 	bl	8009d76 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008888:	68f8      	ldr	r0, [r7, #12]
 800888a:	f000 feaa 	bl	80095e2 <USBD_CtlReceiveStatus>
 800888e:	e00d      	b.n	80088ac <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008896:	2b04      	cmp	r3, #4
 8008898:	d004      	beq.n	80088a4 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d103      	bne.n	80088ac <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80088a4:	2180      	movs	r1, #128	; 0x80
 80088a6:	68f8      	ldr	r0, [r7, #12]
 80088a8:	f001 fa65 	bl	8009d76 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80088b2:	2b01      	cmp	r3, #1
 80088b4:	d11d      	bne.n	80088f2 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80088b6:	68f8      	ldr	r0, [r7, #12]
 80088b8:	f7ff fe82 	bl	80085c0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	2200      	movs	r2, #0
 80088c0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80088c4:	e015      	b.n	80088f2 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088cc:	695b      	ldr	r3, [r3, #20]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d00d      	beq.n	80088ee <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80088d8:	2b03      	cmp	r3, #3
 80088da:	d108      	bne.n	80088ee <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088e2:	695b      	ldr	r3, [r3, #20]
 80088e4:	7afa      	ldrb	r2, [r7, #11]
 80088e6:	4611      	mov	r1, r2
 80088e8:	68f8      	ldr	r0, [r7, #12]
 80088ea:	4798      	blx	r3
 80088ec:	e001      	b.n	80088f2 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80088ee:	2302      	movs	r3, #2
 80088f0:	e000      	b.n	80088f4 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80088f2:	2300      	movs	r3, #0
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	3718      	adds	r7, #24
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}

080088fc <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b082      	sub	sp, #8
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008904:	2340      	movs	r3, #64	; 0x40
 8008906:	2200      	movs	r2, #0
 8008908:	2100      	movs	r1, #0
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f001 f9cf 	bl	8009cae <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2201      	movs	r2, #1
 8008914:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2240      	movs	r2, #64	; 0x40
 800891c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008920:	2340      	movs	r3, #64	; 0x40
 8008922:	2200      	movs	r2, #0
 8008924:	2180      	movs	r1, #128	; 0x80
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f001 f9c1 	bl	8009cae <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2201      	movs	r2, #1
 8008930:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2240      	movs	r2, #64	; 0x40
 8008936:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2201      	movs	r2, #1
 800893c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2200      	movs	r2, #0
 8008944:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2200      	movs	r2, #0
 800894c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2200      	movs	r2, #0
 8008952:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800895c:	2b00      	cmp	r3, #0
 800895e:	d009      	beq.n	8008974 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008966:	685b      	ldr	r3, [r3, #4]
 8008968:	687a      	ldr	r2, [r7, #4]
 800896a:	6852      	ldr	r2, [r2, #4]
 800896c:	b2d2      	uxtb	r2, r2
 800896e:	4611      	mov	r1, r2
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	4798      	blx	r3
  }

  return USBD_OK;
 8008974:	2300      	movs	r3, #0
}
 8008976:	4618      	mov	r0, r3
 8008978:	3708      	adds	r7, #8
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}

0800897e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800897e:	b480      	push	{r7}
 8008980:	b083      	sub	sp, #12
 8008982:	af00      	add	r7, sp, #0
 8008984:	6078      	str	r0, [r7, #4]
 8008986:	460b      	mov	r3, r1
 8008988:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	78fa      	ldrb	r2, [r7, #3]
 800898e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008990:	2300      	movs	r3, #0
}
 8008992:	4618      	mov	r0, r3
 8008994:	370c      	adds	r7, #12
 8008996:	46bd      	mov	sp, r7
 8008998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899c:	4770      	bx	lr

0800899e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800899e:	b480      	push	{r7}
 80089a0:	b083      	sub	sp, #12
 80089a2:	af00      	add	r7, sp, #0
 80089a4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2204      	movs	r2, #4
 80089b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80089ba:	2300      	movs	r3, #0
}
 80089bc:	4618      	mov	r0, r3
 80089be:	370c      	adds	r7, #12
 80089c0:	46bd      	mov	sp, r7
 80089c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c6:	4770      	bx	lr

080089c8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80089c8:	b480      	push	{r7}
 80089ca:	b083      	sub	sp, #12
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089d6:	2b04      	cmp	r3, #4
 80089d8:	d105      	bne.n	80089e6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80089e6:	2300      	movs	r3, #0
}
 80089e8:	4618      	mov	r0, r3
 80089ea:	370c      	adds	r7, #12
 80089ec:	46bd      	mov	sp, r7
 80089ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f2:	4770      	bx	lr

080089f4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b082      	sub	sp, #8
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a02:	2b03      	cmp	r3, #3
 8008a04:	d10b      	bne.n	8008a1e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a0c:	69db      	ldr	r3, [r3, #28]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d005      	beq.n	8008a1e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a18:	69db      	ldr	r3, [r3, #28]
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008a1e:	2300      	movs	r3, #0
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	3708      	adds	r7, #8
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}

08008a28 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b084      	sub	sp, #16
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
 8008a30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a32:	2300      	movs	r3, #0
 8008a34:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	781b      	ldrb	r3, [r3, #0]
 8008a3a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a3e:	2b20      	cmp	r3, #32
 8008a40:	d004      	beq.n	8008a4c <USBD_StdDevReq+0x24>
 8008a42:	2b40      	cmp	r3, #64	; 0x40
 8008a44:	d002      	beq.n	8008a4c <USBD_StdDevReq+0x24>
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d008      	beq.n	8008a5c <USBD_StdDevReq+0x34>
 8008a4a:	e04c      	b.n	8008ae6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a52:	689b      	ldr	r3, [r3, #8]
 8008a54:	6839      	ldr	r1, [r7, #0]
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	4798      	blx	r3
      break;
 8008a5a:	e049      	b.n	8008af0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	785b      	ldrb	r3, [r3, #1]
 8008a60:	2b09      	cmp	r3, #9
 8008a62:	d83a      	bhi.n	8008ada <USBD_StdDevReq+0xb2>
 8008a64:	a201      	add	r2, pc, #4	; (adr r2, 8008a6c <USBD_StdDevReq+0x44>)
 8008a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a6a:	bf00      	nop
 8008a6c:	08008abd 	.word	0x08008abd
 8008a70:	08008ad1 	.word	0x08008ad1
 8008a74:	08008adb 	.word	0x08008adb
 8008a78:	08008ac7 	.word	0x08008ac7
 8008a7c:	08008adb 	.word	0x08008adb
 8008a80:	08008a9f 	.word	0x08008a9f
 8008a84:	08008a95 	.word	0x08008a95
 8008a88:	08008adb 	.word	0x08008adb
 8008a8c:	08008ab3 	.word	0x08008ab3
 8008a90:	08008aa9 	.word	0x08008aa9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008a94:	6839      	ldr	r1, [r7, #0]
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f000 f9d4 	bl	8008e44 <USBD_GetDescriptor>
          break;
 8008a9c:	e022      	b.n	8008ae4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008a9e:	6839      	ldr	r1, [r7, #0]
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f000 fb37 	bl	8009114 <USBD_SetAddress>
          break;
 8008aa6:	e01d      	b.n	8008ae4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008aa8:	6839      	ldr	r1, [r7, #0]
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f000 fb74 	bl	8009198 <USBD_SetConfig>
          break;
 8008ab0:	e018      	b.n	8008ae4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008ab2:	6839      	ldr	r1, [r7, #0]
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f000 fbfd 	bl	80092b4 <USBD_GetConfig>
          break;
 8008aba:	e013      	b.n	8008ae4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008abc:	6839      	ldr	r1, [r7, #0]
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f000 fc2c 	bl	800931c <USBD_GetStatus>
          break;
 8008ac4:	e00e      	b.n	8008ae4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008ac6:	6839      	ldr	r1, [r7, #0]
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	f000 fc5a 	bl	8009382 <USBD_SetFeature>
          break;
 8008ace:	e009      	b.n	8008ae4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008ad0:	6839      	ldr	r1, [r7, #0]
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f000 fc69 	bl	80093aa <USBD_ClrFeature>
          break;
 8008ad8:	e004      	b.n	8008ae4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008ada:	6839      	ldr	r1, [r7, #0]
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f000 fcc2 	bl	8009466 <USBD_CtlError>
          break;
 8008ae2:	bf00      	nop
      }
      break;
 8008ae4:	e004      	b.n	8008af0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008ae6:	6839      	ldr	r1, [r7, #0]
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f000 fcbc 	bl	8009466 <USBD_CtlError>
      break;
 8008aee:	bf00      	nop
  }

  return ret;
 8008af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	3710      	adds	r7, #16
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}
 8008afa:	bf00      	nop

08008afc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b084      	sub	sp, #16
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
 8008b04:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b06:	2300      	movs	r3, #0
 8008b08:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	781b      	ldrb	r3, [r3, #0]
 8008b0e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008b12:	2b20      	cmp	r3, #32
 8008b14:	d003      	beq.n	8008b1e <USBD_StdItfReq+0x22>
 8008b16:	2b40      	cmp	r3, #64	; 0x40
 8008b18:	d001      	beq.n	8008b1e <USBD_StdItfReq+0x22>
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d12a      	bne.n	8008b74 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b24:	3b01      	subs	r3, #1
 8008b26:	2b02      	cmp	r3, #2
 8008b28:	d81d      	bhi.n	8008b66 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	889b      	ldrh	r3, [r3, #4]
 8008b2e:	b2db      	uxtb	r3, r3
 8008b30:	2b01      	cmp	r3, #1
 8008b32:	d813      	bhi.n	8008b5c <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b3a:	689b      	ldr	r3, [r3, #8]
 8008b3c:	6839      	ldr	r1, [r7, #0]
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	4798      	blx	r3
 8008b42:	4603      	mov	r3, r0
 8008b44:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	88db      	ldrh	r3, [r3, #6]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d110      	bne.n	8008b70 <USBD_StdItfReq+0x74>
 8008b4e:	7bfb      	ldrb	r3, [r7, #15]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d10d      	bne.n	8008b70 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f000 fd31 	bl	80095bc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008b5a:	e009      	b.n	8008b70 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8008b5c:	6839      	ldr	r1, [r7, #0]
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f000 fc81 	bl	8009466 <USBD_CtlError>
          break;
 8008b64:	e004      	b.n	8008b70 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8008b66:	6839      	ldr	r1, [r7, #0]
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f000 fc7c 	bl	8009466 <USBD_CtlError>
          break;
 8008b6e:	e000      	b.n	8008b72 <USBD_StdItfReq+0x76>
          break;
 8008b70:	bf00      	nop
      }
      break;
 8008b72:	e004      	b.n	8008b7e <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8008b74:	6839      	ldr	r1, [r7, #0]
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f000 fc75 	bl	8009466 <USBD_CtlError>
      break;
 8008b7c:	bf00      	nop
  }

  return USBD_OK;
 8008b7e:	2300      	movs	r3, #0
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3710      	adds	r7, #16
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}

08008b88 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b084      	sub	sp, #16
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
 8008b90:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008b92:	2300      	movs	r3, #0
 8008b94:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	889b      	ldrh	r3, [r3, #4]
 8008b9a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	781b      	ldrb	r3, [r3, #0]
 8008ba0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008ba4:	2b20      	cmp	r3, #32
 8008ba6:	d004      	beq.n	8008bb2 <USBD_StdEPReq+0x2a>
 8008ba8:	2b40      	cmp	r3, #64	; 0x40
 8008baa:	d002      	beq.n	8008bb2 <USBD_StdEPReq+0x2a>
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d008      	beq.n	8008bc2 <USBD_StdEPReq+0x3a>
 8008bb0:	e13d      	b.n	8008e2e <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bb8:	689b      	ldr	r3, [r3, #8]
 8008bba:	6839      	ldr	r1, [r7, #0]
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	4798      	blx	r3
      break;
 8008bc0:	e13a      	b.n	8008e38 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	781b      	ldrb	r3, [r3, #0]
 8008bc6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008bca:	2b20      	cmp	r3, #32
 8008bcc:	d10a      	bne.n	8008be4 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bd4:	689b      	ldr	r3, [r3, #8]
 8008bd6:	6839      	ldr	r1, [r7, #0]
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	4798      	blx	r3
 8008bdc:	4603      	mov	r3, r0
 8008bde:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008be0:	7bfb      	ldrb	r3, [r7, #15]
 8008be2:	e12a      	b.n	8008e3a <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	785b      	ldrb	r3, [r3, #1]
 8008be8:	2b01      	cmp	r3, #1
 8008bea:	d03e      	beq.n	8008c6a <USBD_StdEPReq+0xe2>
 8008bec:	2b03      	cmp	r3, #3
 8008bee:	d002      	beq.n	8008bf6 <USBD_StdEPReq+0x6e>
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d070      	beq.n	8008cd6 <USBD_StdEPReq+0x14e>
 8008bf4:	e115      	b.n	8008e22 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bfc:	2b02      	cmp	r3, #2
 8008bfe:	d002      	beq.n	8008c06 <USBD_StdEPReq+0x7e>
 8008c00:	2b03      	cmp	r3, #3
 8008c02:	d015      	beq.n	8008c30 <USBD_StdEPReq+0xa8>
 8008c04:	e02b      	b.n	8008c5e <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c06:	7bbb      	ldrb	r3, [r7, #14]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d00c      	beq.n	8008c26 <USBD_StdEPReq+0x9e>
 8008c0c:	7bbb      	ldrb	r3, [r7, #14]
 8008c0e:	2b80      	cmp	r3, #128	; 0x80
 8008c10:	d009      	beq.n	8008c26 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008c12:	7bbb      	ldrb	r3, [r7, #14]
 8008c14:	4619      	mov	r1, r3
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f001 f8ad 	bl	8009d76 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008c1c:	2180      	movs	r1, #128	; 0x80
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f001 f8a9 	bl	8009d76 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008c24:	e020      	b.n	8008c68 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8008c26:	6839      	ldr	r1, [r7, #0]
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f000 fc1c 	bl	8009466 <USBD_CtlError>
              break;
 8008c2e:	e01b      	b.n	8008c68 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	885b      	ldrh	r3, [r3, #2]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d10e      	bne.n	8008c56 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8008c38:	7bbb      	ldrb	r3, [r7, #14]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d00b      	beq.n	8008c56 <USBD_StdEPReq+0xce>
 8008c3e:	7bbb      	ldrb	r3, [r7, #14]
 8008c40:	2b80      	cmp	r3, #128	; 0x80
 8008c42:	d008      	beq.n	8008c56 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	88db      	ldrh	r3, [r3, #6]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d104      	bne.n	8008c56 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008c4c:	7bbb      	ldrb	r3, [r7, #14]
 8008c4e:	4619      	mov	r1, r3
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f001 f890 	bl	8009d76 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f000 fcb0 	bl	80095bc <USBD_CtlSendStatus>

              break;
 8008c5c:	e004      	b.n	8008c68 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8008c5e:	6839      	ldr	r1, [r7, #0]
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f000 fc00 	bl	8009466 <USBD_CtlError>
              break;
 8008c66:	bf00      	nop
          }
          break;
 8008c68:	e0e0      	b.n	8008e2c <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c70:	2b02      	cmp	r3, #2
 8008c72:	d002      	beq.n	8008c7a <USBD_StdEPReq+0xf2>
 8008c74:	2b03      	cmp	r3, #3
 8008c76:	d015      	beq.n	8008ca4 <USBD_StdEPReq+0x11c>
 8008c78:	e026      	b.n	8008cc8 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c7a:	7bbb      	ldrb	r3, [r7, #14]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d00c      	beq.n	8008c9a <USBD_StdEPReq+0x112>
 8008c80:	7bbb      	ldrb	r3, [r7, #14]
 8008c82:	2b80      	cmp	r3, #128	; 0x80
 8008c84:	d009      	beq.n	8008c9a <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008c86:	7bbb      	ldrb	r3, [r7, #14]
 8008c88:	4619      	mov	r1, r3
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f001 f873 	bl	8009d76 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008c90:	2180      	movs	r1, #128	; 0x80
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f001 f86f 	bl	8009d76 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008c98:	e01c      	b.n	8008cd4 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8008c9a:	6839      	ldr	r1, [r7, #0]
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f000 fbe2 	bl	8009466 <USBD_CtlError>
              break;
 8008ca2:	e017      	b.n	8008cd4 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	885b      	ldrh	r3, [r3, #2]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d112      	bne.n	8008cd2 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008cac:	7bbb      	ldrb	r3, [r7, #14]
 8008cae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d004      	beq.n	8008cc0 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008cb6:	7bbb      	ldrb	r3, [r7, #14]
 8008cb8:	4619      	mov	r1, r3
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f001 f87a 	bl	8009db4 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f000 fc7b 	bl	80095bc <USBD_CtlSendStatus>
              }
              break;
 8008cc6:	e004      	b.n	8008cd2 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8008cc8:	6839      	ldr	r1, [r7, #0]
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f000 fbcb 	bl	8009466 <USBD_CtlError>
              break;
 8008cd0:	e000      	b.n	8008cd4 <USBD_StdEPReq+0x14c>
              break;
 8008cd2:	bf00      	nop
          }
          break;
 8008cd4:	e0aa      	b.n	8008e2c <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cdc:	2b02      	cmp	r3, #2
 8008cde:	d002      	beq.n	8008ce6 <USBD_StdEPReq+0x15e>
 8008ce0:	2b03      	cmp	r3, #3
 8008ce2:	d032      	beq.n	8008d4a <USBD_StdEPReq+0x1c2>
 8008ce4:	e097      	b.n	8008e16 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008ce6:	7bbb      	ldrb	r3, [r7, #14]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d007      	beq.n	8008cfc <USBD_StdEPReq+0x174>
 8008cec:	7bbb      	ldrb	r3, [r7, #14]
 8008cee:	2b80      	cmp	r3, #128	; 0x80
 8008cf0:	d004      	beq.n	8008cfc <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8008cf2:	6839      	ldr	r1, [r7, #0]
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f000 fbb6 	bl	8009466 <USBD_CtlError>
                break;
 8008cfa:	e091      	b.n	8008e20 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008cfc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	da0b      	bge.n	8008d1c <USBD_StdEPReq+0x194>
 8008d04:	7bbb      	ldrb	r3, [r7, #14]
 8008d06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008d0a:	4613      	mov	r3, r2
 8008d0c:	009b      	lsls	r3, r3, #2
 8008d0e:	4413      	add	r3, r2
 8008d10:	009b      	lsls	r3, r3, #2
 8008d12:	3310      	adds	r3, #16
 8008d14:	687a      	ldr	r2, [r7, #4]
 8008d16:	4413      	add	r3, r2
 8008d18:	3304      	adds	r3, #4
 8008d1a:	e00b      	b.n	8008d34 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008d1c:	7bbb      	ldrb	r3, [r7, #14]
 8008d1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d22:	4613      	mov	r3, r2
 8008d24:	009b      	lsls	r3, r3, #2
 8008d26:	4413      	add	r3, r2
 8008d28:	009b      	lsls	r3, r3, #2
 8008d2a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008d2e:	687a      	ldr	r2, [r7, #4]
 8008d30:	4413      	add	r3, r2
 8008d32:	3304      	adds	r3, #4
 8008d34:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	2200      	movs	r2, #0
 8008d3a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	2202      	movs	r2, #2
 8008d40:	4619      	mov	r1, r3
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f000 fbfa 	bl	800953c <USBD_CtlSendData>
              break;
 8008d48:	e06a      	b.n	8008e20 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008d4a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	da11      	bge.n	8008d76 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008d52:	7bbb      	ldrb	r3, [r7, #14]
 8008d54:	f003 020f 	and.w	r2, r3, #15
 8008d58:	6879      	ldr	r1, [r7, #4]
 8008d5a:	4613      	mov	r3, r2
 8008d5c:	009b      	lsls	r3, r3, #2
 8008d5e:	4413      	add	r3, r2
 8008d60:	009b      	lsls	r3, r3, #2
 8008d62:	440b      	add	r3, r1
 8008d64:	3318      	adds	r3, #24
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d117      	bne.n	8008d9c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8008d6c:	6839      	ldr	r1, [r7, #0]
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f000 fb79 	bl	8009466 <USBD_CtlError>
                  break;
 8008d74:	e054      	b.n	8008e20 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008d76:	7bbb      	ldrb	r3, [r7, #14]
 8008d78:	f003 020f 	and.w	r2, r3, #15
 8008d7c:	6879      	ldr	r1, [r7, #4]
 8008d7e:	4613      	mov	r3, r2
 8008d80:	009b      	lsls	r3, r3, #2
 8008d82:	4413      	add	r3, r2
 8008d84:	009b      	lsls	r3, r3, #2
 8008d86:	440b      	add	r3, r1
 8008d88:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d104      	bne.n	8008d9c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8008d92:	6839      	ldr	r1, [r7, #0]
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f000 fb66 	bl	8009466 <USBD_CtlError>
                  break;
 8008d9a:	e041      	b.n	8008e20 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	da0b      	bge.n	8008dbc <USBD_StdEPReq+0x234>
 8008da4:	7bbb      	ldrb	r3, [r7, #14]
 8008da6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008daa:	4613      	mov	r3, r2
 8008dac:	009b      	lsls	r3, r3, #2
 8008dae:	4413      	add	r3, r2
 8008db0:	009b      	lsls	r3, r3, #2
 8008db2:	3310      	adds	r3, #16
 8008db4:	687a      	ldr	r2, [r7, #4]
 8008db6:	4413      	add	r3, r2
 8008db8:	3304      	adds	r3, #4
 8008dba:	e00b      	b.n	8008dd4 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008dbc:	7bbb      	ldrb	r3, [r7, #14]
 8008dbe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008dc2:	4613      	mov	r3, r2
 8008dc4:	009b      	lsls	r3, r3, #2
 8008dc6:	4413      	add	r3, r2
 8008dc8:	009b      	lsls	r3, r3, #2
 8008dca:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008dce:	687a      	ldr	r2, [r7, #4]
 8008dd0:	4413      	add	r3, r2
 8008dd2:	3304      	adds	r3, #4
 8008dd4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008dd6:	7bbb      	ldrb	r3, [r7, #14]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d002      	beq.n	8008de2 <USBD_StdEPReq+0x25a>
 8008ddc:	7bbb      	ldrb	r3, [r7, #14]
 8008dde:	2b80      	cmp	r3, #128	; 0x80
 8008de0:	d103      	bne.n	8008dea <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	2200      	movs	r2, #0
 8008de6:	601a      	str	r2, [r3, #0]
 8008de8:	e00e      	b.n	8008e08 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008dea:	7bbb      	ldrb	r3, [r7, #14]
 8008dec:	4619      	mov	r1, r3
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f000 ffff 	bl	8009df2 <USBD_LL_IsStallEP>
 8008df4:	4603      	mov	r3, r0
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d003      	beq.n	8008e02 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	2201      	movs	r2, #1
 8008dfe:	601a      	str	r2, [r3, #0]
 8008e00:	e002      	b.n	8008e08 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	2200      	movs	r2, #0
 8008e06:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	2202      	movs	r2, #2
 8008e0c:	4619      	mov	r1, r3
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f000 fb94 	bl	800953c <USBD_CtlSendData>
              break;
 8008e14:	e004      	b.n	8008e20 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8008e16:	6839      	ldr	r1, [r7, #0]
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f000 fb24 	bl	8009466 <USBD_CtlError>
              break;
 8008e1e:	bf00      	nop
          }
          break;
 8008e20:	e004      	b.n	8008e2c <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8008e22:	6839      	ldr	r1, [r7, #0]
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f000 fb1e 	bl	8009466 <USBD_CtlError>
          break;
 8008e2a:	bf00      	nop
      }
      break;
 8008e2c:	e004      	b.n	8008e38 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8008e2e:	6839      	ldr	r1, [r7, #0]
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	f000 fb18 	bl	8009466 <USBD_CtlError>
      break;
 8008e36:	bf00      	nop
  }

  return ret;
 8008e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	3710      	adds	r7, #16
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}
	...

08008e44 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b084      	sub	sp, #16
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
 8008e4c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008e52:	2300      	movs	r3, #0
 8008e54:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008e56:	2300      	movs	r3, #0
 8008e58:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	885b      	ldrh	r3, [r3, #2]
 8008e5e:	0a1b      	lsrs	r3, r3, #8
 8008e60:	b29b      	uxth	r3, r3
 8008e62:	3b01      	subs	r3, #1
 8008e64:	2b06      	cmp	r3, #6
 8008e66:	f200 8128 	bhi.w	80090ba <USBD_GetDescriptor+0x276>
 8008e6a:	a201      	add	r2, pc, #4	; (adr r2, 8008e70 <USBD_GetDescriptor+0x2c>)
 8008e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e70:	08008e8d 	.word	0x08008e8d
 8008e74:	08008ea5 	.word	0x08008ea5
 8008e78:	08008ee5 	.word	0x08008ee5
 8008e7c:	080090bb 	.word	0x080090bb
 8008e80:	080090bb 	.word	0x080090bb
 8008e84:	0800905b 	.word	0x0800905b
 8008e88:	08009087 	.word	0x08009087
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	687a      	ldr	r2, [r7, #4]
 8008e96:	7c12      	ldrb	r2, [r2, #16]
 8008e98:	f107 0108 	add.w	r1, r7, #8
 8008e9c:	4610      	mov	r0, r2
 8008e9e:	4798      	blx	r3
 8008ea0:	60f8      	str	r0, [r7, #12]
      break;
 8008ea2:	e112      	b.n	80090ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	7c1b      	ldrb	r3, [r3, #16]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d10d      	bne.n	8008ec8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eb4:	f107 0208 	add.w	r2, r7, #8
 8008eb8:	4610      	mov	r0, r2
 8008eba:	4798      	blx	r3
 8008ebc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	3301      	adds	r3, #1
 8008ec2:	2202      	movs	r2, #2
 8008ec4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008ec6:	e100      	b.n	80090ca <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ed0:	f107 0208 	add.w	r2, r7, #8
 8008ed4:	4610      	mov	r0, r2
 8008ed6:	4798      	blx	r3
 8008ed8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	3301      	adds	r3, #1
 8008ede:	2202      	movs	r2, #2
 8008ee0:	701a      	strb	r2, [r3, #0]
      break;
 8008ee2:	e0f2      	b.n	80090ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	885b      	ldrh	r3, [r3, #2]
 8008ee8:	b2db      	uxtb	r3, r3
 8008eea:	2b05      	cmp	r3, #5
 8008eec:	f200 80ac 	bhi.w	8009048 <USBD_GetDescriptor+0x204>
 8008ef0:	a201      	add	r2, pc, #4	; (adr r2, 8008ef8 <USBD_GetDescriptor+0xb4>)
 8008ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ef6:	bf00      	nop
 8008ef8:	08008f11 	.word	0x08008f11
 8008efc:	08008f45 	.word	0x08008f45
 8008f00:	08008f79 	.word	0x08008f79
 8008f04:	08008fad 	.word	0x08008fad
 8008f08:	08008fe1 	.word	0x08008fe1
 8008f0c:	08009015 	.word	0x08009015
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f16:	685b      	ldr	r3, [r3, #4]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d00b      	beq.n	8008f34 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f22:	685b      	ldr	r3, [r3, #4]
 8008f24:	687a      	ldr	r2, [r7, #4]
 8008f26:	7c12      	ldrb	r2, [r2, #16]
 8008f28:	f107 0108 	add.w	r1, r7, #8
 8008f2c:	4610      	mov	r0, r2
 8008f2e:	4798      	blx	r3
 8008f30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f32:	e091      	b.n	8009058 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f34:	6839      	ldr	r1, [r7, #0]
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f000 fa95 	bl	8009466 <USBD_CtlError>
            err++;
 8008f3c:	7afb      	ldrb	r3, [r7, #11]
 8008f3e:	3301      	adds	r3, #1
 8008f40:	72fb      	strb	r3, [r7, #11]
          break;
 8008f42:	e089      	b.n	8009058 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f4a:	689b      	ldr	r3, [r3, #8]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d00b      	beq.n	8008f68 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f56:	689b      	ldr	r3, [r3, #8]
 8008f58:	687a      	ldr	r2, [r7, #4]
 8008f5a:	7c12      	ldrb	r2, [r2, #16]
 8008f5c:	f107 0108 	add.w	r1, r7, #8
 8008f60:	4610      	mov	r0, r2
 8008f62:	4798      	blx	r3
 8008f64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f66:	e077      	b.n	8009058 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f68:	6839      	ldr	r1, [r7, #0]
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f000 fa7b 	bl	8009466 <USBD_CtlError>
            err++;
 8008f70:	7afb      	ldrb	r3, [r7, #11]
 8008f72:	3301      	adds	r3, #1
 8008f74:	72fb      	strb	r3, [r7, #11]
          break;
 8008f76:	e06f      	b.n	8009058 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f7e:	68db      	ldr	r3, [r3, #12]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d00b      	beq.n	8008f9c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f8a:	68db      	ldr	r3, [r3, #12]
 8008f8c:	687a      	ldr	r2, [r7, #4]
 8008f8e:	7c12      	ldrb	r2, [r2, #16]
 8008f90:	f107 0108 	add.w	r1, r7, #8
 8008f94:	4610      	mov	r0, r2
 8008f96:	4798      	blx	r3
 8008f98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f9a:	e05d      	b.n	8009058 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f9c:	6839      	ldr	r1, [r7, #0]
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f000 fa61 	bl	8009466 <USBD_CtlError>
            err++;
 8008fa4:	7afb      	ldrb	r3, [r7, #11]
 8008fa6:	3301      	adds	r3, #1
 8008fa8:	72fb      	strb	r3, [r7, #11]
          break;
 8008faa:	e055      	b.n	8009058 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008fb2:	691b      	ldr	r3, [r3, #16]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d00b      	beq.n	8008fd0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008fbe:	691b      	ldr	r3, [r3, #16]
 8008fc0:	687a      	ldr	r2, [r7, #4]
 8008fc2:	7c12      	ldrb	r2, [r2, #16]
 8008fc4:	f107 0108 	add.w	r1, r7, #8
 8008fc8:	4610      	mov	r0, r2
 8008fca:	4798      	blx	r3
 8008fcc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008fce:	e043      	b.n	8009058 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008fd0:	6839      	ldr	r1, [r7, #0]
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f000 fa47 	bl	8009466 <USBD_CtlError>
            err++;
 8008fd8:	7afb      	ldrb	r3, [r7, #11]
 8008fda:	3301      	adds	r3, #1
 8008fdc:	72fb      	strb	r3, [r7, #11]
          break;
 8008fde:	e03b      	b.n	8009058 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008fe6:	695b      	ldr	r3, [r3, #20]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d00b      	beq.n	8009004 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008ff2:	695b      	ldr	r3, [r3, #20]
 8008ff4:	687a      	ldr	r2, [r7, #4]
 8008ff6:	7c12      	ldrb	r2, [r2, #16]
 8008ff8:	f107 0108 	add.w	r1, r7, #8
 8008ffc:	4610      	mov	r0, r2
 8008ffe:	4798      	blx	r3
 8009000:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009002:	e029      	b.n	8009058 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009004:	6839      	ldr	r1, [r7, #0]
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f000 fa2d 	bl	8009466 <USBD_CtlError>
            err++;
 800900c:	7afb      	ldrb	r3, [r7, #11]
 800900e:	3301      	adds	r3, #1
 8009010:	72fb      	strb	r3, [r7, #11]
          break;
 8009012:	e021      	b.n	8009058 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800901a:	699b      	ldr	r3, [r3, #24]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d00b      	beq.n	8009038 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009026:	699b      	ldr	r3, [r3, #24]
 8009028:	687a      	ldr	r2, [r7, #4]
 800902a:	7c12      	ldrb	r2, [r2, #16]
 800902c:	f107 0108 	add.w	r1, r7, #8
 8009030:	4610      	mov	r0, r2
 8009032:	4798      	blx	r3
 8009034:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009036:	e00f      	b.n	8009058 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009038:	6839      	ldr	r1, [r7, #0]
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f000 fa13 	bl	8009466 <USBD_CtlError>
            err++;
 8009040:	7afb      	ldrb	r3, [r7, #11]
 8009042:	3301      	adds	r3, #1
 8009044:	72fb      	strb	r3, [r7, #11]
          break;
 8009046:	e007      	b.n	8009058 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009048:	6839      	ldr	r1, [r7, #0]
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f000 fa0b 	bl	8009466 <USBD_CtlError>
          err++;
 8009050:	7afb      	ldrb	r3, [r7, #11]
 8009052:	3301      	adds	r3, #1
 8009054:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009056:	e038      	b.n	80090ca <USBD_GetDescriptor+0x286>
 8009058:	e037      	b.n	80090ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	7c1b      	ldrb	r3, [r3, #16]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d109      	bne.n	8009076 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800906a:	f107 0208 	add.w	r2, r7, #8
 800906e:	4610      	mov	r0, r2
 8009070:	4798      	blx	r3
 8009072:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009074:	e029      	b.n	80090ca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009076:	6839      	ldr	r1, [r7, #0]
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f000 f9f4 	bl	8009466 <USBD_CtlError>
        err++;
 800907e:	7afb      	ldrb	r3, [r7, #11]
 8009080:	3301      	adds	r3, #1
 8009082:	72fb      	strb	r3, [r7, #11]
      break;
 8009084:	e021      	b.n	80090ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	7c1b      	ldrb	r3, [r3, #16]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d10d      	bne.n	80090aa <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009096:	f107 0208 	add.w	r2, r7, #8
 800909a:	4610      	mov	r0, r2
 800909c:	4798      	blx	r3
 800909e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	3301      	adds	r3, #1
 80090a4:	2207      	movs	r2, #7
 80090a6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80090a8:	e00f      	b.n	80090ca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80090aa:	6839      	ldr	r1, [r7, #0]
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f000 f9da 	bl	8009466 <USBD_CtlError>
        err++;
 80090b2:	7afb      	ldrb	r3, [r7, #11]
 80090b4:	3301      	adds	r3, #1
 80090b6:	72fb      	strb	r3, [r7, #11]
      break;
 80090b8:	e007      	b.n	80090ca <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80090ba:	6839      	ldr	r1, [r7, #0]
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f000 f9d2 	bl	8009466 <USBD_CtlError>
      err++;
 80090c2:	7afb      	ldrb	r3, [r7, #11]
 80090c4:	3301      	adds	r3, #1
 80090c6:	72fb      	strb	r3, [r7, #11]
      break;
 80090c8:	bf00      	nop
  }

  if (err != 0U)
 80090ca:	7afb      	ldrb	r3, [r7, #11]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d11c      	bne.n	800910a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80090d0:	893b      	ldrh	r3, [r7, #8]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d011      	beq.n	80090fa <USBD_GetDescriptor+0x2b6>
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	88db      	ldrh	r3, [r3, #6]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d00d      	beq.n	80090fa <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	88da      	ldrh	r2, [r3, #6]
 80090e2:	893b      	ldrh	r3, [r7, #8]
 80090e4:	4293      	cmp	r3, r2
 80090e6:	bf28      	it	cs
 80090e8:	4613      	movcs	r3, r2
 80090ea:	b29b      	uxth	r3, r3
 80090ec:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80090ee:	893b      	ldrh	r3, [r7, #8]
 80090f0:	461a      	mov	r2, r3
 80090f2:	68f9      	ldr	r1, [r7, #12]
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f000 fa21 	bl	800953c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	88db      	ldrh	r3, [r3, #6]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d104      	bne.n	800910c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f000 fa5a 	bl	80095bc <USBD_CtlSendStatus>
 8009108:	e000      	b.n	800910c <USBD_GetDescriptor+0x2c8>
    return;
 800910a:	bf00      	nop
    }
  }
}
 800910c:	3710      	adds	r7, #16
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}
 8009112:	bf00      	nop

08009114 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b084      	sub	sp, #16
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
 800911c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	889b      	ldrh	r3, [r3, #4]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d130      	bne.n	8009188 <USBD_SetAddress+0x74>
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	88db      	ldrh	r3, [r3, #6]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d12c      	bne.n	8009188 <USBD_SetAddress+0x74>
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	885b      	ldrh	r3, [r3, #2]
 8009132:	2b7f      	cmp	r3, #127	; 0x7f
 8009134:	d828      	bhi.n	8009188 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	885b      	ldrh	r3, [r3, #2]
 800913a:	b2db      	uxtb	r3, r3
 800913c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009140:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009148:	2b03      	cmp	r3, #3
 800914a:	d104      	bne.n	8009156 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800914c:	6839      	ldr	r1, [r7, #0]
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f000 f989 	bl	8009466 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009154:	e01c      	b.n	8009190 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	7bfa      	ldrb	r2, [r7, #15]
 800915a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800915e:	7bfb      	ldrb	r3, [r7, #15]
 8009160:	4619      	mov	r1, r3
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f000 fe6b 	bl	8009e3e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f000 fa27 	bl	80095bc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800916e:	7bfb      	ldrb	r3, [r7, #15]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d004      	beq.n	800917e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2202      	movs	r2, #2
 8009178:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800917c:	e008      	b.n	8009190 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2201      	movs	r2, #1
 8009182:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009186:	e003      	b.n	8009190 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009188:	6839      	ldr	r1, [r7, #0]
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f000 f96b 	bl	8009466 <USBD_CtlError>
  }
}
 8009190:	bf00      	nop
 8009192:	3710      	adds	r7, #16
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}

08009198 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b082      	sub	sp, #8
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
 80091a0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	885b      	ldrh	r3, [r3, #2]
 80091a6:	b2da      	uxtb	r2, r3
 80091a8:	4b41      	ldr	r3, [pc, #260]	; (80092b0 <USBD_SetConfig+0x118>)
 80091aa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80091ac:	4b40      	ldr	r3, [pc, #256]	; (80092b0 <USBD_SetConfig+0x118>)
 80091ae:	781b      	ldrb	r3, [r3, #0]
 80091b0:	2b01      	cmp	r3, #1
 80091b2:	d904      	bls.n	80091be <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80091b4:	6839      	ldr	r1, [r7, #0]
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f000 f955 	bl	8009466 <USBD_CtlError>
 80091bc:	e075      	b.n	80092aa <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091c4:	2b02      	cmp	r3, #2
 80091c6:	d002      	beq.n	80091ce <USBD_SetConfig+0x36>
 80091c8:	2b03      	cmp	r3, #3
 80091ca:	d023      	beq.n	8009214 <USBD_SetConfig+0x7c>
 80091cc:	e062      	b.n	8009294 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80091ce:	4b38      	ldr	r3, [pc, #224]	; (80092b0 <USBD_SetConfig+0x118>)
 80091d0:	781b      	ldrb	r3, [r3, #0]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d01a      	beq.n	800920c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80091d6:	4b36      	ldr	r3, [pc, #216]	; (80092b0 <USBD_SetConfig+0x118>)
 80091d8:	781b      	ldrb	r3, [r3, #0]
 80091da:	461a      	mov	r2, r3
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2203      	movs	r2, #3
 80091e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80091e8:	4b31      	ldr	r3, [pc, #196]	; (80092b0 <USBD_SetConfig+0x118>)
 80091ea:	781b      	ldrb	r3, [r3, #0]
 80091ec:	4619      	mov	r1, r3
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f7ff f9f1 	bl	80085d6 <USBD_SetClassConfig>
 80091f4:	4603      	mov	r3, r0
 80091f6:	2b02      	cmp	r3, #2
 80091f8:	d104      	bne.n	8009204 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80091fa:	6839      	ldr	r1, [r7, #0]
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f000 f932 	bl	8009466 <USBD_CtlError>
            return;
 8009202:	e052      	b.n	80092aa <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f000 f9d9 	bl	80095bc <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800920a:	e04e      	b.n	80092aa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f000 f9d5 	bl	80095bc <USBD_CtlSendStatus>
        break;
 8009212:	e04a      	b.n	80092aa <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009214:	4b26      	ldr	r3, [pc, #152]	; (80092b0 <USBD_SetConfig+0x118>)
 8009216:	781b      	ldrb	r3, [r3, #0]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d112      	bne.n	8009242 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2202      	movs	r2, #2
 8009220:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8009224:	4b22      	ldr	r3, [pc, #136]	; (80092b0 <USBD_SetConfig+0x118>)
 8009226:	781b      	ldrb	r3, [r3, #0]
 8009228:	461a      	mov	r2, r3
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800922e:	4b20      	ldr	r3, [pc, #128]	; (80092b0 <USBD_SetConfig+0x118>)
 8009230:	781b      	ldrb	r3, [r3, #0]
 8009232:	4619      	mov	r1, r3
 8009234:	6878      	ldr	r0, [r7, #4]
 8009236:	f7ff f9ed 	bl	8008614 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f000 f9be 	bl	80095bc <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009240:	e033      	b.n	80092aa <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009242:	4b1b      	ldr	r3, [pc, #108]	; (80092b0 <USBD_SetConfig+0x118>)
 8009244:	781b      	ldrb	r3, [r3, #0]
 8009246:	461a      	mov	r2, r3
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	685b      	ldr	r3, [r3, #4]
 800924c:	429a      	cmp	r2, r3
 800924e:	d01d      	beq.n	800928c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	685b      	ldr	r3, [r3, #4]
 8009254:	b2db      	uxtb	r3, r3
 8009256:	4619      	mov	r1, r3
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	f7ff f9db 	bl	8008614 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800925e:	4b14      	ldr	r3, [pc, #80]	; (80092b0 <USBD_SetConfig+0x118>)
 8009260:	781b      	ldrb	r3, [r3, #0]
 8009262:	461a      	mov	r2, r3
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009268:	4b11      	ldr	r3, [pc, #68]	; (80092b0 <USBD_SetConfig+0x118>)
 800926a:	781b      	ldrb	r3, [r3, #0]
 800926c:	4619      	mov	r1, r3
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f7ff f9b1 	bl	80085d6 <USBD_SetClassConfig>
 8009274:	4603      	mov	r3, r0
 8009276:	2b02      	cmp	r3, #2
 8009278:	d104      	bne.n	8009284 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800927a:	6839      	ldr	r1, [r7, #0]
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	f000 f8f2 	bl	8009466 <USBD_CtlError>
            return;
 8009282:	e012      	b.n	80092aa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f000 f999 	bl	80095bc <USBD_CtlSendStatus>
        break;
 800928a:	e00e      	b.n	80092aa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f000 f995 	bl	80095bc <USBD_CtlSendStatus>
        break;
 8009292:	e00a      	b.n	80092aa <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009294:	6839      	ldr	r1, [r7, #0]
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f000 f8e5 	bl	8009466 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800929c:	4b04      	ldr	r3, [pc, #16]	; (80092b0 <USBD_SetConfig+0x118>)
 800929e:	781b      	ldrb	r3, [r3, #0]
 80092a0:	4619      	mov	r1, r3
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f7ff f9b6 	bl	8008614 <USBD_ClrClassConfig>
        break;
 80092a8:	bf00      	nop
    }
  }
}
 80092aa:	3708      	adds	r7, #8
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bd80      	pop	{r7, pc}
 80092b0:	20000154 	.word	0x20000154

080092b4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b082      	sub	sp, #8
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
 80092bc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	88db      	ldrh	r3, [r3, #6]
 80092c2:	2b01      	cmp	r3, #1
 80092c4:	d004      	beq.n	80092d0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80092c6:	6839      	ldr	r1, [r7, #0]
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f000 f8cc 	bl	8009466 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80092ce:	e021      	b.n	8009314 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092d6:	2b01      	cmp	r3, #1
 80092d8:	db17      	blt.n	800930a <USBD_GetConfig+0x56>
 80092da:	2b02      	cmp	r3, #2
 80092dc:	dd02      	ble.n	80092e4 <USBD_GetConfig+0x30>
 80092de:	2b03      	cmp	r3, #3
 80092e0:	d00b      	beq.n	80092fa <USBD_GetConfig+0x46>
 80092e2:	e012      	b.n	800930a <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2200      	movs	r2, #0
 80092e8:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	3308      	adds	r3, #8
 80092ee:	2201      	movs	r2, #1
 80092f0:	4619      	mov	r1, r3
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f000 f922 	bl	800953c <USBD_CtlSendData>
        break;
 80092f8:	e00c      	b.n	8009314 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	3304      	adds	r3, #4
 80092fe:	2201      	movs	r2, #1
 8009300:	4619      	mov	r1, r3
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f000 f91a 	bl	800953c <USBD_CtlSendData>
        break;
 8009308:	e004      	b.n	8009314 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800930a:	6839      	ldr	r1, [r7, #0]
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	f000 f8aa 	bl	8009466 <USBD_CtlError>
        break;
 8009312:	bf00      	nop
}
 8009314:	bf00      	nop
 8009316:	3708      	adds	r7, #8
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}

0800931c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b082      	sub	sp, #8
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
 8009324:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800932c:	3b01      	subs	r3, #1
 800932e:	2b02      	cmp	r3, #2
 8009330:	d81e      	bhi.n	8009370 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	88db      	ldrh	r3, [r3, #6]
 8009336:	2b02      	cmp	r3, #2
 8009338:	d004      	beq.n	8009344 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800933a:	6839      	ldr	r1, [r7, #0]
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f000 f892 	bl	8009466 <USBD_CtlError>
        break;
 8009342:	e01a      	b.n	800937a <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2201      	movs	r2, #1
 8009348:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009350:	2b00      	cmp	r3, #0
 8009352:	d005      	beq.n	8009360 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	68db      	ldr	r3, [r3, #12]
 8009358:	f043 0202 	orr.w	r2, r3, #2
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	330c      	adds	r3, #12
 8009364:	2202      	movs	r2, #2
 8009366:	4619      	mov	r1, r3
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f000 f8e7 	bl	800953c <USBD_CtlSendData>
      break;
 800936e:	e004      	b.n	800937a <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009370:	6839      	ldr	r1, [r7, #0]
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f000 f877 	bl	8009466 <USBD_CtlError>
      break;
 8009378:	bf00      	nop
  }
}
 800937a:	bf00      	nop
 800937c:	3708      	adds	r7, #8
 800937e:	46bd      	mov	sp, r7
 8009380:	bd80      	pop	{r7, pc}

08009382 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009382:	b580      	push	{r7, lr}
 8009384:	b082      	sub	sp, #8
 8009386:	af00      	add	r7, sp, #0
 8009388:	6078      	str	r0, [r7, #4]
 800938a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	885b      	ldrh	r3, [r3, #2]
 8009390:	2b01      	cmp	r3, #1
 8009392:	d106      	bne.n	80093a2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2201      	movs	r2, #1
 8009398:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f000 f90d 	bl	80095bc <USBD_CtlSendStatus>
  }
}
 80093a2:	bf00      	nop
 80093a4:	3708      	adds	r7, #8
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}

080093aa <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80093aa:	b580      	push	{r7, lr}
 80093ac:	b082      	sub	sp, #8
 80093ae:	af00      	add	r7, sp, #0
 80093b0:	6078      	str	r0, [r7, #4]
 80093b2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093ba:	3b01      	subs	r3, #1
 80093bc:	2b02      	cmp	r3, #2
 80093be:	d80b      	bhi.n	80093d8 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	885b      	ldrh	r3, [r3, #2]
 80093c4:	2b01      	cmp	r3, #1
 80093c6:	d10c      	bne.n	80093e2 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2200      	movs	r2, #0
 80093cc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f000 f8f3 	bl	80095bc <USBD_CtlSendStatus>
      }
      break;
 80093d6:	e004      	b.n	80093e2 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80093d8:	6839      	ldr	r1, [r7, #0]
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f000 f843 	bl	8009466 <USBD_CtlError>
      break;
 80093e0:	e000      	b.n	80093e4 <USBD_ClrFeature+0x3a>
      break;
 80093e2:	bf00      	nop
  }
}
 80093e4:	bf00      	nop
 80093e6:	3708      	adds	r7, #8
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd80      	pop	{r7, pc}

080093ec <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80093ec:	b480      	push	{r7}
 80093ee:	b083      	sub	sp, #12
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
 80093f4:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	781a      	ldrb	r2, [r3, #0]
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	785a      	ldrb	r2, [r3, #1]
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	3302      	adds	r3, #2
 800940a:	781b      	ldrb	r3, [r3, #0]
 800940c:	b29a      	uxth	r2, r3
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	3303      	adds	r3, #3
 8009412:	781b      	ldrb	r3, [r3, #0]
 8009414:	b29b      	uxth	r3, r3
 8009416:	021b      	lsls	r3, r3, #8
 8009418:	b29b      	uxth	r3, r3
 800941a:	4413      	add	r3, r2
 800941c:	b29a      	uxth	r2, r3
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	3304      	adds	r3, #4
 8009426:	781b      	ldrb	r3, [r3, #0]
 8009428:	b29a      	uxth	r2, r3
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	3305      	adds	r3, #5
 800942e:	781b      	ldrb	r3, [r3, #0]
 8009430:	b29b      	uxth	r3, r3
 8009432:	021b      	lsls	r3, r3, #8
 8009434:	b29b      	uxth	r3, r3
 8009436:	4413      	add	r3, r2
 8009438:	b29a      	uxth	r2, r3
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	3306      	adds	r3, #6
 8009442:	781b      	ldrb	r3, [r3, #0]
 8009444:	b29a      	uxth	r2, r3
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	3307      	adds	r3, #7
 800944a:	781b      	ldrb	r3, [r3, #0]
 800944c:	b29b      	uxth	r3, r3
 800944e:	021b      	lsls	r3, r3, #8
 8009450:	b29b      	uxth	r3, r3
 8009452:	4413      	add	r3, r2
 8009454:	b29a      	uxth	r2, r3
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	80da      	strh	r2, [r3, #6]

}
 800945a:	bf00      	nop
 800945c:	370c      	adds	r7, #12
 800945e:	46bd      	mov	sp, r7
 8009460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009464:	4770      	bx	lr

08009466 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009466:	b580      	push	{r7, lr}
 8009468:	b082      	sub	sp, #8
 800946a:	af00      	add	r7, sp, #0
 800946c:	6078      	str	r0, [r7, #4]
 800946e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009470:	2180      	movs	r1, #128	; 0x80
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f000 fc7f 	bl	8009d76 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009478:	2100      	movs	r1, #0
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	f000 fc7b 	bl	8009d76 <USBD_LL_StallEP>
}
 8009480:	bf00      	nop
 8009482:	3708      	adds	r7, #8
 8009484:	46bd      	mov	sp, r7
 8009486:	bd80      	pop	{r7, pc}

08009488 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b086      	sub	sp, #24
 800948c:	af00      	add	r7, sp, #0
 800948e:	60f8      	str	r0, [r7, #12]
 8009490:	60b9      	str	r1, [r7, #8]
 8009492:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009494:	2300      	movs	r3, #0
 8009496:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d032      	beq.n	8009504 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800949e:	68f8      	ldr	r0, [r7, #12]
 80094a0:	f000 f834 	bl	800950c <USBD_GetLen>
 80094a4:	4603      	mov	r3, r0
 80094a6:	3301      	adds	r3, #1
 80094a8:	b29b      	uxth	r3, r3
 80094aa:	005b      	lsls	r3, r3, #1
 80094ac:	b29a      	uxth	r2, r3
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80094b2:	7dfb      	ldrb	r3, [r7, #23]
 80094b4:	1c5a      	adds	r2, r3, #1
 80094b6:	75fa      	strb	r2, [r7, #23]
 80094b8:	461a      	mov	r2, r3
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	4413      	add	r3, r2
 80094be:	687a      	ldr	r2, [r7, #4]
 80094c0:	7812      	ldrb	r2, [r2, #0]
 80094c2:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80094c4:	7dfb      	ldrb	r3, [r7, #23]
 80094c6:	1c5a      	adds	r2, r3, #1
 80094c8:	75fa      	strb	r2, [r7, #23]
 80094ca:	461a      	mov	r2, r3
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	4413      	add	r3, r2
 80094d0:	2203      	movs	r2, #3
 80094d2:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80094d4:	e012      	b.n	80094fc <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	1c5a      	adds	r2, r3, #1
 80094da:	60fa      	str	r2, [r7, #12]
 80094dc:	7dfa      	ldrb	r2, [r7, #23]
 80094de:	1c51      	adds	r1, r2, #1
 80094e0:	75f9      	strb	r1, [r7, #23]
 80094e2:	4611      	mov	r1, r2
 80094e4:	68ba      	ldr	r2, [r7, #8]
 80094e6:	440a      	add	r2, r1
 80094e8:	781b      	ldrb	r3, [r3, #0]
 80094ea:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80094ec:	7dfb      	ldrb	r3, [r7, #23]
 80094ee:	1c5a      	adds	r2, r3, #1
 80094f0:	75fa      	strb	r2, [r7, #23]
 80094f2:	461a      	mov	r2, r3
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	4413      	add	r3, r2
 80094f8:	2200      	movs	r2, #0
 80094fa:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	781b      	ldrb	r3, [r3, #0]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d1e8      	bne.n	80094d6 <USBD_GetString+0x4e>
    }
  }
}
 8009504:	bf00      	nop
 8009506:	3718      	adds	r7, #24
 8009508:	46bd      	mov	sp, r7
 800950a:	bd80      	pop	{r7, pc}

0800950c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800950c:	b480      	push	{r7}
 800950e:	b085      	sub	sp, #20
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009514:	2300      	movs	r3, #0
 8009516:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009518:	e005      	b.n	8009526 <USBD_GetLen+0x1a>
  {
    len++;
 800951a:	7bfb      	ldrb	r3, [r7, #15]
 800951c:	3301      	adds	r3, #1
 800951e:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	3301      	adds	r3, #1
 8009524:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	781b      	ldrb	r3, [r3, #0]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d1f5      	bne.n	800951a <USBD_GetLen+0xe>
  }

  return len;
 800952e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009530:	4618      	mov	r0, r3
 8009532:	3714      	adds	r7, #20
 8009534:	46bd      	mov	sp, r7
 8009536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953a:	4770      	bx	lr

0800953c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b084      	sub	sp, #16
 8009540:	af00      	add	r7, sp, #0
 8009542:	60f8      	str	r0, [r7, #12]
 8009544:	60b9      	str	r1, [r7, #8]
 8009546:	4613      	mov	r3, r2
 8009548:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	2202      	movs	r2, #2
 800954e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009552:	88fa      	ldrh	r2, [r7, #6]
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009558:	88fa      	ldrh	r2, [r7, #6]
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800955e:	88fb      	ldrh	r3, [r7, #6]
 8009560:	68ba      	ldr	r2, [r7, #8]
 8009562:	2100      	movs	r1, #0
 8009564:	68f8      	ldr	r0, [r7, #12]
 8009566:	f000 fc89 	bl	8009e7c <USBD_LL_Transmit>

  return USBD_OK;
 800956a:	2300      	movs	r3, #0
}
 800956c:	4618      	mov	r0, r3
 800956e:	3710      	adds	r7, #16
 8009570:	46bd      	mov	sp, r7
 8009572:	bd80      	pop	{r7, pc}

08009574 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b084      	sub	sp, #16
 8009578:	af00      	add	r7, sp, #0
 800957a:	60f8      	str	r0, [r7, #12]
 800957c:	60b9      	str	r1, [r7, #8]
 800957e:	4613      	mov	r3, r2
 8009580:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009582:	88fb      	ldrh	r3, [r7, #6]
 8009584:	68ba      	ldr	r2, [r7, #8]
 8009586:	2100      	movs	r1, #0
 8009588:	68f8      	ldr	r0, [r7, #12]
 800958a:	f000 fc77 	bl	8009e7c <USBD_LL_Transmit>

  return USBD_OK;
 800958e:	2300      	movs	r3, #0
}
 8009590:	4618      	mov	r0, r3
 8009592:	3710      	adds	r7, #16
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}

08009598 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b084      	sub	sp, #16
 800959c:	af00      	add	r7, sp, #0
 800959e:	60f8      	str	r0, [r7, #12]
 80095a0:	60b9      	str	r1, [r7, #8]
 80095a2:	4613      	mov	r3, r2
 80095a4:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80095a6:	88fb      	ldrh	r3, [r7, #6]
 80095a8:	68ba      	ldr	r2, [r7, #8]
 80095aa:	2100      	movs	r1, #0
 80095ac:	68f8      	ldr	r0, [r7, #12]
 80095ae:	f000 fc88 	bl	8009ec2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80095b2:	2300      	movs	r3, #0
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	3710      	adds	r7, #16
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}

080095bc <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b082      	sub	sp, #8
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2204      	movs	r2, #4
 80095c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80095cc:	2300      	movs	r3, #0
 80095ce:	2200      	movs	r2, #0
 80095d0:	2100      	movs	r1, #0
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f000 fc52 	bl	8009e7c <USBD_LL_Transmit>

  return USBD_OK;
 80095d8:	2300      	movs	r3, #0
}
 80095da:	4618      	mov	r0, r3
 80095dc:	3708      	adds	r7, #8
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}

080095e2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80095e2:	b580      	push	{r7, lr}
 80095e4:	b082      	sub	sp, #8
 80095e6:	af00      	add	r7, sp, #0
 80095e8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2205      	movs	r2, #5
 80095ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80095f2:	2300      	movs	r3, #0
 80095f4:	2200      	movs	r2, #0
 80095f6:	2100      	movs	r1, #0
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f000 fc62 	bl	8009ec2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80095fe:	2300      	movs	r3, #0
}
 8009600:	4618      	mov	r0, r3
 8009602:	3708      	adds	r7, #8
 8009604:	46bd      	mov	sp, r7
 8009606:	bd80      	pop	{r7, pc}

08009608 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009608:	b480      	push	{r7}
 800960a:	b087      	sub	sp, #28
 800960c:	af00      	add	r7, sp, #0
 800960e:	60f8      	str	r0, [r7, #12]
 8009610:	60b9      	str	r1, [r7, #8]
 8009612:	4613      	mov	r3, r2
 8009614:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009616:	2301      	movs	r3, #1
 8009618:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800961a:	2300      	movs	r3, #0
 800961c:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800961e:	4b1f      	ldr	r3, [pc, #124]	; (800969c <FATFS_LinkDriverEx+0x94>)
 8009620:	7a5b      	ldrb	r3, [r3, #9]
 8009622:	b2db      	uxtb	r3, r3
 8009624:	2b01      	cmp	r3, #1
 8009626:	d831      	bhi.n	800968c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009628:	4b1c      	ldr	r3, [pc, #112]	; (800969c <FATFS_LinkDriverEx+0x94>)
 800962a:	7a5b      	ldrb	r3, [r3, #9]
 800962c:	b2db      	uxtb	r3, r3
 800962e:	461a      	mov	r2, r3
 8009630:	4b1a      	ldr	r3, [pc, #104]	; (800969c <FATFS_LinkDriverEx+0x94>)
 8009632:	2100      	movs	r1, #0
 8009634:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8009636:	4b19      	ldr	r3, [pc, #100]	; (800969c <FATFS_LinkDriverEx+0x94>)
 8009638:	7a5b      	ldrb	r3, [r3, #9]
 800963a:	b2db      	uxtb	r3, r3
 800963c:	4a17      	ldr	r2, [pc, #92]	; (800969c <FATFS_LinkDriverEx+0x94>)
 800963e:	009b      	lsls	r3, r3, #2
 8009640:	4413      	add	r3, r2
 8009642:	68fa      	ldr	r2, [r7, #12]
 8009644:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8009646:	4b15      	ldr	r3, [pc, #84]	; (800969c <FATFS_LinkDriverEx+0x94>)
 8009648:	7a5b      	ldrb	r3, [r3, #9]
 800964a:	b2db      	uxtb	r3, r3
 800964c:	461a      	mov	r2, r3
 800964e:	4b13      	ldr	r3, [pc, #76]	; (800969c <FATFS_LinkDriverEx+0x94>)
 8009650:	4413      	add	r3, r2
 8009652:	79fa      	ldrb	r2, [r7, #7]
 8009654:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009656:	4b11      	ldr	r3, [pc, #68]	; (800969c <FATFS_LinkDriverEx+0x94>)
 8009658:	7a5b      	ldrb	r3, [r3, #9]
 800965a:	b2db      	uxtb	r3, r3
 800965c:	1c5a      	adds	r2, r3, #1
 800965e:	b2d1      	uxtb	r1, r2
 8009660:	4a0e      	ldr	r2, [pc, #56]	; (800969c <FATFS_LinkDriverEx+0x94>)
 8009662:	7251      	strb	r1, [r2, #9]
 8009664:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009666:	7dbb      	ldrb	r3, [r7, #22]
 8009668:	3330      	adds	r3, #48	; 0x30
 800966a:	b2da      	uxtb	r2, r3
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	3301      	adds	r3, #1
 8009674:	223a      	movs	r2, #58	; 0x3a
 8009676:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	3302      	adds	r3, #2
 800967c:	222f      	movs	r2, #47	; 0x2f
 800967e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	3303      	adds	r3, #3
 8009684:	2200      	movs	r2, #0
 8009686:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009688:	2300      	movs	r3, #0
 800968a:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800968c:	7dfb      	ldrb	r3, [r7, #23]
}
 800968e:	4618      	mov	r0, r3
 8009690:	371c      	adds	r7, #28
 8009692:	46bd      	mov	sp, r7
 8009694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009698:	4770      	bx	lr
 800969a:	bf00      	nop
 800969c:	20000158 	.word	0x20000158

080096a0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b082      	sub	sp, #8
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
 80096a8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80096aa:	2200      	movs	r2, #0
 80096ac:	6839      	ldr	r1, [r7, #0]
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f7ff ffaa 	bl	8009608 <FATFS_LinkDriverEx>
 80096b4:	4603      	mov	r3, r0
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	3708      	adds	r7, #8
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}
	...

080096c0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80096c4:	2200      	movs	r2, #0
 80096c6:	4912      	ldr	r1, [pc, #72]	; (8009710 <MX_USB_DEVICE_Init+0x50>)
 80096c8:	4812      	ldr	r0, [pc, #72]	; (8009714 <MX_USB_DEVICE_Init+0x54>)
 80096ca:	f7fe ff28 	bl	800851e <USBD_Init>
 80096ce:	4603      	mov	r3, r0
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d001      	beq.n	80096d8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80096d4:	f7f7 fbf2 	bl	8000ebc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 80096d8:	490f      	ldr	r1, [pc, #60]	; (8009718 <MX_USB_DEVICE_Init+0x58>)
 80096da:	480e      	ldr	r0, [pc, #56]	; (8009714 <MX_USB_DEVICE_Init+0x54>)
 80096dc:	f7fe ff4a 	bl	8008574 <USBD_RegisterClass>
 80096e0:	4603      	mov	r3, r0
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d001      	beq.n	80096ea <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80096e6:	f7f7 fbe9 	bl	8000ebc <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 80096ea:	490c      	ldr	r1, [pc, #48]	; (800971c <MX_USB_DEVICE_Init+0x5c>)
 80096ec:	4809      	ldr	r0, [pc, #36]	; (8009714 <MX_USB_DEVICE_Init+0x54>)
 80096ee:	f7fd fef1 	bl	80074d4 <USBD_MSC_RegisterStorage>
 80096f2:	4603      	mov	r3, r0
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d001      	beq.n	80096fc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80096f8:	f7f7 fbe0 	bl	8000ebc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80096fc:	4805      	ldr	r0, [pc, #20]	; (8009714 <MX_USB_DEVICE_Init+0x54>)
 80096fe:	f7fe ff53 	bl	80085a8 <USBD_Start>
 8009702:	4603      	mov	r3, r0
 8009704:	2b00      	cmp	r3, #0
 8009706:	d001      	beq.n	800970c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009708:	f7f7 fbd8 	bl	8000ebc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800970c:	bf00      	nop
 800970e:	bd80      	pop	{r7, pc}
 8009710:	200000c4 	.word	0x200000c4
 8009714:	20000ab8 	.word	0x20000ab8
 8009718:	20000020 	.word	0x20000020
 800971c:	20000114 	.word	0x20000114

08009720 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009720:	b480      	push	{r7}
 8009722:	b083      	sub	sp, #12
 8009724:	af00      	add	r7, sp, #0
 8009726:	4603      	mov	r3, r0
 8009728:	6039      	str	r1, [r7, #0]
 800972a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	2212      	movs	r2, #18
 8009730:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009732:	4b03      	ldr	r3, [pc, #12]	; (8009740 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009734:	4618      	mov	r0, r3
 8009736:	370c      	adds	r7, #12
 8009738:	46bd      	mov	sp, r7
 800973a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973e:	4770      	bx	lr
 8009740:	200000e0 	.word	0x200000e0

08009744 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009744:	b480      	push	{r7}
 8009746:	b083      	sub	sp, #12
 8009748:	af00      	add	r7, sp, #0
 800974a:	4603      	mov	r3, r0
 800974c:	6039      	str	r1, [r7, #0]
 800974e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	2204      	movs	r2, #4
 8009754:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009756:	4b03      	ldr	r3, [pc, #12]	; (8009764 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009758:	4618      	mov	r0, r3
 800975a:	370c      	adds	r7, #12
 800975c:	46bd      	mov	sp, r7
 800975e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009762:	4770      	bx	lr
 8009764:	200000f4 	.word	0x200000f4

08009768 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b082      	sub	sp, #8
 800976c:	af00      	add	r7, sp, #0
 800976e:	4603      	mov	r3, r0
 8009770:	6039      	str	r1, [r7, #0]
 8009772:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009774:	79fb      	ldrb	r3, [r7, #7]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d105      	bne.n	8009786 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800977a:	683a      	ldr	r2, [r7, #0]
 800977c:	4907      	ldr	r1, [pc, #28]	; (800979c <USBD_FS_ProductStrDescriptor+0x34>)
 800977e:	4808      	ldr	r0, [pc, #32]	; (80097a0 <USBD_FS_ProductStrDescriptor+0x38>)
 8009780:	f7ff fe82 	bl	8009488 <USBD_GetString>
 8009784:	e004      	b.n	8009790 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009786:	683a      	ldr	r2, [r7, #0]
 8009788:	4904      	ldr	r1, [pc, #16]	; (800979c <USBD_FS_ProductStrDescriptor+0x34>)
 800978a:	4805      	ldr	r0, [pc, #20]	; (80097a0 <USBD_FS_ProductStrDescriptor+0x38>)
 800978c:	f7ff fe7c 	bl	8009488 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009790:	4b02      	ldr	r3, [pc, #8]	; (800979c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009792:	4618      	mov	r0, r3
 8009794:	3708      	adds	r7, #8
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}
 800979a:	bf00      	nop
 800979c:	20000d7c 	.word	0x20000d7c
 80097a0:	0800a040 	.word	0x0800a040

080097a4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b082      	sub	sp, #8
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	4603      	mov	r3, r0
 80097ac:	6039      	str	r1, [r7, #0]
 80097ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80097b0:	683a      	ldr	r2, [r7, #0]
 80097b2:	4904      	ldr	r1, [pc, #16]	; (80097c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80097b4:	4804      	ldr	r0, [pc, #16]	; (80097c8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80097b6:	f7ff fe67 	bl	8009488 <USBD_GetString>
  return USBD_StrDesc;
 80097ba:	4b02      	ldr	r3, [pc, #8]	; (80097c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3708      	adds	r7, #8
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}
 80097c4:	20000d7c 	.word	0x20000d7c
 80097c8:	0800a054 	.word	0x0800a054

080097cc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b082      	sub	sp, #8
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	4603      	mov	r3, r0
 80097d4:	6039      	str	r1, [r7, #0]
 80097d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	221a      	movs	r2, #26
 80097dc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80097de:	f000 f843 	bl	8009868 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80097e2:	4b02      	ldr	r3, [pc, #8]	; (80097ec <USBD_FS_SerialStrDescriptor+0x20>)
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	3708      	adds	r7, #8
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}
 80097ec:	200000f8 	.word	0x200000f8

080097f0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b082      	sub	sp, #8
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	4603      	mov	r3, r0
 80097f8:	6039      	str	r1, [r7, #0]
 80097fa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80097fc:	79fb      	ldrb	r3, [r7, #7]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d105      	bne.n	800980e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009802:	683a      	ldr	r2, [r7, #0]
 8009804:	4907      	ldr	r1, [pc, #28]	; (8009824 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009806:	4808      	ldr	r0, [pc, #32]	; (8009828 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009808:	f7ff fe3e 	bl	8009488 <USBD_GetString>
 800980c:	e004      	b.n	8009818 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800980e:	683a      	ldr	r2, [r7, #0]
 8009810:	4904      	ldr	r1, [pc, #16]	; (8009824 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009812:	4805      	ldr	r0, [pc, #20]	; (8009828 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009814:	f7ff fe38 	bl	8009488 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009818:	4b02      	ldr	r3, [pc, #8]	; (8009824 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800981a:	4618      	mov	r0, r3
 800981c:	3708      	adds	r7, #8
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}
 8009822:	bf00      	nop
 8009824:	20000d7c 	.word	0x20000d7c
 8009828:	0800a068 	.word	0x0800a068

0800982c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b082      	sub	sp, #8
 8009830:	af00      	add	r7, sp, #0
 8009832:	4603      	mov	r3, r0
 8009834:	6039      	str	r1, [r7, #0]
 8009836:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009838:	79fb      	ldrb	r3, [r7, #7]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d105      	bne.n	800984a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800983e:	683a      	ldr	r2, [r7, #0]
 8009840:	4907      	ldr	r1, [pc, #28]	; (8009860 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009842:	4808      	ldr	r0, [pc, #32]	; (8009864 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009844:	f7ff fe20 	bl	8009488 <USBD_GetString>
 8009848:	e004      	b.n	8009854 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800984a:	683a      	ldr	r2, [r7, #0]
 800984c:	4904      	ldr	r1, [pc, #16]	; (8009860 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800984e:	4805      	ldr	r0, [pc, #20]	; (8009864 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009850:	f7ff fe1a 	bl	8009488 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009854:	4b02      	ldr	r3, [pc, #8]	; (8009860 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009856:	4618      	mov	r0, r3
 8009858:	3708      	adds	r7, #8
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}
 800985e:	bf00      	nop
 8009860:	20000d7c 	.word	0x20000d7c
 8009864:	0800a074 	.word	0x0800a074

08009868 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b084      	sub	sp, #16
 800986c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800986e:	4b0f      	ldr	r3, [pc, #60]	; (80098ac <Get_SerialNum+0x44>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009874:	4b0e      	ldr	r3, [pc, #56]	; (80098b0 <Get_SerialNum+0x48>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800987a:	4b0e      	ldr	r3, [pc, #56]	; (80098b4 <Get_SerialNum+0x4c>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009880:	68fa      	ldr	r2, [r7, #12]
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	4413      	add	r3, r2
 8009886:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d009      	beq.n	80098a2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800988e:	2208      	movs	r2, #8
 8009890:	4909      	ldr	r1, [pc, #36]	; (80098b8 <Get_SerialNum+0x50>)
 8009892:	68f8      	ldr	r0, [r7, #12]
 8009894:	f000 f814 	bl	80098c0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009898:	2204      	movs	r2, #4
 800989a:	4908      	ldr	r1, [pc, #32]	; (80098bc <Get_SerialNum+0x54>)
 800989c:	68b8      	ldr	r0, [r7, #8]
 800989e:	f000 f80f 	bl	80098c0 <IntToUnicode>
  }
}
 80098a2:	bf00      	nop
 80098a4:	3710      	adds	r7, #16
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bd80      	pop	{r7, pc}
 80098aa:	bf00      	nop
 80098ac:	1ffff7ac 	.word	0x1ffff7ac
 80098b0:	1ffff7b0 	.word	0x1ffff7b0
 80098b4:	1ffff7b4 	.word	0x1ffff7b4
 80098b8:	200000fa 	.word	0x200000fa
 80098bc:	2000010a 	.word	0x2000010a

080098c0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80098c0:	b480      	push	{r7}
 80098c2:	b087      	sub	sp, #28
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	60f8      	str	r0, [r7, #12]
 80098c8:	60b9      	str	r1, [r7, #8]
 80098ca:	4613      	mov	r3, r2
 80098cc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80098ce:	2300      	movs	r3, #0
 80098d0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80098d2:	2300      	movs	r3, #0
 80098d4:	75fb      	strb	r3, [r7, #23]
 80098d6:	e027      	b.n	8009928 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	0f1b      	lsrs	r3, r3, #28
 80098dc:	2b09      	cmp	r3, #9
 80098de:	d80b      	bhi.n	80098f8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	0f1b      	lsrs	r3, r3, #28
 80098e4:	b2da      	uxtb	r2, r3
 80098e6:	7dfb      	ldrb	r3, [r7, #23]
 80098e8:	005b      	lsls	r3, r3, #1
 80098ea:	4619      	mov	r1, r3
 80098ec:	68bb      	ldr	r3, [r7, #8]
 80098ee:	440b      	add	r3, r1
 80098f0:	3230      	adds	r2, #48	; 0x30
 80098f2:	b2d2      	uxtb	r2, r2
 80098f4:	701a      	strb	r2, [r3, #0]
 80098f6:	e00a      	b.n	800990e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	0f1b      	lsrs	r3, r3, #28
 80098fc:	b2da      	uxtb	r2, r3
 80098fe:	7dfb      	ldrb	r3, [r7, #23]
 8009900:	005b      	lsls	r3, r3, #1
 8009902:	4619      	mov	r1, r3
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	440b      	add	r3, r1
 8009908:	3237      	adds	r2, #55	; 0x37
 800990a:	b2d2      	uxtb	r2, r2
 800990c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	011b      	lsls	r3, r3, #4
 8009912:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009914:	7dfb      	ldrb	r3, [r7, #23]
 8009916:	005b      	lsls	r3, r3, #1
 8009918:	3301      	adds	r3, #1
 800991a:	68ba      	ldr	r2, [r7, #8]
 800991c:	4413      	add	r3, r2
 800991e:	2200      	movs	r2, #0
 8009920:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009922:	7dfb      	ldrb	r3, [r7, #23]
 8009924:	3301      	adds	r3, #1
 8009926:	75fb      	strb	r3, [r7, #23]
 8009928:	7dfa      	ldrb	r2, [r7, #23]
 800992a:	79fb      	ldrb	r3, [r7, #7]
 800992c:	429a      	cmp	r2, r3
 800992e:	d3d3      	bcc.n	80098d8 <IntToUnicode+0x18>
  }
}
 8009930:	bf00      	nop
 8009932:	371c      	adds	r7, #28
 8009934:	46bd      	mov	sp, r7
 8009936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993a:	4770      	bx	lr

0800993c <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 800993c:	b480      	push	{r7}
 800993e:	b083      	sub	sp, #12
 8009940:	af00      	add	r7, sp, #0
 8009942:	4603      	mov	r3, r0
 8009944:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 8009946:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8009948:	4618      	mov	r0, r3
 800994a:	370c      	adds	r7, #12
 800994c:	46bd      	mov	sp, r7
 800994e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009952:	4770      	bx	lr

08009954 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8009954:	b480      	push	{r7}
 8009956:	b085      	sub	sp, #20
 8009958:	af00      	add	r7, sp, #0
 800995a:	4603      	mov	r3, r0
 800995c:	60b9      	str	r1, [r7, #8]
 800995e:	607a      	str	r2, [r7, #4]
 8009960:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 8009962:	68bb      	ldr	r3, [r7, #8]
 8009964:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009968:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009970:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 8009972:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009974:	4618      	mov	r0, r3
 8009976:	3714      	adds	r7, #20
 8009978:	46bd      	mov	sp, r7
 800997a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997e:	4770      	bx	lr

08009980 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8009980:	b480      	push	{r7}
 8009982:	b083      	sub	sp, #12
 8009984:	af00      	add	r7, sp, #0
 8009986:	4603      	mov	r3, r0
 8009988:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800998a:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800998c:	4618      	mov	r0, r3
 800998e:	370c      	adds	r7, #12
 8009990:	46bd      	mov	sp, r7
 8009992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009996:	4770      	bx	lr

08009998 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8009998:	b480      	push	{r7}
 800999a:	b083      	sub	sp, #12
 800999c:	af00      	add	r7, sp, #0
 800999e:	4603      	mov	r3, r0
 80099a0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 80099a2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80099a4:	4618      	mov	r0, r3
 80099a6:	370c      	adds	r7, #12
 80099a8:	46bd      	mov	sp, r7
 80099aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ae:	4770      	bx	lr

080099b0 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80099b0:	b480      	push	{r7}
 80099b2:	b085      	sub	sp, #20
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	60b9      	str	r1, [r7, #8]
 80099b8:	607a      	str	r2, [r7, #4]
 80099ba:	461a      	mov	r2, r3
 80099bc:	4603      	mov	r3, r0
 80099be:	73fb      	strb	r3, [r7, #15]
 80099c0:	4613      	mov	r3, r2
 80099c2:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 80099c4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	3714      	adds	r7, #20
 80099ca:	46bd      	mov	sp, r7
 80099cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d0:	4770      	bx	lr

080099d2 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80099d2:	b480      	push	{r7}
 80099d4:	b085      	sub	sp, #20
 80099d6:	af00      	add	r7, sp, #0
 80099d8:	60b9      	str	r1, [r7, #8]
 80099da:	607a      	str	r2, [r7, #4]
 80099dc:	461a      	mov	r2, r3
 80099de:	4603      	mov	r3, r0
 80099e0:	73fb      	strb	r3, [r7, #15]
 80099e2:	4613      	mov	r3, r2
 80099e4:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
  return (USBD_OK);
 80099e6:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 80099e8:	4618      	mov	r0, r3
 80099ea:	3714      	adds	r7, #20
 80099ec:	46bd      	mov	sp, r7
 80099ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f2:	4770      	bx	lr

080099f4 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 80099f4:	b480      	push	{r7}
 80099f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 80099f8:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 80099fa:	4618      	mov	r0, r3
 80099fc:	46bd      	mov	sp, r7
 80099fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a02:	4770      	bx	lr

08009a04 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b08a      	sub	sp, #40	; 0x28
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009a0c:	f107 0314 	add.w	r3, r7, #20
 8009a10:	2200      	movs	r2, #0
 8009a12:	601a      	str	r2, [r3, #0]
 8009a14:	605a      	str	r2, [r3, #4]
 8009a16:	609a      	str	r2, [r3, #8]
 8009a18:	60da      	str	r2, [r3, #12]
 8009a1a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	4a1f      	ldr	r2, [pc, #124]	; (8009aa0 <HAL_PCD_MspInit+0x9c>)
 8009a22:	4293      	cmp	r3, r2
 8009a24:	d137      	bne.n	8009a96 <HAL_PCD_MspInit+0x92>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009a26:	4b1f      	ldr	r3, [pc, #124]	; (8009aa4 <HAL_PCD_MspInit+0xa0>)
 8009a28:	695b      	ldr	r3, [r3, #20]
 8009a2a:	4a1e      	ldr	r2, [pc, #120]	; (8009aa4 <HAL_PCD_MspInit+0xa0>)
 8009a2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a30:	6153      	str	r3, [r2, #20]
 8009a32:	4b1c      	ldr	r3, [pc, #112]	; (8009aa4 <HAL_PCD_MspInit+0xa0>)
 8009a34:	695b      	ldr	r3, [r3, #20]
 8009a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a3a:	613b      	str	r3, [r7, #16]
 8009a3c:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009a3e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009a42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a44:	2302      	movs	r3, #2
 8009a46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a48:	2300      	movs	r3, #0
 8009a4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009a4c:	2303      	movs	r3, #3
 8009a4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8009a50:	230e      	movs	r3, #14
 8009a52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009a54:	f107 0314 	add.w	r3, r7, #20
 8009a58:	4619      	mov	r1, r3
 8009a5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009a5e:	f7f8 fcb1 	bl	80023c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009a62:	4b10      	ldr	r3, [pc, #64]	; (8009aa4 <HAL_PCD_MspInit+0xa0>)
 8009a64:	69db      	ldr	r3, [r3, #28]
 8009a66:	4a0f      	ldr	r2, [pc, #60]	; (8009aa4 <HAL_PCD_MspInit+0xa0>)
 8009a68:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009a6c:	61d3      	str	r3, [r2, #28]
 8009a6e:	4b0d      	ldr	r3, [pc, #52]	; (8009aa4 <HAL_PCD_MspInit+0xa0>)
 8009a70:	69db      	ldr	r3, [r3, #28]
 8009a72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009a76:	60fb      	str	r3, [r7, #12]
 8009a78:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    __HAL_REMAPINTERRUPT_USB_ENABLE();
 8009a7a:	4b0b      	ldr	r3, [pc, #44]	; (8009aa8 <HAL_PCD_MspInit+0xa4>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	4a0a      	ldr	r2, [pc, #40]	; (8009aa8 <HAL_PCD_MspInit+0xa4>)
 8009a80:	f043 0320 	orr.w	r3, r3, #32
 8009a84:	6013      	str	r3, [r2, #0]
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8009a86:	2200      	movs	r2, #0
 8009a88:	2100      	movs	r1, #0
 8009a8a:	204b      	movs	r0, #75	; 0x4b
 8009a8c:	f7f8 fc63 	bl	8002356 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8009a90:	204b      	movs	r0, #75	; 0x4b
 8009a92:	f7f8 fc7c 	bl	800238e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009a96:	bf00      	nop
 8009a98:	3728      	adds	r7, #40	; 0x28
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}
 8009a9e:	bf00      	nop
 8009aa0:	40005c00 	.word	0x40005c00
 8009aa4:	40021000 	.word	0x40021000
 8009aa8:	40010000 	.word	0x40010000

08009aac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b082      	sub	sp, #8
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8009ac0:	4619      	mov	r1, r3
 8009ac2:	4610      	mov	r0, r2
 8009ac4:	f7fe fdb9 	bl	800863a <USBD_LL_SetupStage>
}
 8009ac8:	bf00      	nop
 8009aca:	3708      	adds	r7, #8
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd80      	pop	{r7, pc}

08009ad0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b082      	sub	sp, #8
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
 8009ad8:	460b      	mov	r3, r1
 8009ada:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8009ae2:	78fb      	ldrb	r3, [r7, #3]
 8009ae4:	687a      	ldr	r2, [r7, #4]
 8009ae6:	015b      	lsls	r3, r3, #5
 8009ae8:	4413      	add	r3, r2
 8009aea:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8009aee:	681a      	ldr	r2, [r3, #0]
 8009af0:	78fb      	ldrb	r3, [r7, #3]
 8009af2:	4619      	mov	r1, r3
 8009af4:	f7fe fdec 	bl	80086d0 <USBD_LL_DataOutStage>
}
 8009af8:	bf00      	nop
 8009afa:	3708      	adds	r7, #8
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}

08009b00 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b082      	sub	sp, #8
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
 8009b08:	460b      	mov	r3, r1
 8009b0a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8009b12:	78fb      	ldrb	r3, [r7, #3]
 8009b14:	687a      	ldr	r2, [r7, #4]
 8009b16:	015b      	lsls	r3, r3, #5
 8009b18:	4413      	add	r3, r2
 8009b1a:	333c      	adds	r3, #60	; 0x3c
 8009b1c:	681a      	ldr	r2, [r3, #0]
 8009b1e:	78fb      	ldrb	r3, [r7, #3]
 8009b20:	4619      	mov	r1, r3
 8009b22:	f7fe fe46 	bl	80087b2 <USBD_LL_DataInStage>
}
 8009b26:	bf00      	nop
 8009b28:	3708      	adds	r7, #8
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	bd80      	pop	{r7, pc}

08009b2e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b2e:	b580      	push	{r7, lr}
 8009b30:	b082      	sub	sp, #8
 8009b32:	af00      	add	r7, sp, #0
 8009b34:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	f7fe ff59 	bl	80089f4 <USBD_LL_SOF>
}
 8009b42:	bf00      	nop
 8009b44:	3708      	adds	r7, #8
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bd80      	pop	{r7, pc}

08009b4a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b4a:	b580      	push	{r7, lr}
 8009b4c:	b084      	sub	sp, #16
 8009b4e:	af00      	add	r7, sp, #0
 8009b50:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009b52:	2301      	movs	r3, #1
 8009b54:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	689b      	ldr	r3, [r3, #8]
 8009b5a:	2b02      	cmp	r3, #2
 8009b5c:	d001      	beq.n	8009b62 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009b5e:	f7f7 f9ad 	bl	8000ebc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8009b68:	7bfa      	ldrb	r2, [r7, #15]
 8009b6a:	4611      	mov	r1, r2
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	f7fe ff06 	bl	800897e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f7fe febf 	bl	80088fc <USBD_LL_Reset>
}
 8009b7e:	bf00      	nop
 8009b80:	3710      	adds	r7, #16
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}
	...

08009b88 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b082      	sub	sp, #8
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8009b96:	4618      	mov	r0, r3
 8009b98:	f7fe ff01 	bl	800899e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	699b      	ldr	r3, [r3, #24]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d005      	beq.n	8009bb0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009ba4:	4b04      	ldr	r3, [pc, #16]	; (8009bb8 <HAL_PCD_SuspendCallback+0x30>)
 8009ba6:	691b      	ldr	r3, [r3, #16]
 8009ba8:	4a03      	ldr	r2, [pc, #12]	; (8009bb8 <HAL_PCD_SuspendCallback+0x30>)
 8009baa:	f043 0306 	orr.w	r3, r3, #6
 8009bae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009bb0:	bf00      	nop
 8009bb2:	3708      	adds	r7, #8
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bd80      	pop	{r7, pc}
 8009bb8:	e000ed00 	.word	0xe000ed00

08009bbc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b082      	sub	sp, #8
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f7fe fefc 	bl	80089c8 <USBD_LL_Resume>
}
 8009bd0:	bf00      	nop
 8009bd2:	3708      	adds	r7, #8
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bd80      	pop	{r7, pc}

08009bd8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b082      	sub	sp, #8
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009be0:	4a23      	ldr	r2, [pc, #140]	; (8009c70 <USBD_LL_Init+0x98>)
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	4a21      	ldr	r2, [pc, #132]	; (8009c70 <USBD_LL_Init+0x98>)
 8009bec:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009bf0:	4b1f      	ldr	r3, [pc, #124]	; (8009c70 <USBD_LL_Init+0x98>)
 8009bf2:	4a20      	ldr	r2, [pc, #128]	; (8009c74 <USBD_LL_Init+0x9c>)
 8009bf4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009bf6:	4b1e      	ldr	r3, [pc, #120]	; (8009c70 <USBD_LL_Init+0x98>)
 8009bf8:	2208      	movs	r2, #8
 8009bfa:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009bfc:	4b1c      	ldr	r3, [pc, #112]	; (8009c70 <USBD_LL_Init+0x98>)
 8009bfe:	2202      	movs	r2, #2
 8009c00:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009c02:	4b1b      	ldr	r3, [pc, #108]	; (8009c70 <USBD_LL_Init+0x98>)
 8009c04:	2202      	movs	r2, #2
 8009c06:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009c08:	4b19      	ldr	r3, [pc, #100]	; (8009c70 <USBD_LL_Init+0x98>)
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009c0e:	4b18      	ldr	r3, [pc, #96]	; (8009c70 <USBD_LL_Init+0x98>)
 8009c10:	2200      	movs	r2, #0
 8009c12:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009c14:	4816      	ldr	r0, [pc, #88]	; (8009c70 <USBD_LL_Init+0x98>)
 8009c16:	f7f8 fe8d 	bl	8002934 <HAL_PCD_Init>
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d001      	beq.n	8009c24 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009c20:	f7f7 f94c 	bl	8000ebc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009c2a:	2318      	movs	r3, #24
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	2100      	movs	r1, #0
 8009c30:	f7f9 fcfe 	bl	8003630 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009c3a:	2358      	movs	r3, #88	; 0x58
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	2180      	movs	r1, #128	; 0x80
 8009c40:	f7f9 fcf6 	bl	8003630 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_MSC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x98);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009c4a:	2398      	movs	r3, #152	; 0x98
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	2181      	movs	r1, #129	; 0x81
 8009c50:	f7f9 fcee 	bl	8003630 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0xD8);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009c5a:	23d8      	movs	r3, #216	; 0xd8
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	2101      	movs	r1, #1
 8009c60:	f7f9 fce6 	bl	8003630 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_MSC */
  return USBD_OK;
 8009c64:	2300      	movs	r3, #0
}
 8009c66:	4618      	mov	r0, r3
 8009c68:	3708      	adds	r7, #8
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bd80      	pop	{r7, pc}
 8009c6e:	bf00      	nop
 8009c70:	20000f7c 	.word	0x20000f7c
 8009c74:	40005c00 	.word	0x40005c00

08009c78 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b084      	sub	sp, #16
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c80:	2300      	movs	r3, #0
 8009c82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c84:	2300      	movs	r3, #0
 8009c86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009c8e:	4618      	mov	r0, r3
 8009c90:	f7f8 ff04 	bl	8002a9c <HAL_PCD_Start>
 8009c94:	4603      	mov	r3, r0
 8009c96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c98:	7bfb      	ldrb	r3, [r7, #15]
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f000 f96c 	bl	8009f78 <USBD_Get_USB_Status>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ca4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3710      	adds	r7, #16
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}

08009cae <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009cae:	b580      	push	{r7, lr}
 8009cb0:	b084      	sub	sp, #16
 8009cb2:	af00      	add	r7, sp, #0
 8009cb4:	6078      	str	r0, [r7, #4]
 8009cb6:	4608      	mov	r0, r1
 8009cb8:	4611      	mov	r1, r2
 8009cba:	461a      	mov	r2, r3
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	70fb      	strb	r3, [r7, #3]
 8009cc0:	460b      	mov	r3, r1
 8009cc2:	70bb      	strb	r3, [r7, #2]
 8009cc4:	4613      	mov	r3, r2
 8009cc6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cc8:	2300      	movs	r3, #0
 8009cca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ccc:	2300      	movs	r3, #0
 8009cce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009cd6:	78bb      	ldrb	r3, [r7, #2]
 8009cd8:	883a      	ldrh	r2, [r7, #0]
 8009cda:	78f9      	ldrb	r1, [r7, #3]
 8009cdc:	f7f9 f82b 	bl	8002d36 <HAL_PCD_EP_Open>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ce4:	7bfb      	ldrb	r3, [r7, #15]
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	f000 f946 	bl	8009f78 <USBD_Get_USB_Status>
 8009cec:	4603      	mov	r3, r0
 8009cee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009cf0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	3710      	adds	r7, #16
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd80      	pop	{r7, pc}

08009cfa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009cfa:	b580      	push	{r7, lr}
 8009cfc:	b084      	sub	sp, #16
 8009cfe:	af00      	add	r7, sp, #0
 8009d00:	6078      	str	r0, [r7, #4]
 8009d02:	460b      	mov	r3, r1
 8009d04:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d06:	2300      	movs	r3, #0
 8009d08:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d14:	78fa      	ldrb	r2, [r7, #3]
 8009d16:	4611      	mov	r1, r2
 8009d18:	4618      	mov	r0, r3
 8009d1a:	f7f9 f86c 	bl	8002df6 <HAL_PCD_EP_Close>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d22:	7bfb      	ldrb	r3, [r7, #15]
 8009d24:	4618      	mov	r0, r3
 8009d26:	f000 f927 	bl	8009f78 <USBD_Get_USB_Status>
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d2e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d30:	4618      	mov	r0, r3
 8009d32:	3710      	adds	r7, #16
 8009d34:	46bd      	mov	sp, r7
 8009d36:	bd80      	pop	{r7, pc}

08009d38 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b084      	sub	sp, #16
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
 8009d40:	460b      	mov	r3, r1
 8009d42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d44:	2300      	movs	r3, #0
 8009d46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d48:	2300      	movs	r3, #0
 8009d4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d52:	78fa      	ldrb	r2, [r7, #3]
 8009d54:	4611      	mov	r1, r2
 8009d56:	4618      	mov	r0, r3
 8009d58:	f7f9 f9bf 	bl	80030da <HAL_PCD_EP_Flush>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d60:	7bfb      	ldrb	r3, [r7, #15]
 8009d62:	4618      	mov	r0, r3
 8009d64:	f000 f908 	bl	8009f78 <USBD_Get_USB_Status>
 8009d68:	4603      	mov	r3, r0
 8009d6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d6e:	4618      	mov	r0, r3
 8009d70:	3710      	adds	r7, #16
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}

08009d76 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d76:	b580      	push	{r7, lr}
 8009d78:	b084      	sub	sp, #16
 8009d7a:	af00      	add	r7, sp, #0
 8009d7c:	6078      	str	r0, [r7, #4]
 8009d7e:	460b      	mov	r3, r1
 8009d80:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d82:	2300      	movs	r3, #0
 8009d84:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d86:	2300      	movs	r3, #0
 8009d88:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d90:	78fa      	ldrb	r2, [r7, #3]
 8009d92:	4611      	mov	r1, r2
 8009d94:	4618      	mov	r0, r3
 8009d96:	f7f9 f8f8 	bl	8002f8a <HAL_PCD_EP_SetStall>
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d9e:	7bfb      	ldrb	r3, [r7, #15]
 8009da0:	4618      	mov	r0, r3
 8009da2:	f000 f8e9 	bl	8009f78 <USBD_Get_USB_Status>
 8009da6:	4603      	mov	r3, r0
 8009da8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009daa:	7bbb      	ldrb	r3, [r7, #14]
}
 8009dac:	4618      	mov	r0, r3
 8009dae:	3710      	adds	r7, #16
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bd80      	pop	{r7, pc}

08009db4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b084      	sub	sp, #16
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
 8009dbc:	460b      	mov	r3, r1
 8009dbe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009dce:	78fa      	ldrb	r2, [r7, #3]
 8009dd0:	4611      	mov	r1, r2
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	f7f9 f933 	bl	800303e <HAL_PCD_EP_ClrStall>
 8009dd8:	4603      	mov	r3, r0
 8009dda:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ddc:	7bfb      	ldrb	r3, [r7, #15]
 8009dde:	4618      	mov	r0, r3
 8009de0:	f000 f8ca 	bl	8009f78 <USBD_Get_USB_Status>
 8009de4:	4603      	mov	r3, r0
 8009de6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009de8:	7bbb      	ldrb	r3, [r7, #14]
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	3710      	adds	r7, #16
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}

08009df2 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009df2:	b480      	push	{r7}
 8009df4:	b085      	sub	sp, #20
 8009df6:	af00      	add	r7, sp, #0
 8009df8:	6078      	str	r0, [r7, #4]
 8009dfa:	460b      	mov	r3, r1
 8009dfc:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009e04:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009e06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	da08      	bge.n	8009e20 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009e0e:	78fb      	ldrb	r3, [r7, #3]
 8009e10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e14:	68fa      	ldr	r2, [r7, #12]
 8009e16:	015b      	lsls	r3, r3, #5
 8009e18:	4413      	add	r3, r2
 8009e1a:	332a      	adds	r3, #42	; 0x2a
 8009e1c:	781b      	ldrb	r3, [r3, #0]
 8009e1e:	e008      	b.n	8009e32 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009e20:	78fb      	ldrb	r3, [r7, #3]
 8009e22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e26:	68fa      	ldr	r2, [r7, #12]
 8009e28:	015b      	lsls	r3, r3, #5
 8009e2a:	4413      	add	r3, r2
 8009e2c:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8009e30:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009e32:	4618      	mov	r0, r3
 8009e34:	3714      	adds	r7, #20
 8009e36:	46bd      	mov	sp, r7
 8009e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3c:	4770      	bx	lr

08009e3e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009e3e:	b580      	push	{r7, lr}
 8009e40:	b084      	sub	sp, #16
 8009e42:	af00      	add	r7, sp, #0
 8009e44:	6078      	str	r0, [r7, #4]
 8009e46:	460b      	mov	r3, r1
 8009e48:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e4e:	2300      	movs	r3, #0
 8009e50:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009e58:	78fa      	ldrb	r2, [r7, #3]
 8009e5a:	4611      	mov	r1, r2
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	f7f8 ff45 	bl	8002cec <HAL_PCD_SetAddress>
 8009e62:	4603      	mov	r3, r0
 8009e64:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e66:	7bfb      	ldrb	r3, [r7, #15]
 8009e68:	4618      	mov	r0, r3
 8009e6a:	f000 f885 	bl	8009f78 <USBD_Get_USB_Status>
 8009e6e:	4603      	mov	r3, r0
 8009e70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e72:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e74:	4618      	mov	r0, r3
 8009e76:	3710      	adds	r7, #16
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	bd80      	pop	{r7, pc}

08009e7c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b086      	sub	sp, #24
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	60f8      	str	r0, [r7, #12]
 8009e84:	607a      	str	r2, [r7, #4]
 8009e86:	461a      	mov	r2, r3
 8009e88:	460b      	mov	r3, r1
 8009e8a:	72fb      	strb	r3, [r7, #11]
 8009e8c:	4613      	mov	r3, r2
 8009e8e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e90:	2300      	movs	r3, #0
 8009e92:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e94:	2300      	movs	r3, #0
 8009e96:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009e9e:	893b      	ldrh	r3, [r7, #8]
 8009ea0:	7af9      	ldrb	r1, [r7, #11]
 8009ea2:	687a      	ldr	r2, [r7, #4]
 8009ea4:	f7f9 f838 	bl	8002f18 <HAL_PCD_EP_Transmit>
 8009ea8:	4603      	mov	r3, r0
 8009eaa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009eac:	7dfb      	ldrb	r3, [r7, #23]
 8009eae:	4618      	mov	r0, r3
 8009eb0:	f000 f862 	bl	8009f78 <USBD_Get_USB_Status>
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009eb8:	7dbb      	ldrb	r3, [r7, #22]
}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	3718      	adds	r7, #24
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}

08009ec2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009ec2:	b580      	push	{r7, lr}
 8009ec4:	b086      	sub	sp, #24
 8009ec6:	af00      	add	r7, sp, #0
 8009ec8:	60f8      	str	r0, [r7, #12]
 8009eca:	607a      	str	r2, [r7, #4]
 8009ecc:	461a      	mov	r2, r3
 8009ece:	460b      	mov	r3, r1
 8009ed0:	72fb      	strb	r3, [r7, #11]
 8009ed2:	4613      	mov	r3, r2
 8009ed4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009eda:	2300      	movs	r3, #0
 8009edc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009ee4:	893b      	ldrh	r3, [r7, #8]
 8009ee6:	7af9      	ldrb	r1, [r7, #11]
 8009ee8:	687a      	ldr	r2, [r7, #4]
 8009eea:	f7f8 ffc6 	bl	8002e7a <HAL_PCD_EP_Receive>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ef2:	7dfb      	ldrb	r3, [r7, #23]
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	f000 f83f 	bl	8009f78 <USBD_Get_USB_Status>
 8009efa:	4603      	mov	r3, r0
 8009efc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009efe:	7dbb      	ldrb	r3, [r7, #22]
}
 8009f00:	4618      	mov	r0, r3
 8009f02:	3718      	adds	r7, #24
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}

08009f08 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b082      	sub	sp, #8
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
 8009f10:	460b      	mov	r3, r1
 8009f12:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009f1a:	78fa      	ldrb	r2, [r7, #3]
 8009f1c:	4611      	mov	r1, r2
 8009f1e:	4618      	mov	r0, r3
 8009f20:	f7f8 ffe5 	bl	8002eee <HAL_PCD_EP_GetRxCount>
 8009f24:	4603      	mov	r3, r0
}
 8009f26:	4618      	mov	r0, r3
 8009f28:	3708      	adds	r7, #8
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}
	...

08009f30 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009f30:	b480      	push	{r7}
 8009f32:	b083      	sub	sp, #12
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009f38:	4b03      	ldr	r3, [pc, #12]	; (8009f48 <USBD_static_malloc+0x18>)
}
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	370c      	adds	r7, #12
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f44:	4770      	bx	lr
 8009f46:	bf00      	nop
 8009f48:	20000164 	.word	0x20000164

08009f4c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009f4c:	b480      	push	{r7}
 8009f4e:	b083      	sub	sp, #12
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]

}
 8009f54:	bf00      	nop
 8009f56:	370c      	adds	r7, #12
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5e:	4770      	bx	lr

08009f60 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f60:	b480      	push	{r7}
 8009f62:	b083      	sub	sp, #12
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
 8009f68:	460b      	mov	r3, r1
 8009f6a:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009f6c:	bf00      	nop
 8009f6e:	370c      	adds	r7, #12
 8009f70:	46bd      	mov	sp, r7
 8009f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f76:	4770      	bx	lr

08009f78 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009f78:	b480      	push	{r7}
 8009f7a:	b085      	sub	sp, #20
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	4603      	mov	r3, r0
 8009f80:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f82:	2300      	movs	r3, #0
 8009f84:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009f86:	79fb      	ldrb	r3, [r7, #7]
 8009f88:	2b03      	cmp	r3, #3
 8009f8a:	d817      	bhi.n	8009fbc <USBD_Get_USB_Status+0x44>
 8009f8c:	a201      	add	r2, pc, #4	; (adr r2, 8009f94 <USBD_Get_USB_Status+0x1c>)
 8009f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f92:	bf00      	nop
 8009f94:	08009fa5 	.word	0x08009fa5
 8009f98:	08009fab 	.word	0x08009fab
 8009f9c:	08009fb1 	.word	0x08009fb1
 8009fa0:	08009fb7 	.word	0x08009fb7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	73fb      	strb	r3, [r7, #15]
    break;
 8009fa8:	e00b      	b.n	8009fc2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009faa:	2302      	movs	r3, #2
 8009fac:	73fb      	strb	r3, [r7, #15]
    break;
 8009fae:	e008      	b.n	8009fc2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009fb0:	2301      	movs	r3, #1
 8009fb2:	73fb      	strb	r3, [r7, #15]
    break;
 8009fb4:	e005      	b.n	8009fc2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009fb6:	2302      	movs	r3, #2
 8009fb8:	73fb      	strb	r3, [r7, #15]
    break;
 8009fba:	e002      	b.n	8009fc2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009fbc:	2302      	movs	r3, #2
 8009fbe:	73fb      	strb	r3, [r7, #15]
    break;
 8009fc0:	bf00      	nop
  }
  return usb_status;
 8009fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	3714      	adds	r7, #20
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fce:	4770      	bx	lr

08009fd0 <__libc_init_array>:
 8009fd0:	b570      	push	{r4, r5, r6, lr}
 8009fd2:	4e0d      	ldr	r6, [pc, #52]	; (800a008 <__libc_init_array+0x38>)
 8009fd4:	4c0d      	ldr	r4, [pc, #52]	; (800a00c <__libc_init_array+0x3c>)
 8009fd6:	1ba4      	subs	r4, r4, r6
 8009fd8:	10a4      	asrs	r4, r4, #2
 8009fda:	2500      	movs	r5, #0
 8009fdc:	42a5      	cmp	r5, r4
 8009fde:	d109      	bne.n	8009ff4 <__libc_init_array+0x24>
 8009fe0:	4e0b      	ldr	r6, [pc, #44]	; (800a010 <__libc_init_array+0x40>)
 8009fe2:	4c0c      	ldr	r4, [pc, #48]	; (800a014 <__libc_init_array+0x44>)
 8009fe4:	f000 f820 	bl	800a028 <_init>
 8009fe8:	1ba4      	subs	r4, r4, r6
 8009fea:	10a4      	asrs	r4, r4, #2
 8009fec:	2500      	movs	r5, #0
 8009fee:	42a5      	cmp	r5, r4
 8009ff0:	d105      	bne.n	8009ffe <__libc_init_array+0x2e>
 8009ff2:	bd70      	pop	{r4, r5, r6, pc}
 8009ff4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009ff8:	4798      	blx	r3
 8009ffa:	3501      	adds	r5, #1
 8009ffc:	e7ee      	b.n	8009fdc <__libc_init_array+0xc>
 8009ffe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a002:	4798      	blx	r3
 800a004:	3501      	adds	r5, #1
 800a006:	e7f2      	b.n	8009fee <__libc_init_array+0x1e>
 800a008:	0800a0f8 	.word	0x0800a0f8
 800a00c:	0800a0f8 	.word	0x0800a0f8
 800a010:	0800a0f8 	.word	0x0800a0f8
 800a014:	0800a0fc 	.word	0x0800a0fc

0800a018 <memset>:
 800a018:	4402      	add	r2, r0
 800a01a:	4603      	mov	r3, r0
 800a01c:	4293      	cmp	r3, r2
 800a01e:	d100      	bne.n	800a022 <memset+0xa>
 800a020:	4770      	bx	lr
 800a022:	f803 1b01 	strb.w	r1, [r3], #1
 800a026:	e7f9      	b.n	800a01c <memset+0x4>

0800a028 <_init>:
 800a028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a02a:	bf00      	nop
 800a02c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a02e:	bc08      	pop	{r3}
 800a030:	469e      	mov	lr, r3
 800a032:	4770      	bx	lr

0800a034 <_fini>:
 800a034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a036:	bf00      	nop
 800a038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a03a:	bc08      	pop	{r3}
 800a03c:	469e      	mov	lr, r3
 800a03e:	4770      	bx	lr

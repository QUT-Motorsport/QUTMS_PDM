/** @file bts7xx.c
 *
 * @brief A description of the moduleâ€™s purpose.
 *
 * @par
 * COPYRIGHT NOTICE: (c) 2020 QUTMS. All rights reserved.
 */

#include <stdint.h>
#include <stdbool.h>

#include "bts7xx.h"
#include "main.h"
#include "spi.h"

/*!
 * @brief Write 8-bit configuration command to a selected card.
 *
 * @param[in] hspi  		The selected SPI.
 * @param[in] command  		The register that is being configured.
 * @param[in] data			The configuration bits of the message.
 * @param[in] GPIO_Port		The GPIO port of the card being sent the message.
 * @param[in] GPIO_Pin		The GPIO pin of the card being sent the message.
 *
 * @return The SPI response from the previously sent message.
 */
uint8_t
BTS7XX_WriteRegister (SPI_HandleTypeDef *hspi, uint8_t command, uint8_t *data, GPIO_TypeDef* GPIO_Port, uint16_t GPIO_Pin)
{
	uint8_t TxSPIBuffer[1] = {0};
	uint8_t RxSPIBuffer[1] = {0};

//	switch(command)
//	{
//		case BTS7XX_WRITE_OUT_COMMAND:
//		case BTS7XX_WRITE_DCR_COMMAND:
//		case BTS7XX_WRITE_OCR_COMMAND:
//		case BTS7XX_WRITE_KRC_COMMAND:
//		case BTS7XX_WRITE_HWCR_COMMAND:
//			TxSPIBuffer[0] = (uint8_t) (BTS7XX_WRITE_DCR_COMMAND | 0x00);
//			HAL_GPIO_WritePin(GPIO_Port, GPIO_Pin, GPIO_PIN_RESET);
//			HAL_SPI_TransmitReceive(hspi, (uint8_t *)TxSPIBuffer, (uint8_t *)RxSPIBuffer, 1, 1000);
//			HAL_GPIO_WritePin(GPIO_Port, GPIO_Pin, GPIO_PIN_SET);
//			break;
//		case BTS7XX_WRITE_RCD_COMMAND:
//		case BTS7XX_WRITE_PCS_COMMAND:
//		case BTS7XX_WRITE_ICS_COMMAND:
//			TxSPIBuffer[0] = (uint8_t) (BTS7XX_WRITE_DCR_COMMAND | 0x01);
//			HAL_GPIO_WritePin(GPIO_Port, GPIO_Pin, GPIO_PIN_RESET);
//			HAL_SPI_TransmitReceive(hspi, (uint8_t *)TxSPIBuffer, (uint8_t *)RxSPIBuffer, 1, 1000);
//			HAL_GPIO_WritePin(GPIO_Port, GPIO_Pin, GPIO_PIN_SET);
//			break;
//	}

	TxSPIBuffer[0] = (uint8_t) (command | *msg);

	HAL_GPIO_WritePin(GPIO_Port, GPIO_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(hspi, (uint8_t *)TxSPIBuffer, (uint8_t *)RxSPIBuffer, 1, 1000);
	HAL_GPIO_WritePin(GPIO_Port, GPIO_Pin, GPIO_PIN_SET);
	return RxSPIBuffer[0];
}

uint8_t
BTS7XX_ReadRegister (SPI_HandleTypeDef *hspi, uint8_t command, GPIO_TypeDef* GPIO_Port, uint16_t GPIO_Pin)
{
	uint8_t RxSPIBuffer[1] = {0};
	// Send command for register you want to read
	HAL_GPIO_WritePin(GPIO_Port, GPIO_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(hspi, (uint8_t *)command, (uint8_t *)RxSPIBuffer, 1, 1000);
	HAL_GPIO_WritePin(GPIO_Port, GPIO_Pin, GPIO_PIN_SET);
	// The response from this is from the previous command,
	// So you want to send a msg again to get the data you want
	HAL_GPIO_WritePin(GPIO_Port, GPIO_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(hspi, (uint8_t *)command, (uint8_t *)RxSPIBuffer, 1, 1000);
	HAL_GPIO_WritePin(GPIO_Port, GPIO_Pin, GPIO_PIN_SET);
	return RxSPIBuffer[0];
}

/*** end of file ***/
